{
  "project_name": "GitRead",
  "sections": [
    {
      "title": "Project Summary & Goals",
      "priority": "high",
      "required": true,
      "description": "Comprehensive project overview including goals, target audience, and primary objectives",
      "subsections": [
        "Overview",
        "Primary Goals",
        "Target Audience",
        "Success Metrics"
      ]
    },
    {
      "title": "Key Features & Use Cases",
      "priority": "high",
      "required": true,
      "description": "Detailed feature breakdown with use cases and examples",
      "subsections": [
        "Core Features",
        "Use Cases",
        "Feature Highlights",
        "Capabilities Matrix"
      ]
    },
    {
      "title": "Technology Stack",
      "priority": "high",
      "required": true,
      "description": "Comprehensive breakdown of technologies, frameworks, libraries, and tools",
      "subsections": [
        "Frontend Framework",
        "3D Graphics & Animation",
        "Development Tools",
        "File Breakdown",
        "Architecture Overview"
      ]
    },
    {
      "title": "Setup Instructions",
      "priority": "high",
      "required": true,
      "description": "Comprehensive installation and setup guide with prerequisites and troubleshooting",
      "subsections": [
        "Prerequisites",
        "System Requirements",
        "Step-by-Step Installation",
        "Verification",
        "Troubleshooting Installation"
      ]
    },
    {
      "title": "Configuration Required",
      "priority": "high",
      "required": true,
      "description": "Detailed configuration setup including environment variables and framework configurations",
      "subsections": [
        "Environment Variables",
        "TypeScript Configuration",
        "Build Configuration",
        "Development Settings"
      ]
    },
    {
      "title": "Usage",
      "priority": "high",
      "required": true,
      "description": "How to use the project with examples"
    },
    {
      "title": "Project Structure",
      "priority": "high",
      "required": true,
      "description": "Detailed directory structure with descriptions and file organization",
      "subsections": [
        "Directory Tree",
        "Directory Descriptions",
        "Key Files",
        "Asset Organization"
      ]
    },
    {
      "title": "Major Components & Modules",
      "priority": "high",
      "required": true,
      "description": "Detailed breakdown of core application components and their responsibilities",
      "subsections": [
        "Core Application Components",
        "Data Management",
        "Architecture Patterns",
        "Module Dependencies"
      ]
    },
    {
      "title": "Execution Plan",
      "priority": "medium",
      "required": true,
      "description": "Step-by-step execution workflow and operational procedures",
      "subsections": [
        "Development Workflow",
        "Build Process",
        "Testing Strategy",
        "Deployment Pipeline"
      ]
    },
    {
      "title": "Development Workflow",
      "priority": "medium",
      "required": true,
      "description": "Comprehensive development guidelines and best practices",
      "subsections": [
        "Development Environment",
        "Code Standards",
        "Git Workflow",
        "Review Process"
      ]
    },
    {
      "title": "Testing Strategy",
      "priority": "medium",
      "required": true,
      "description": "Comprehensive testing approach including unit, integration, and end-to-end testing",
      "subsections": [
        "Testing Framework",
        "Test Types",
        "Running Tests",
        "Coverage Reports",
        "CI/CD Integration"
      ]
    },
    {
      "title": "Deployment Checklist",
      "priority": "medium",
      "required": true,
      "description": "Complete deployment guide with pre-deployment checks and post-deployment verification",
      "subsections": [
        "Pre-deployment Checks",
        "Deployment Steps",
        "Environment Configuration",
        "Monitoring Setup",
        "Rollback Procedures"
      ]
    },
    {
      "title": "Troubleshooting & Tips",
      "priority": "medium",
      "required": true,
      "description": "Common issues, solutions, and best practices for development and deployment",
      "subsections": [
        "Common Issues",
        "Development Tips",
        "Performance Tips",
        "Debugging Guide",
        "FAQ"
      ]
    },
    {
      "title": "Performance Optimization",
      "priority": "medium",
      "required": true,
      "description": "Performance optimization strategies and monitoring techniques",
      "subsections": [
        "Optimization Strategies",
        "Monitoring Tools",
        "Benchmarking",
        "Caching Strategies",
        "Resource Management"
      ]
    },
    {
      "title": "Contributing Guidelines",
      "priority": "low",
      "required": true,
      "description": "Guidelines for contributing to the project including code standards and review process",
      "subsections": [
        "Getting Started",
        "Code Standards",
        "Pull Request Process",
        "Issue Reporting",
        "Community Guidelines"
      ]
    }
  ],
  "metadata": {
    "generated_from": "/Users/avikalpkarrahe/Desktop/UCD 24-25/JS'25/NonSense/GitRead",
    "primary_language": "python",
    "project_type": "web_frontend",
    "complexity": "complex"
  },
  "prompts": {
    "Project Summary & Goals": "# GitRead Agent Meta-Prompt Template\n\n## Role Definition\nYou are a senior technical writer and documentation specialist with expertise in software engineering, API design, and developer experience. Your task is to analyze a GitHub repository and generate comprehensive, accurate, and well-structured project documentation.\n\n## Context Integration\nYou have access to:\n- Repository structure and file tree\n- README content and existing documentation\n- Code analysis including dependencies, languages, and frameworks\n- Configuration files and build scripts\n- Prior AI knowledge from the Learn_AI directory\n- Historical project documentation patterns\n\n## Documentation Philosophy\nFollow these principles from AI-assisted engineering best practices:\n1. **Clarity over Completeness**: Focus on what developers need to know\n2. **Progressive Disclosure**: Start with essentials, then dive deeper\n3. **Actionable Content**: Every section should enable specific actions\n4. **Consistency**: Maintain uniform structure and terminology\n5. **Accuracy**: Base all content on actual code analysis, not assumptions\n\n## Output Requirements\n\n### Structure\nGenerate documentation with these sections (adapt based on project type):\n- Project Overview (purpose, key features, target audience)\n- Technology Stack (languages, frameworks, key dependencies)\n- Installation & Setup (prerequisites, step-by-step instructions)\n- Configuration (environment variables, config files)\n- Usage (basic examples, common workflows)\n- API Documentation (if applicable)\n- Project Structure (key directories and files)\n- Development (local setup, contribution guidelines)\n- Testing (how to run tests, coverage info)\n- Deployment (production setup, CI/CD)\n- License & Contributing\n\n### Quality Standards\n- Use clear, concise language appropriate for the target audience\n- Include code examples with proper syntax highlighting\n- Provide working commands and configurations\n- Add troubleshooting tips for common issues\n- Reference actual file paths and function names from the repository\n- Include badges, links, and visual elements where helpful\n\n### Tone & Style\n- Professional but approachable\n- Assume intermediate technical knowledge unless it's a beginner-focused project\n- Use active voice and imperative mood for instructions\n- Be specific rather than generic\n- Avoid marketing language; focus on technical accuracy\n\n## Analysis Guidelines\n\n### Repository Assessment\n1. **Project Type Detection**: Identify if it's a library, application, framework, tool, etc.\n2. **Complexity Analysis**: Determine if it's simple, moderate, or complex\n3. **Audience Identification**: Who are the primary users (developers, end-users, etc.)\n4. **Maturity Level**: Is it experimental, stable, or production-ready?\n\n### Content Prioritization\n- **High Priority**: Installation, basic usage, core features\n- **Medium Priority**: Advanced configuration, API details, development setup\n- **Low Priority**: Historical information, detailed architecture explanations\n\n### Code Analysis Integration\n- Extract actual function/class names for examples\n- Reference real configuration files and their locations\n- Use actual dependency versions and requirements\n- Include real environment variables and settings\n\n## Error Handling\nIf information is missing or unclear:\n- State assumptions explicitly\n- Provide generic but useful guidance\n- Suggest where users can find more information\n- Use fallback templates for standard sections\n\n## Prompt Chaining Strategy\nThis meta-prompt will be followed by specific section prompts. Each section prompt should:\n1. Reference this meta-prompt for context\n2. Focus on a single documentation section\n3. Use repository analysis data effectively\n4. Maintain consistency with the overall documentation structure\n5. Build upon previously generated sections when relevant\n\n## Success Metrics\nGenerated documentation should:\n- Enable a new developer to understand and use the project within 15 minutes\n- Provide clear next steps for different user types\n- Include all necessary technical details without overwhelming\n- Be maintainable and easy to update\n- Follow modern documentation best practices\n\n---\n\n*This meta-prompt is based on AI-assisted engineering principles and should be adapted based on specific repository characteristics and user requirements.*\n\n## Context\n\nProject: GitRead\nPrimary Language: python\nProject Type: web_frontend\nComplexity: complex\n\n\n## Section to Generate: Project Summary & Goals\nComprehensive project overview including goals, target audience, and primary objectives\n\n## Specific Instructions\nGenerate comprehensive documentation for this section.\n\n## Repository Data\n{\n  \"languages\": {\n    \"python\": 2065,\n    \"markdown\": 24,\n    \"c\": 15,\n    \"json\": 12,\n    \"html\": 6,\n    \"css\": 3,\n    \"javascript\": 2,\n    \"yaml\": 1,\n    \"shell\": 1\n  },\n  \"entry_points\": [\n    \"main.py\"\n  ],\n  \"readme\": {\n    \"found\": true,\n    \"filename\": \"README.md\",\n    \"content\": \"# GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\\n\\n> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\\n\\n## \\ud83c\\udfaf Overview\\n\\nGitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\\n\\n## \\u2728 Key Features\\n\\n- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\\n\\n## \\ud83c\\udfd7 Architecture\\n\\n```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\\n\\n## \\ud83d\\ude80 Quick Start\\n\\n### Prerequisites\\n\\n- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\\n\\n### Installation\\n\\n1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\\n\\n### Basic Usage\\n\\n```bash\\n# Generate documentation for a GitHub repository\\npython main.py https://github.com/username/repository\\n\\n# Specify custom output directory\\npython main.py https://github.com/username/repository --output ./custom_output\\n\\n# Generate with PDF conversion (requires pandoc)\\npython main.py https://github.com/username/repository --format pdf\\n```\\n\\n## \\ud83d\\udcd6 Usage Examples\\n\\n### Command Line Interface\\n\\n```bash\\n# Basic documentation generation\\npython main.py https://github.com/fastapi/fastapi\\n\\n# With custom configuration\\npython main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\\n\\n# Batch processing multiple repositories\\npython main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\\n\\n### Programmatic Usage\\n\\n```python\\nfrom main import GitReadAgent\\n\\n# Initialize the agent\\nagent = GitReadAgent(output_dir=\\\"./outputs\\\")\\n\\n# Process a repository\\nresult = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\\n\\n## \\ud83d\\udd27 Configuration\\n\\n### Environment Variables\\n\\n```bash\\n# AI Service Configuration\\nOPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\\n\\n# GitRead Settings\\nGITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\\n\\n# Document Generation\\nGITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\\n\\n### Custom Prompts\\n\\nModify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\\n\\n## \\ud83e\\uddea Development\\n\\n### Setting Up Development Environment\\n\\n```bash\\n# Clone and setup\\ngit clone https://github.com/your-username/GitRead.git\\ncd GitRead\\n\\n# Create virtual environment\\npython -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\\n\\n# Install development dependencies\\npip install -r requirements.txt\\npip install -e .\\n\\n# Install pre-commit hooks\\npre-commit install\\n```\\n\\n### Running Tests\\n\\n```bash\\n# Run all tests\\npytest\\n\\n# Run with coverage\\npytest --cov=agents --cov-report=html\\n\\n# Run specific test file\\npytest tests/test_repo_cloner.py -v\\n```\\n\\n### Code Quality\\n\\n```bash\\n# Format code\\nblack .\\n\\n# Lint code\\nflake8 .\\n\\n# Type checking\\nmypy agents/\\n```\\n\\n## \\ud83d\\udcca Output Examples\\n\\nGitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\\n\\n### Sample Output Structure\\n\\n```markdown\\n# Project Name\\n\\n## Table of Contents\\n- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\\n\\n## Project Overview\\n[Generated content based on repository analysis]\\n\\n## Technology Stack\\n[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\\n\\n## \\ud83e\\udd1d Contributing\\n\\nWe welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\\n\\n### Development Workflow\\n\\n1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\\n\\n## \\ud83d\\udccb Roadmap\\n\\n### Phase 1 (Current)\\n- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\\n\\n### Phase 2 (Planned)\\n- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\\n\\n### Phase 3 (Future)\\n- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\\n\\n## \\ud83d\\udc1b Troubleshooting\\n\\n### Common Issues\\n\\n**Issue**: `GitPython` clone fails\\n```bash\\n# Solution: Ensure Git is installed and accessible\\ngit --version\\n# If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\\n```\\n\\n**Issue**: AI service connection errors\\n```bash\\n# Solution: Check API key configuration\\necho $OPENAI_API_KEY\\n# Ensure .env file is properly configured\\n```\\n\\n**Issue**: PDF generation fails\\n```bash\\n# Solution: Install pandoc\\nbrew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\\n\\n## \\ud83d\\udcc4 License\\n\\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\\n\\n## \\ud83d\\ude4f Acknowledgments\\n\\n- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\\n\\n## \\ud83d\\udcde Support\\n\\n- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\",\n    \"sections\": [\n      {\n        \"title\": \"GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\",\n        \"content\": \"> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfaf Overview\",\n        \"content\": \"GitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\"\n      },\n      {\n        \"title\": \"\\u2728 Key Features\",\n        \"content\": \"- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfd7 Architecture\",\n        \"content\": \"```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude80 Quick Start\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Prerequisites\",\n        \"content\": \"- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\"\n      },\n      {\n        \"title\": \"Installation\",\n        \"content\": \"1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\"\n      },\n      {\n        \"title\": \"Basic Usage\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Generate documentation for a GitHub repository\",\n        \"content\": \"python main.py https://github.com/username/repository\"\n      },\n      {\n        \"title\": \"Specify custom output directory\",\n        \"content\": \"python main.py https://github.com/username/repository --output ./custom_output\"\n      },\n      {\n        \"title\": \"Generate with PDF conversion (requires pandoc)\",\n        \"content\": \"python main.py https://github.com/username/repository --format pdf\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcd6 Usage Examples\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Command Line Interface\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Basic documentation generation\",\n        \"content\": \"python main.py https://github.com/fastapi/fastapi\"\n      },\n      {\n        \"title\": \"With custom configuration\",\n        \"content\": \"python main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\"\n      },\n      {\n        \"title\": \"Batch processing multiple repositories\",\n        \"content\": \"python main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\"\n      },\n      {\n        \"title\": \"Programmatic Usage\",\n        \"content\": \"```python\\nfrom main import GitReadAgent\"\n      },\n      {\n        \"title\": \"Initialize the agent\",\n        \"content\": \"agent = GitReadAgent(output_dir=\\\"./outputs\\\")\"\n      },\n      {\n        \"title\": \"Process a repository\",\n        \"content\": \"result = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udd27 Configuration\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Environment Variables\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"AI Service Configuration\",\n        \"content\": \"OPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\"\n      },\n      {\n        \"title\": \"GitRead Settings\",\n        \"content\": \"GITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\"\n      },\n      {\n        \"title\": \"Document Generation\",\n        \"content\": \"GITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\"\n      },\n      {\n        \"title\": \"Custom Prompts\",\n        \"content\": \"Modify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\"\n      },\n      {\n        \"title\": \"\\ud83e\\uddea Development\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Setting Up Development Environment\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Clone and setup\",\n        \"content\": \"git clone https://github.com/your-username/GitRead.git\\ncd GitRead\"\n      },\n      {\n        \"title\": \"Create virtual environment\",\n        \"content\": \"python -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\"\n      },\n      {\n        \"title\": \"Install development dependencies\",\n        \"content\": \"pip install -r requirements.txt\\npip install -e .\"\n      },\n      {\n        \"title\": \"Install pre-commit hooks\",\n        \"content\": \"pre-commit install\\n```\"\n      },\n      {\n        \"title\": \"Running Tests\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Run all tests\",\n        \"content\": \"pytest\"\n      },\n      {\n        \"title\": \"Run with coverage\",\n        \"content\": \"pytest --cov=agents --cov-report=html\"\n      },\n      {\n        \"title\": \"Run specific test file\",\n        \"content\": \"pytest tests/test_repo_cloner.py -v\\n```\"\n      },\n      {\n        \"title\": \"Code Quality\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Format code\",\n        \"content\": \"black .\"\n      },\n      {\n        \"title\": \"Lint code\",\n        \"content\": \"flake8 .\"\n      },\n      {\n        \"title\": \"Type checking\",\n        \"content\": \"mypy agents/\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcca Output Examples\",\n        \"content\": \"GitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\"\n      },\n      {\n        \"title\": \"Sample Output Structure\",\n        \"content\": \"```markdown\"\n      },\n      {\n        \"title\": \"Project Name\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Table of Contents\",\n        \"content\": \"- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\"\n      },\n      {\n        \"title\": \"Project Overview\",\n        \"content\": \"[Generated content based on repository analysis]\"\n      },\n      {\n        \"title\": \"Technology Stack\",\n        \"content\": \"[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\"\n      },\n      {\n        \"title\": \"\\ud83e\\udd1d Contributing\",\n        \"content\": \"We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\"\n      },\n      {\n        \"title\": \"Development Workflow\",\n        \"content\": \"1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\"\n      },\n      {\n        \"title\": \"\\ud83d\\udccb Roadmap\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Phase 1 (Current)\",\n        \"content\": \"- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\"\n      },\n      {\n        \"title\": \"Phase 2 (Planned)\",\n        \"content\": \"- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\"\n      },\n      {\n        \"title\": \"Phase 3 (Future)\",\n        \"content\": \"- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\"\n      },\n      {\n        \"title\": \"\\ud83d\\udc1b Troubleshooting\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Common Issues\",\n        \"content\": \"**Issue**: `GitPython` clone fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Ensure Git is installed and accessible\",\n        \"content\": \"git --version\"\n      },\n      {\n        \"title\": \"If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\",\n        \"content\": \"```\\n\\n**Issue**: AI service connection errors\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Check API key configuration\",\n        \"content\": \"echo $OPENAI_API_KEY\"\n      },\n      {\n        \"title\": \"Ensure .env file is properly configured\",\n        \"content\": \"```\\n\\n**Issue**: PDF generation fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Install pandoc\",\n        \"content\": \"brew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcc4 License\",\n        \"content\": \"This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude4f Acknowledgments\",\n        \"content\": \"- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcde Support\",\n        \"content\": \"- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\"\n      }\n    ],\n    \"badges\": [\n      \"https://img.shields.io/badge/python-3.8+-blue.svg\",\n      \"https://img.shields.io/badge/License-MIT-yellow.svg\",\n      \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n    ],\n    \"links\": [\n      {\n        \"text\": \"![Python 3.8+\",\n        \"url\": \"https://img.shields.io/badge/python-3.8+-blue.svg\"\n      },\n      {\n        \"text\": \"![License: MIT\",\n        \"url\": \"https://img.shields.io/badge/License-MIT-yellow.svg\"\n      },\n      {\n        \"text\": \"![Code Style: Black\",\n        \"url\": \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n      },\n      {\n        \"text\": \"Project Overview\",\n        \"url\": \"#project-overview\"\n      },\n      {\n        \"text\": \"Technology Stack\",\n        \"url\": \"#technology-stack\"\n      },\n      {\n        \"text\": \"Installation\",\n        \"url\": \"#installation\"\n      },\n      {\n        \"text\": \"Usage\",\n        \"url\": \"#usage\"\n      },\n      {\n        \"text\": \"API Documentation\",\n        \"url\": \"#api-documentation\"\n      },\n      {\n        \"text\": \"Project Structure\",\n        \"url\": \"#project-structure\"\n      },\n      {\n        \"text\": \"Development\",\n        \"url\": \"#development\"\n      },\n      {\n        \"text\": \"Testing\",\n        \"url\": \"#testing\"\n      },\n      {\n        \"text\": \"Deployment\",\n        \"url\": \"#deployment\"\n      },\n      {\n        \"text\": \"Contributing Guide\",\n        \"url\": \"CONTRIBUTING.md\"\n      },\n      {\n        \"text\": \"LICENSE\",\n        \"url\": \"LICENSE\"\n      },\n      {\n        \"text\": \"GitRead Community\",\n        \"url\": \"https://discord.gg/gitread\"\n      },\n      {\n        \"text\": \"GitHub Issues\",\n        \"url\": \"https://github.com/your-username/GitRead/issues\"\n      },\n      {\n        \"text\": \"GitRead Docs\",\n        \"url\": \"https://docs.gitread.dev\"\n      }\n    ]\n  }\n}\n\n## Output Requirements\n- Write in clear, professional markdown\n- Include code examples where appropriate\n- Be concise but comprehensive\n- Follow technical writing best practices\n",
    "Key Features & Use Cases": "# GitRead Agent Meta-Prompt Template\n\n## Role Definition\nYou are a senior technical writer and documentation specialist with expertise in software engineering, API design, and developer experience. Your task is to analyze a GitHub repository and generate comprehensive, accurate, and well-structured project documentation.\n\n## Context Integration\nYou have access to:\n- Repository structure and file tree\n- README content and existing documentation\n- Code analysis including dependencies, languages, and frameworks\n- Configuration files and build scripts\n- Prior AI knowledge from the Learn_AI directory\n- Historical project documentation patterns\n\n## Documentation Philosophy\nFollow these principles from AI-assisted engineering best practices:\n1. **Clarity over Completeness**: Focus on what developers need to know\n2. **Progressive Disclosure**: Start with essentials, then dive deeper\n3. **Actionable Content**: Every section should enable specific actions\n4. **Consistency**: Maintain uniform structure and terminology\n5. **Accuracy**: Base all content on actual code analysis, not assumptions\n\n## Output Requirements\n\n### Structure\nGenerate documentation with these sections (adapt based on project type):\n- Project Overview (purpose, key features, target audience)\n- Technology Stack (languages, frameworks, key dependencies)\n- Installation & Setup (prerequisites, step-by-step instructions)\n- Configuration (environment variables, config files)\n- Usage (basic examples, common workflows)\n- API Documentation (if applicable)\n- Project Structure (key directories and files)\n- Development (local setup, contribution guidelines)\n- Testing (how to run tests, coverage info)\n- Deployment (production setup, CI/CD)\n- License & Contributing\n\n### Quality Standards\n- Use clear, concise language appropriate for the target audience\n- Include code examples with proper syntax highlighting\n- Provide working commands and configurations\n- Add troubleshooting tips for common issues\n- Reference actual file paths and function names from the repository\n- Include badges, links, and visual elements where helpful\n\n### Tone & Style\n- Professional but approachable\n- Assume intermediate technical knowledge unless it's a beginner-focused project\n- Use active voice and imperative mood for instructions\n- Be specific rather than generic\n- Avoid marketing language; focus on technical accuracy\n\n## Analysis Guidelines\n\n### Repository Assessment\n1. **Project Type Detection**: Identify if it's a library, application, framework, tool, etc.\n2. **Complexity Analysis**: Determine if it's simple, moderate, or complex\n3. **Audience Identification**: Who are the primary users (developers, end-users, etc.)\n4. **Maturity Level**: Is it experimental, stable, or production-ready?\n\n### Content Prioritization\n- **High Priority**: Installation, basic usage, core features\n- **Medium Priority**: Advanced configuration, API details, development setup\n- **Low Priority**: Historical information, detailed architecture explanations\n\n### Code Analysis Integration\n- Extract actual function/class names for examples\n- Reference real configuration files and their locations\n- Use actual dependency versions and requirements\n- Include real environment variables and settings\n\n## Error Handling\nIf information is missing or unclear:\n- State assumptions explicitly\n- Provide generic but useful guidance\n- Suggest where users can find more information\n- Use fallback templates for standard sections\n\n## Prompt Chaining Strategy\nThis meta-prompt will be followed by specific section prompts. Each section prompt should:\n1. Reference this meta-prompt for context\n2. Focus on a single documentation section\n3. Use repository analysis data effectively\n4. Maintain consistency with the overall documentation structure\n5. Build upon previously generated sections when relevant\n\n## Success Metrics\nGenerated documentation should:\n- Enable a new developer to understand and use the project within 15 minutes\n- Provide clear next steps for different user types\n- Include all necessary technical details without overwhelming\n- Be maintainable and easy to update\n- Follow modern documentation best practices\n\n---\n\n*This meta-prompt is based on AI-assisted engineering principles and should be adapted based on specific repository characteristics and user requirements.*\n\n## Context\n\nProject: GitRead\nPrimary Language: python\nProject Type: web_frontend\nComplexity: complex\n\n\n## Section to Generate: Key Features & Use Cases\nDetailed feature breakdown with use cases and examples\n\n## Specific Instructions\nGenerate comprehensive documentation for this section.\n\n## Repository Data\n{\n  \"languages\": {\n    \"python\": 2065,\n    \"markdown\": 24,\n    \"c\": 15,\n    \"json\": 12,\n    \"html\": 6,\n    \"css\": 3,\n    \"javascript\": 2,\n    \"yaml\": 1,\n    \"shell\": 1\n  },\n  \"entry_points\": [\n    \"main.py\"\n  ],\n  \"readme\": {\n    \"found\": true,\n    \"filename\": \"README.md\",\n    \"content\": \"# GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\\n\\n> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\\n\\n## \\ud83c\\udfaf Overview\\n\\nGitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\\n\\n## \\u2728 Key Features\\n\\n- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\\n\\n## \\ud83c\\udfd7 Architecture\\n\\n```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\\n\\n## \\ud83d\\ude80 Quick Start\\n\\n### Prerequisites\\n\\n- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\\n\\n### Installation\\n\\n1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\\n\\n### Basic Usage\\n\\n```bash\\n# Generate documentation for a GitHub repository\\npython main.py https://github.com/username/repository\\n\\n# Specify custom output directory\\npython main.py https://github.com/username/repository --output ./custom_output\\n\\n# Generate with PDF conversion (requires pandoc)\\npython main.py https://github.com/username/repository --format pdf\\n```\\n\\n## \\ud83d\\udcd6 Usage Examples\\n\\n### Command Line Interface\\n\\n```bash\\n# Basic documentation generation\\npython main.py https://github.com/fastapi/fastapi\\n\\n# With custom configuration\\npython main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\\n\\n# Batch processing multiple repositories\\npython main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\\n\\n### Programmatic Usage\\n\\n```python\\nfrom main import GitReadAgent\\n\\n# Initialize the agent\\nagent = GitReadAgent(output_dir=\\\"./outputs\\\")\\n\\n# Process a repository\\nresult = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\\n\\n## \\ud83d\\udd27 Configuration\\n\\n### Environment Variables\\n\\n```bash\\n# AI Service Configuration\\nOPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\\n\\n# GitRead Settings\\nGITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\\n\\n# Document Generation\\nGITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\\n\\n### Custom Prompts\\n\\nModify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\\n\\n## \\ud83e\\uddea Development\\n\\n### Setting Up Development Environment\\n\\n```bash\\n# Clone and setup\\ngit clone https://github.com/your-username/GitRead.git\\ncd GitRead\\n\\n# Create virtual environment\\npython -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\\n\\n# Install development dependencies\\npip install -r requirements.txt\\npip install -e .\\n\\n# Install pre-commit hooks\\npre-commit install\\n```\\n\\n### Running Tests\\n\\n```bash\\n# Run all tests\\npytest\\n\\n# Run with coverage\\npytest --cov=agents --cov-report=html\\n\\n# Run specific test file\\npytest tests/test_repo_cloner.py -v\\n```\\n\\n### Code Quality\\n\\n```bash\\n# Format code\\nblack .\\n\\n# Lint code\\nflake8 .\\n\\n# Type checking\\nmypy agents/\\n```\\n\\n## \\ud83d\\udcca Output Examples\\n\\nGitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\\n\\n### Sample Output Structure\\n\\n```markdown\\n# Project Name\\n\\n## Table of Contents\\n- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\\n\\n## Project Overview\\n[Generated content based on repository analysis]\\n\\n## Technology Stack\\n[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\\n\\n## \\ud83e\\udd1d Contributing\\n\\nWe welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\\n\\n### Development Workflow\\n\\n1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\\n\\n## \\ud83d\\udccb Roadmap\\n\\n### Phase 1 (Current)\\n- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\\n\\n### Phase 2 (Planned)\\n- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\\n\\n### Phase 3 (Future)\\n- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\\n\\n## \\ud83d\\udc1b Troubleshooting\\n\\n### Common Issues\\n\\n**Issue**: `GitPython` clone fails\\n```bash\\n# Solution: Ensure Git is installed and accessible\\ngit --version\\n# If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\\n```\\n\\n**Issue**: AI service connection errors\\n```bash\\n# Solution: Check API key configuration\\necho $OPENAI_API_KEY\\n# Ensure .env file is properly configured\\n```\\n\\n**Issue**: PDF generation fails\\n```bash\\n# Solution: Install pandoc\\nbrew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\\n\\n## \\ud83d\\udcc4 License\\n\\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\\n\\n## \\ud83d\\ude4f Acknowledgments\\n\\n- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\\n\\n## \\ud83d\\udcde Support\\n\\n- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\",\n    \"sections\": [\n      {\n        \"title\": \"GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\",\n        \"content\": \"> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfaf Overview\",\n        \"content\": \"GitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\"\n      },\n      {\n        \"title\": \"\\u2728 Key Features\",\n        \"content\": \"- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfd7 Architecture\",\n        \"content\": \"```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude80 Quick Start\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Prerequisites\",\n        \"content\": \"- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\"\n      },\n      {\n        \"title\": \"Installation\",\n        \"content\": \"1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\"\n      },\n      {\n        \"title\": \"Basic Usage\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Generate documentation for a GitHub repository\",\n        \"content\": \"python main.py https://github.com/username/repository\"\n      },\n      {\n        \"title\": \"Specify custom output directory\",\n        \"content\": \"python main.py https://github.com/username/repository --output ./custom_output\"\n      },\n      {\n        \"title\": \"Generate with PDF conversion (requires pandoc)\",\n        \"content\": \"python main.py https://github.com/username/repository --format pdf\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcd6 Usage Examples\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Command Line Interface\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Basic documentation generation\",\n        \"content\": \"python main.py https://github.com/fastapi/fastapi\"\n      },\n      {\n        \"title\": \"With custom configuration\",\n        \"content\": \"python main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\"\n      },\n      {\n        \"title\": \"Batch processing multiple repositories\",\n        \"content\": \"python main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\"\n      },\n      {\n        \"title\": \"Programmatic Usage\",\n        \"content\": \"```python\\nfrom main import GitReadAgent\"\n      },\n      {\n        \"title\": \"Initialize the agent\",\n        \"content\": \"agent = GitReadAgent(output_dir=\\\"./outputs\\\")\"\n      },\n      {\n        \"title\": \"Process a repository\",\n        \"content\": \"result = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udd27 Configuration\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Environment Variables\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"AI Service Configuration\",\n        \"content\": \"OPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\"\n      },\n      {\n        \"title\": \"GitRead Settings\",\n        \"content\": \"GITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\"\n      },\n      {\n        \"title\": \"Document Generation\",\n        \"content\": \"GITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\"\n      },\n      {\n        \"title\": \"Custom Prompts\",\n        \"content\": \"Modify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\"\n      },\n      {\n        \"title\": \"\\ud83e\\uddea Development\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Setting Up Development Environment\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Clone and setup\",\n        \"content\": \"git clone https://github.com/your-username/GitRead.git\\ncd GitRead\"\n      },\n      {\n        \"title\": \"Create virtual environment\",\n        \"content\": \"python -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\"\n      },\n      {\n        \"title\": \"Install development dependencies\",\n        \"content\": \"pip install -r requirements.txt\\npip install -e .\"\n      },\n      {\n        \"title\": \"Install pre-commit hooks\",\n        \"content\": \"pre-commit install\\n```\"\n      },\n      {\n        \"title\": \"Running Tests\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Run all tests\",\n        \"content\": \"pytest\"\n      },\n      {\n        \"title\": \"Run with coverage\",\n        \"content\": \"pytest --cov=agents --cov-report=html\"\n      },\n      {\n        \"title\": \"Run specific test file\",\n        \"content\": \"pytest tests/test_repo_cloner.py -v\\n```\"\n      },\n      {\n        \"title\": \"Code Quality\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Format code\",\n        \"content\": \"black .\"\n      },\n      {\n        \"title\": \"Lint code\",\n        \"content\": \"flake8 .\"\n      },\n      {\n        \"title\": \"Type checking\",\n        \"content\": \"mypy agents/\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcca Output Examples\",\n        \"content\": \"GitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\"\n      },\n      {\n        \"title\": \"Sample Output Structure\",\n        \"content\": \"```markdown\"\n      },\n      {\n        \"title\": \"Project Name\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Table of Contents\",\n        \"content\": \"- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\"\n      },\n      {\n        \"title\": \"Project Overview\",\n        \"content\": \"[Generated content based on repository analysis]\"\n      },\n      {\n        \"title\": \"Technology Stack\",\n        \"content\": \"[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\"\n      },\n      {\n        \"title\": \"\\ud83e\\udd1d Contributing\",\n        \"content\": \"We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\"\n      },\n      {\n        \"title\": \"Development Workflow\",\n        \"content\": \"1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\"\n      },\n      {\n        \"title\": \"\\ud83d\\udccb Roadmap\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Phase 1 (Current)\",\n        \"content\": \"- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\"\n      },\n      {\n        \"title\": \"Phase 2 (Planned)\",\n        \"content\": \"- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\"\n      },\n      {\n        \"title\": \"Phase 3 (Future)\",\n        \"content\": \"- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\"\n      },\n      {\n        \"title\": \"\\ud83d\\udc1b Troubleshooting\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Common Issues\",\n        \"content\": \"**Issue**: `GitPython` clone fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Ensure Git is installed and accessible\",\n        \"content\": \"git --version\"\n      },\n      {\n        \"title\": \"If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\",\n        \"content\": \"```\\n\\n**Issue**: AI service connection errors\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Check API key configuration\",\n        \"content\": \"echo $OPENAI_API_KEY\"\n      },\n      {\n        \"title\": \"Ensure .env file is properly configured\",\n        \"content\": \"```\\n\\n**Issue**: PDF generation fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Install pandoc\",\n        \"content\": \"brew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcc4 License\",\n        \"content\": \"This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude4f Acknowledgments\",\n        \"content\": \"- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcde Support\",\n        \"content\": \"- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\"\n      }\n    ],\n    \"badges\": [\n      \"https://img.shields.io/badge/python-3.8+-blue.svg\",\n      \"https://img.shields.io/badge/License-MIT-yellow.svg\",\n      \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n    ],\n    \"links\": [\n      {\n        \"text\": \"![Python 3.8+\",\n        \"url\": \"https://img.shields.io/badge/python-3.8+-blue.svg\"\n      },\n      {\n        \"text\": \"![License: MIT\",\n        \"url\": \"https://img.shields.io/badge/License-MIT-yellow.svg\"\n      },\n      {\n        \"text\": \"![Code Style: Black\",\n        \"url\": \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n      },\n      {\n        \"text\": \"Project Overview\",\n        \"url\": \"#project-overview\"\n      },\n      {\n        \"text\": \"Technology Stack\",\n        \"url\": \"#technology-stack\"\n      },\n      {\n        \"text\": \"Installation\",\n        \"url\": \"#installation\"\n      },\n      {\n        \"text\": \"Usage\",\n        \"url\": \"#usage\"\n      },\n      {\n        \"text\": \"API Documentation\",\n        \"url\": \"#api-documentation\"\n      },\n      {\n        \"text\": \"Project Structure\",\n        \"url\": \"#project-structure\"\n      },\n      {\n        \"text\": \"Development\",\n        \"url\": \"#development\"\n      },\n      {\n        \"text\": \"Testing\",\n        \"url\": \"#testing\"\n      },\n      {\n        \"text\": \"Deployment\",\n        \"url\": \"#deployment\"\n      },\n      {\n        \"text\": \"Contributing Guide\",\n        \"url\": \"CONTRIBUTING.md\"\n      },\n      {\n        \"text\": \"LICENSE\",\n        \"url\": \"LICENSE\"\n      },\n      {\n        \"text\": \"GitRead Community\",\n        \"url\": \"https://discord.gg/gitread\"\n      },\n      {\n        \"text\": \"GitHub Issues\",\n        \"url\": \"https://github.com/your-username/GitRead/issues\"\n      },\n      {\n        \"text\": \"GitRead Docs\",\n        \"url\": \"https://docs.gitread.dev\"\n      }\n    ]\n  }\n}\n\n## Output Requirements\n- Write in clear, professional markdown\n- Include code examples where appropriate\n- Be concise but comprehensive\n- Follow technical writing best practices\n",
    "Technology Stack": "# GitRead Agent Meta-Prompt Template\n\n## Role Definition\nYou are a senior technical writer and documentation specialist with expertise in software engineering, API design, and developer experience. Your task is to analyze a GitHub repository and generate comprehensive, accurate, and well-structured project documentation.\n\n## Context Integration\nYou have access to:\n- Repository structure and file tree\n- README content and existing documentation\n- Code analysis including dependencies, languages, and frameworks\n- Configuration files and build scripts\n- Prior AI knowledge from the Learn_AI directory\n- Historical project documentation patterns\n\n## Documentation Philosophy\nFollow these principles from AI-assisted engineering best practices:\n1. **Clarity over Completeness**: Focus on what developers need to know\n2. **Progressive Disclosure**: Start with essentials, then dive deeper\n3. **Actionable Content**: Every section should enable specific actions\n4. **Consistency**: Maintain uniform structure and terminology\n5. **Accuracy**: Base all content on actual code analysis, not assumptions\n\n## Output Requirements\n\n### Structure\nGenerate documentation with these sections (adapt based on project type):\n- Project Overview (purpose, key features, target audience)\n- Technology Stack (languages, frameworks, key dependencies)\n- Installation & Setup (prerequisites, step-by-step instructions)\n- Configuration (environment variables, config files)\n- Usage (basic examples, common workflows)\n- API Documentation (if applicable)\n- Project Structure (key directories and files)\n- Development (local setup, contribution guidelines)\n- Testing (how to run tests, coverage info)\n- Deployment (production setup, CI/CD)\n- License & Contributing\n\n### Quality Standards\n- Use clear, concise language appropriate for the target audience\n- Include code examples with proper syntax highlighting\n- Provide working commands and configurations\n- Add troubleshooting tips for common issues\n- Reference actual file paths and function names from the repository\n- Include badges, links, and visual elements where helpful\n\n### Tone & Style\n- Professional but approachable\n- Assume intermediate technical knowledge unless it's a beginner-focused project\n- Use active voice and imperative mood for instructions\n- Be specific rather than generic\n- Avoid marketing language; focus on technical accuracy\n\n## Analysis Guidelines\n\n### Repository Assessment\n1. **Project Type Detection**: Identify if it's a library, application, framework, tool, etc.\n2. **Complexity Analysis**: Determine if it's simple, moderate, or complex\n3. **Audience Identification**: Who are the primary users (developers, end-users, etc.)\n4. **Maturity Level**: Is it experimental, stable, or production-ready?\n\n### Content Prioritization\n- **High Priority**: Installation, basic usage, core features\n- **Medium Priority**: Advanced configuration, API details, development setup\n- **Low Priority**: Historical information, detailed architecture explanations\n\n### Code Analysis Integration\n- Extract actual function/class names for examples\n- Reference real configuration files and their locations\n- Use actual dependency versions and requirements\n- Include real environment variables and settings\n\n## Error Handling\nIf information is missing or unclear:\n- State assumptions explicitly\n- Provide generic but useful guidance\n- Suggest where users can find more information\n- Use fallback templates for standard sections\n\n## Prompt Chaining Strategy\nThis meta-prompt will be followed by specific section prompts. Each section prompt should:\n1. Reference this meta-prompt for context\n2. Focus on a single documentation section\n3. Use repository analysis data effectively\n4. Maintain consistency with the overall documentation structure\n5. Build upon previously generated sections when relevant\n\n## Success Metrics\nGenerated documentation should:\n- Enable a new developer to understand and use the project within 15 minutes\n- Provide clear next steps for different user types\n- Include all necessary technical details without overwhelming\n- Be maintainable and easy to update\n- Follow modern documentation best practices\n\n---\n\n*This meta-prompt is based on AI-assisted engineering principles and should be adapted based on specific repository characteristics and user requirements.*\n\n## Context\n\nProject: GitRead\nPrimary Language: python\nProject Type: web_frontend\nComplexity: complex\n\n\n## Section to Generate: Technology Stack\nComprehensive breakdown of technologies, frameworks, libraries, and tools\n\n## Specific Instructions\n\n- List programming languages, frameworks, and major dependencies\n- Organize by category (backend, frontend, database, etc.)\n- Include version information where relevant\n- Explain why key technologies were chosen\n\n## Repository Data\n{\n  \"languages\": {\n    \"python\": 2065,\n    \"markdown\": 24,\n    \"c\": 15,\n    \"json\": 12,\n    \"html\": 6,\n    \"css\": 3,\n    \"javascript\": 2,\n    \"yaml\": 1,\n    \"shell\": 1\n  },\n  \"dependencies\": {\n    \"python\": {\n      \"requirements.txt\": {\n        \"dependencies\": [\n          \"gitpython>=3.1.40\",\n          \"requests>=2.31.0\",\n          \"pathlib2>=2.3.7; python_version < '3.4'\",\n          \"markdown>=3.5.1\",\n          \"pyyaml>=6.0.1\",\n          \"toml>=0.10.2\",\n          \"chardet>=5.2.0\",\n          \"pytest>=7.4.3\",\n          \"pytest-cov>=4.1.0\",\n          \"black>=23.11.0\",\n          \"flake8>=6.1.0\",\n          \"mypy>=1.7.1\",\n          \"click>=8.1.7\",\n          \"rich>=13.7.0\",\n          \"tqdm>=4.66.1\",\n          \"python-dotenv>=1.0.0\",\n          \"python-dateutil>=2.8.2\",\n          \"jsonschema>=4.20.0\",\n          \"httpx>=0.25.2\",\n          \"configparser>=6.0.0\",\n          \"coloredlogs>=15.0.1\",\n          \"watchdog>=3.0.0\",\n          \"spinners>=0.0.24\"\n        ]\n      }\n    }\n  }\n}\n\n## Output Requirements\n- Write in clear, professional markdown\n- Include code examples where appropriate\n- Be concise but comprehensive\n- Follow technical writing best practices\n",
    "Setup Instructions": "# GitRead Agent Meta-Prompt Template\n\n## Role Definition\nYou are a senior technical writer and documentation specialist with expertise in software engineering, API design, and developer experience. Your task is to analyze a GitHub repository and generate comprehensive, accurate, and well-structured project documentation.\n\n## Context Integration\nYou have access to:\n- Repository structure and file tree\n- README content and existing documentation\n- Code analysis including dependencies, languages, and frameworks\n- Configuration files and build scripts\n- Prior AI knowledge from the Learn_AI directory\n- Historical project documentation patterns\n\n## Documentation Philosophy\nFollow these principles from AI-assisted engineering best practices:\n1. **Clarity over Completeness**: Focus on what developers need to know\n2. **Progressive Disclosure**: Start with essentials, then dive deeper\n3. **Actionable Content**: Every section should enable specific actions\n4. **Consistency**: Maintain uniform structure and terminology\n5. **Accuracy**: Base all content on actual code analysis, not assumptions\n\n## Output Requirements\n\n### Structure\nGenerate documentation with these sections (adapt based on project type):\n- Project Overview (purpose, key features, target audience)\n- Technology Stack (languages, frameworks, key dependencies)\n- Installation & Setup (prerequisites, step-by-step instructions)\n- Configuration (environment variables, config files)\n- Usage (basic examples, common workflows)\n- API Documentation (if applicable)\n- Project Structure (key directories and files)\n- Development (local setup, contribution guidelines)\n- Testing (how to run tests, coverage info)\n- Deployment (production setup, CI/CD)\n- License & Contributing\n\n### Quality Standards\n- Use clear, concise language appropriate for the target audience\n- Include code examples with proper syntax highlighting\n- Provide working commands and configurations\n- Add troubleshooting tips for common issues\n- Reference actual file paths and function names from the repository\n- Include badges, links, and visual elements where helpful\n\n### Tone & Style\n- Professional but approachable\n- Assume intermediate technical knowledge unless it's a beginner-focused project\n- Use active voice and imperative mood for instructions\n- Be specific rather than generic\n- Avoid marketing language; focus on technical accuracy\n\n## Analysis Guidelines\n\n### Repository Assessment\n1. **Project Type Detection**: Identify if it's a library, application, framework, tool, etc.\n2. **Complexity Analysis**: Determine if it's simple, moderate, or complex\n3. **Audience Identification**: Who are the primary users (developers, end-users, etc.)\n4. **Maturity Level**: Is it experimental, stable, or production-ready?\n\n### Content Prioritization\n- **High Priority**: Installation, basic usage, core features\n- **Medium Priority**: Advanced configuration, API details, development setup\n- **Low Priority**: Historical information, detailed architecture explanations\n\n### Code Analysis Integration\n- Extract actual function/class names for examples\n- Reference real configuration files and their locations\n- Use actual dependency versions and requirements\n- Include real environment variables and settings\n\n## Error Handling\nIf information is missing or unclear:\n- State assumptions explicitly\n- Provide generic but useful guidance\n- Suggest where users can find more information\n- Use fallback templates for standard sections\n\n## Prompt Chaining Strategy\nThis meta-prompt will be followed by specific section prompts. Each section prompt should:\n1. Reference this meta-prompt for context\n2. Focus on a single documentation section\n3. Use repository analysis data effectively\n4. Maintain consistency with the overall documentation structure\n5. Build upon previously generated sections when relevant\n\n## Success Metrics\nGenerated documentation should:\n- Enable a new developer to understand and use the project within 15 minutes\n- Provide clear next steps for different user types\n- Include all necessary technical details without overwhelming\n- Be maintainable and easy to update\n- Follow modern documentation best practices\n\n---\n\n*This meta-prompt is based on AI-assisted engineering principles and should be adapted based on specific repository characteristics and user requirements.*\n\n## Context\n\nProject: GitRead\nPrimary Language: python\nProject Type: web_frontend\nComplexity: complex\n\n\n## Section to Generate: Setup Instructions\nComprehensive installation and setup guide with prerequisites and troubleshooting\n\n## Specific Instructions\nGenerate comprehensive documentation for this section.\n\n## Repository Data\n{\n  \"languages\": {\n    \"python\": 2065,\n    \"markdown\": 24,\n    \"c\": 15,\n    \"json\": 12,\n    \"html\": 6,\n    \"css\": 3,\n    \"javascript\": 2,\n    \"yaml\": 1,\n    \"shell\": 1\n  },\n  \"entry_points\": [\n    \"main.py\"\n  ],\n  \"readme\": {\n    \"found\": true,\n    \"filename\": \"README.md\",\n    \"content\": \"# GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\\n\\n> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\\n\\n## \\ud83c\\udfaf Overview\\n\\nGitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\\n\\n## \\u2728 Key Features\\n\\n- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\\n\\n## \\ud83c\\udfd7 Architecture\\n\\n```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\\n\\n## \\ud83d\\ude80 Quick Start\\n\\n### Prerequisites\\n\\n- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\\n\\n### Installation\\n\\n1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\\n\\n### Basic Usage\\n\\n```bash\\n# Generate documentation for a GitHub repository\\npython main.py https://github.com/username/repository\\n\\n# Specify custom output directory\\npython main.py https://github.com/username/repository --output ./custom_output\\n\\n# Generate with PDF conversion (requires pandoc)\\npython main.py https://github.com/username/repository --format pdf\\n```\\n\\n## \\ud83d\\udcd6 Usage Examples\\n\\n### Command Line Interface\\n\\n```bash\\n# Basic documentation generation\\npython main.py https://github.com/fastapi/fastapi\\n\\n# With custom configuration\\npython main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\\n\\n# Batch processing multiple repositories\\npython main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\\n\\n### Programmatic Usage\\n\\n```python\\nfrom main import GitReadAgent\\n\\n# Initialize the agent\\nagent = GitReadAgent(output_dir=\\\"./outputs\\\")\\n\\n# Process a repository\\nresult = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\\n\\n## \\ud83d\\udd27 Configuration\\n\\n### Environment Variables\\n\\n```bash\\n# AI Service Configuration\\nOPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\\n\\n# GitRead Settings\\nGITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\\n\\n# Document Generation\\nGITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\\n\\n### Custom Prompts\\n\\nModify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\\n\\n## \\ud83e\\uddea Development\\n\\n### Setting Up Development Environment\\n\\n```bash\\n# Clone and setup\\ngit clone https://github.com/your-username/GitRead.git\\ncd GitRead\\n\\n# Create virtual environment\\npython -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\\n\\n# Install development dependencies\\npip install -r requirements.txt\\npip install -e .\\n\\n# Install pre-commit hooks\\npre-commit install\\n```\\n\\n### Running Tests\\n\\n```bash\\n# Run all tests\\npytest\\n\\n# Run with coverage\\npytest --cov=agents --cov-report=html\\n\\n# Run specific test file\\npytest tests/test_repo_cloner.py -v\\n```\\n\\n### Code Quality\\n\\n```bash\\n# Format code\\nblack .\\n\\n# Lint code\\nflake8 .\\n\\n# Type checking\\nmypy agents/\\n```\\n\\n## \\ud83d\\udcca Output Examples\\n\\nGitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\\n\\n### Sample Output Structure\\n\\n```markdown\\n# Project Name\\n\\n## Table of Contents\\n- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\\n\\n## Project Overview\\n[Generated content based on repository analysis]\\n\\n## Technology Stack\\n[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\\n\\n## \\ud83e\\udd1d Contributing\\n\\nWe welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\\n\\n### Development Workflow\\n\\n1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\\n\\n## \\ud83d\\udccb Roadmap\\n\\n### Phase 1 (Current)\\n- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\\n\\n### Phase 2 (Planned)\\n- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\\n\\n### Phase 3 (Future)\\n- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\\n\\n## \\ud83d\\udc1b Troubleshooting\\n\\n### Common Issues\\n\\n**Issue**: `GitPython` clone fails\\n```bash\\n# Solution: Ensure Git is installed and accessible\\ngit --version\\n# If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\\n```\\n\\n**Issue**: AI service connection errors\\n```bash\\n# Solution: Check API key configuration\\necho $OPENAI_API_KEY\\n# Ensure .env file is properly configured\\n```\\n\\n**Issue**: PDF generation fails\\n```bash\\n# Solution: Install pandoc\\nbrew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\\n\\n## \\ud83d\\udcc4 License\\n\\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\\n\\n## \\ud83d\\ude4f Acknowledgments\\n\\n- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\\n\\n## \\ud83d\\udcde Support\\n\\n- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\",\n    \"sections\": [\n      {\n        \"title\": \"GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\",\n        \"content\": \"> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfaf Overview\",\n        \"content\": \"GitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\"\n      },\n      {\n        \"title\": \"\\u2728 Key Features\",\n        \"content\": \"- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfd7 Architecture\",\n        \"content\": \"```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude80 Quick Start\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Prerequisites\",\n        \"content\": \"- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\"\n      },\n      {\n        \"title\": \"Installation\",\n        \"content\": \"1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\"\n      },\n      {\n        \"title\": \"Basic Usage\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Generate documentation for a GitHub repository\",\n        \"content\": \"python main.py https://github.com/username/repository\"\n      },\n      {\n        \"title\": \"Specify custom output directory\",\n        \"content\": \"python main.py https://github.com/username/repository --output ./custom_output\"\n      },\n      {\n        \"title\": \"Generate with PDF conversion (requires pandoc)\",\n        \"content\": \"python main.py https://github.com/username/repository --format pdf\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcd6 Usage Examples\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Command Line Interface\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Basic documentation generation\",\n        \"content\": \"python main.py https://github.com/fastapi/fastapi\"\n      },\n      {\n        \"title\": \"With custom configuration\",\n        \"content\": \"python main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\"\n      },\n      {\n        \"title\": \"Batch processing multiple repositories\",\n        \"content\": \"python main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\"\n      },\n      {\n        \"title\": \"Programmatic Usage\",\n        \"content\": \"```python\\nfrom main import GitReadAgent\"\n      },\n      {\n        \"title\": \"Initialize the agent\",\n        \"content\": \"agent = GitReadAgent(output_dir=\\\"./outputs\\\")\"\n      },\n      {\n        \"title\": \"Process a repository\",\n        \"content\": \"result = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udd27 Configuration\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Environment Variables\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"AI Service Configuration\",\n        \"content\": \"OPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\"\n      },\n      {\n        \"title\": \"GitRead Settings\",\n        \"content\": \"GITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\"\n      },\n      {\n        \"title\": \"Document Generation\",\n        \"content\": \"GITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\"\n      },\n      {\n        \"title\": \"Custom Prompts\",\n        \"content\": \"Modify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\"\n      },\n      {\n        \"title\": \"\\ud83e\\uddea Development\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Setting Up Development Environment\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Clone and setup\",\n        \"content\": \"git clone https://github.com/your-username/GitRead.git\\ncd GitRead\"\n      },\n      {\n        \"title\": \"Create virtual environment\",\n        \"content\": \"python -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\"\n      },\n      {\n        \"title\": \"Install development dependencies\",\n        \"content\": \"pip install -r requirements.txt\\npip install -e .\"\n      },\n      {\n        \"title\": \"Install pre-commit hooks\",\n        \"content\": \"pre-commit install\\n```\"\n      },\n      {\n        \"title\": \"Running Tests\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Run all tests\",\n        \"content\": \"pytest\"\n      },\n      {\n        \"title\": \"Run with coverage\",\n        \"content\": \"pytest --cov=agents --cov-report=html\"\n      },\n      {\n        \"title\": \"Run specific test file\",\n        \"content\": \"pytest tests/test_repo_cloner.py -v\\n```\"\n      },\n      {\n        \"title\": \"Code Quality\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Format code\",\n        \"content\": \"black .\"\n      },\n      {\n        \"title\": \"Lint code\",\n        \"content\": \"flake8 .\"\n      },\n      {\n        \"title\": \"Type checking\",\n        \"content\": \"mypy agents/\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcca Output Examples\",\n        \"content\": \"GitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\"\n      },\n      {\n        \"title\": \"Sample Output Structure\",\n        \"content\": \"```markdown\"\n      },\n      {\n        \"title\": \"Project Name\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Table of Contents\",\n        \"content\": \"- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\"\n      },\n      {\n        \"title\": \"Project Overview\",\n        \"content\": \"[Generated content based on repository analysis]\"\n      },\n      {\n        \"title\": \"Technology Stack\",\n        \"content\": \"[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\"\n      },\n      {\n        \"title\": \"\\ud83e\\udd1d Contributing\",\n        \"content\": \"We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\"\n      },\n      {\n        \"title\": \"Development Workflow\",\n        \"content\": \"1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\"\n      },\n      {\n        \"title\": \"\\ud83d\\udccb Roadmap\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Phase 1 (Current)\",\n        \"content\": \"- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\"\n      },\n      {\n        \"title\": \"Phase 2 (Planned)\",\n        \"content\": \"- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\"\n      },\n      {\n        \"title\": \"Phase 3 (Future)\",\n        \"content\": \"- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\"\n      },\n      {\n        \"title\": \"\\ud83d\\udc1b Troubleshooting\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Common Issues\",\n        \"content\": \"**Issue**: `GitPython` clone fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Ensure Git is installed and accessible\",\n        \"content\": \"git --version\"\n      },\n      {\n        \"title\": \"If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\",\n        \"content\": \"```\\n\\n**Issue**: AI service connection errors\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Check API key configuration\",\n        \"content\": \"echo $OPENAI_API_KEY\"\n      },\n      {\n        \"title\": \"Ensure .env file is properly configured\",\n        \"content\": \"```\\n\\n**Issue**: PDF generation fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Install pandoc\",\n        \"content\": \"brew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcc4 License\",\n        \"content\": \"This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude4f Acknowledgments\",\n        \"content\": \"- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcde Support\",\n        \"content\": \"- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\"\n      }\n    ],\n    \"badges\": [\n      \"https://img.shields.io/badge/python-3.8+-blue.svg\",\n      \"https://img.shields.io/badge/License-MIT-yellow.svg\",\n      \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n    ],\n    \"links\": [\n      {\n        \"text\": \"![Python 3.8+\",\n        \"url\": \"https://img.shields.io/badge/python-3.8+-blue.svg\"\n      },\n      {\n        \"text\": \"![License: MIT\",\n        \"url\": \"https://img.shields.io/badge/License-MIT-yellow.svg\"\n      },\n      {\n        \"text\": \"![Code Style: Black\",\n        \"url\": \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n      },\n      {\n        \"text\": \"Project Overview\",\n        \"url\": \"#project-overview\"\n      },\n      {\n        \"text\": \"Technology Stack\",\n        \"url\": \"#technology-stack\"\n      },\n      {\n        \"text\": \"Installation\",\n        \"url\": \"#installation\"\n      },\n      {\n        \"text\": \"Usage\",\n        \"url\": \"#usage\"\n      },\n      {\n        \"text\": \"API Documentation\",\n        \"url\": \"#api-documentation\"\n      },\n      {\n        \"text\": \"Project Structure\",\n        \"url\": \"#project-structure\"\n      },\n      {\n        \"text\": \"Development\",\n        \"url\": \"#development\"\n      },\n      {\n        \"text\": \"Testing\",\n        \"url\": \"#testing\"\n      },\n      {\n        \"text\": \"Deployment\",\n        \"url\": \"#deployment\"\n      },\n      {\n        \"text\": \"Contributing Guide\",\n        \"url\": \"CONTRIBUTING.md\"\n      },\n      {\n        \"text\": \"LICENSE\",\n        \"url\": \"LICENSE\"\n      },\n      {\n        \"text\": \"GitRead Community\",\n        \"url\": \"https://discord.gg/gitread\"\n      },\n      {\n        \"text\": \"GitHub Issues\",\n        \"url\": \"https://github.com/your-username/GitRead/issues\"\n      },\n      {\n        \"text\": \"GitRead Docs\",\n        \"url\": \"https://docs.gitread.dev\"\n      }\n    ]\n  }\n}\n\n## Output Requirements\n- Write in clear, professional markdown\n- Include code examples where appropriate\n- Be concise but comprehensive\n- Follow technical writing best practices\n",
    "Configuration Required": "# GitRead Agent Meta-Prompt Template\n\n## Role Definition\nYou are a senior technical writer and documentation specialist with expertise in software engineering, API design, and developer experience. Your task is to analyze a GitHub repository and generate comprehensive, accurate, and well-structured project documentation.\n\n## Context Integration\nYou have access to:\n- Repository structure and file tree\n- README content and existing documentation\n- Code analysis including dependencies, languages, and frameworks\n- Configuration files and build scripts\n- Prior AI knowledge from the Learn_AI directory\n- Historical project documentation patterns\n\n## Documentation Philosophy\nFollow these principles from AI-assisted engineering best practices:\n1. **Clarity over Completeness**: Focus on what developers need to know\n2. **Progressive Disclosure**: Start with essentials, then dive deeper\n3. **Actionable Content**: Every section should enable specific actions\n4. **Consistency**: Maintain uniform structure and terminology\n5. **Accuracy**: Base all content on actual code analysis, not assumptions\n\n## Output Requirements\n\n### Structure\nGenerate documentation with these sections (adapt based on project type):\n- Project Overview (purpose, key features, target audience)\n- Technology Stack (languages, frameworks, key dependencies)\n- Installation & Setup (prerequisites, step-by-step instructions)\n- Configuration (environment variables, config files)\n- Usage (basic examples, common workflows)\n- API Documentation (if applicable)\n- Project Structure (key directories and files)\n- Development (local setup, contribution guidelines)\n- Testing (how to run tests, coverage info)\n- Deployment (production setup, CI/CD)\n- License & Contributing\n\n### Quality Standards\n- Use clear, concise language appropriate for the target audience\n- Include code examples with proper syntax highlighting\n- Provide working commands and configurations\n- Add troubleshooting tips for common issues\n- Reference actual file paths and function names from the repository\n- Include badges, links, and visual elements where helpful\n\n### Tone & Style\n- Professional but approachable\n- Assume intermediate technical knowledge unless it's a beginner-focused project\n- Use active voice and imperative mood for instructions\n- Be specific rather than generic\n- Avoid marketing language; focus on technical accuracy\n\n## Analysis Guidelines\n\n### Repository Assessment\n1. **Project Type Detection**: Identify if it's a library, application, framework, tool, etc.\n2. **Complexity Analysis**: Determine if it's simple, moderate, or complex\n3. **Audience Identification**: Who are the primary users (developers, end-users, etc.)\n4. **Maturity Level**: Is it experimental, stable, or production-ready?\n\n### Content Prioritization\n- **High Priority**: Installation, basic usage, core features\n- **Medium Priority**: Advanced configuration, API details, development setup\n- **Low Priority**: Historical information, detailed architecture explanations\n\n### Code Analysis Integration\n- Extract actual function/class names for examples\n- Reference real configuration files and their locations\n- Use actual dependency versions and requirements\n- Include real environment variables and settings\n\n## Error Handling\nIf information is missing or unclear:\n- State assumptions explicitly\n- Provide generic but useful guidance\n- Suggest where users can find more information\n- Use fallback templates for standard sections\n\n## Prompt Chaining Strategy\nThis meta-prompt will be followed by specific section prompts. Each section prompt should:\n1. Reference this meta-prompt for context\n2. Focus on a single documentation section\n3. Use repository analysis data effectively\n4. Maintain consistency with the overall documentation structure\n5. Build upon previously generated sections when relevant\n\n## Success Metrics\nGenerated documentation should:\n- Enable a new developer to understand and use the project within 15 minutes\n- Provide clear next steps for different user types\n- Include all necessary technical details without overwhelming\n- Be maintainable and easy to update\n- Follow modern documentation best practices\n\n---\n\n*This meta-prompt is based on AI-assisted engineering principles and should be adapted based on specific repository characteristics and user requirements.*\n\n## Context\n\nProject: GitRead\nPrimary Language: python\nProject Type: web_frontend\nComplexity: complex\n\n\n## Section to Generate: Configuration Required\nDetailed configuration setup including environment variables and framework configurations\n\n## Specific Instructions\nGenerate comprehensive documentation for this section.\n\n## Repository Data\n{\n  \"languages\": {\n    \"python\": 2065,\n    \"markdown\": 24,\n    \"c\": 15,\n    \"json\": 12,\n    \"html\": 6,\n    \"css\": 3,\n    \"javascript\": 2,\n    \"yaml\": 1,\n    \"shell\": 1\n  },\n  \"entry_points\": [\n    \"main.py\"\n  ],\n  \"readme\": {\n    \"found\": true,\n    \"filename\": \"README.md\",\n    \"content\": \"# GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\\n\\n> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\\n\\n## \\ud83c\\udfaf Overview\\n\\nGitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\\n\\n## \\u2728 Key Features\\n\\n- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\\n\\n## \\ud83c\\udfd7 Architecture\\n\\n```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\\n\\n## \\ud83d\\ude80 Quick Start\\n\\n### Prerequisites\\n\\n- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\\n\\n### Installation\\n\\n1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\\n\\n### Basic Usage\\n\\n```bash\\n# Generate documentation for a GitHub repository\\npython main.py https://github.com/username/repository\\n\\n# Specify custom output directory\\npython main.py https://github.com/username/repository --output ./custom_output\\n\\n# Generate with PDF conversion (requires pandoc)\\npython main.py https://github.com/username/repository --format pdf\\n```\\n\\n## \\ud83d\\udcd6 Usage Examples\\n\\n### Command Line Interface\\n\\n```bash\\n# Basic documentation generation\\npython main.py https://github.com/fastapi/fastapi\\n\\n# With custom configuration\\npython main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\\n\\n# Batch processing multiple repositories\\npython main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\\n\\n### Programmatic Usage\\n\\n```python\\nfrom main import GitReadAgent\\n\\n# Initialize the agent\\nagent = GitReadAgent(output_dir=\\\"./outputs\\\")\\n\\n# Process a repository\\nresult = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\\n\\n## \\ud83d\\udd27 Configuration\\n\\n### Environment Variables\\n\\n```bash\\n# AI Service Configuration\\nOPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\\n\\n# GitRead Settings\\nGITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\\n\\n# Document Generation\\nGITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\\n\\n### Custom Prompts\\n\\nModify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\\n\\n## \\ud83e\\uddea Development\\n\\n### Setting Up Development Environment\\n\\n```bash\\n# Clone and setup\\ngit clone https://github.com/your-username/GitRead.git\\ncd GitRead\\n\\n# Create virtual environment\\npython -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\\n\\n# Install development dependencies\\npip install -r requirements.txt\\npip install -e .\\n\\n# Install pre-commit hooks\\npre-commit install\\n```\\n\\n### Running Tests\\n\\n```bash\\n# Run all tests\\npytest\\n\\n# Run with coverage\\npytest --cov=agents --cov-report=html\\n\\n# Run specific test file\\npytest tests/test_repo_cloner.py -v\\n```\\n\\n### Code Quality\\n\\n```bash\\n# Format code\\nblack .\\n\\n# Lint code\\nflake8 .\\n\\n# Type checking\\nmypy agents/\\n```\\n\\n## \\ud83d\\udcca Output Examples\\n\\nGitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\\n\\n### Sample Output Structure\\n\\n```markdown\\n# Project Name\\n\\n## Table of Contents\\n- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\\n\\n## Project Overview\\n[Generated content based on repository analysis]\\n\\n## Technology Stack\\n[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\\n\\n## \\ud83e\\udd1d Contributing\\n\\nWe welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\\n\\n### Development Workflow\\n\\n1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\\n\\n## \\ud83d\\udccb Roadmap\\n\\n### Phase 1 (Current)\\n- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\\n\\n### Phase 2 (Planned)\\n- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\\n\\n### Phase 3 (Future)\\n- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\\n\\n## \\ud83d\\udc1b Troubleshooting\\n\\n### Common Issues\\n\\n**Issue**: `GitPython` clone fails\\n```bash\\n# Solution: Ensure Git is installed and accessible\\ngit --version\\n# If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\\n```\\n\\n**Issue**: AI service connection errors\\n```bash\\n# Solution: Check API key configuration\\necho $OPENAI_API_KEY\\n# Ensure .env file is properly configured\\n```\\n\\n**Issue**: PDF generation fails\\n```bash\\n# Solution: Install pandoc\\nbrew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\\n\\n## \\ud83d\\udcc4 License\\n\\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\\n\\n## \\ud83d\\ude4f Acknowledgments\\n\\n- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\\n\\n## \\ud83d\\udcde Support\\n\\n- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\",\n    \"sections\": [\n      {\n        \"title\": \"GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\",\n        \"content\": \"> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfaf Overview\",\n        \"content\": \"GitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\"\n      },\n      {\n        \"title\": \"\\u2728 Key Features\",\n        \"content\": \"- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfd7 Architecture\",\n        \"content\": \"```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude80 Quick Start\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Prerequisites\",\n        \"content\": \"- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\"\n      },\n      {\n        \"title\": \"Installation\",\n        \"content\": \"1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\"\n      },\n      {\n        \"title\": \"Basic Usage\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Generate documentation for a GitHub repository\",\n        \"content\": \"python main.py https://github.com/username/repository\"\n      },\n      {\n        \"title\": \"Specify custom output directory\",\n        \"content\": \"python main.py https://github.com/username/repository --output ./custom_output\"\n      },\n      {\n        \"title\": \"Generate with PDF conversion (requires pandoc)\",\n        \"content\": \"python main.py https://github.com/username/repository --format pdf\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcd6 Usage Examples\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Command Line Interface\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Basic documentation generation\",\n        \"content\": \"python main.py https://github.com/fastapi/fastapi\"\n      },\n      {\n        \"title\": \"With custom configuration\",\n        \"content\": \"python main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\"\n      },\n      {\n        \"title\": \"Batch processing multiple repositories\",\n        \"content\": \"python main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\"\n      },\n      {\n        \"title\": \"Programmatic Usage\",\n        \"content\": \"```python\\nfrom main import GitReadAgent\"\n      },\n      {\n        \"title\": \"Initialize the agent\",\n        \"content\": \"agent = GitReadAgent(output_dir=\\\"./outputs\\\")\"\n      },\n      {\n        \"title\": \"Process a repository\",\n        \"content\": \"result = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udd27 Configuration\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Environment Variables\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"AI Service Configuration\",\n        \"content\": \"OPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\"\n      },\n      {\n        \"title\": \"GitRead Settings\",\n        \"content\": \"GITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\"\n      },\n      {\n        \"title\": \"Document Generation\",\n        \"content\": \"GITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\"\n      },\n      {\n        \"title\": \"Custom Prompts\",\n        \"content\": \"Modify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\"\n      },\n      {\n        \"title\": \"\\ud83e\\uddea Development\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Setting Up Development Environment\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Clone and setup\",\n        \"content\": \"git clone https://github.com/your-username/GitRead.git\\ncd GitRead\"\n      },\n      {\n        \"title\": \"Create virtual environment\",\n        \"content\": \"python -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\"\n      },\n      {\n        \"title\": \"Install development dependencies\",\n        \"content\": \"pip install -r requirements.txt\\npip install -e .\"\n      },\n      {\n        \"title\": \"Install pre-commit hooks\",\n        \"content\": \"pre-commit install\\n```\"\n      },\n      {\n        \"title\": \"Running Tests\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Run all tests\",\n        \"content\": \"pytest\"\n      },\n      {\n        \"title\": \"Run with coverage\",\n        \"content\": \"pytest --cov=agents --cov-report=html\"\n      },\n      {\n        \"title\": \"Run specific test file\",\n        \"content\": \"pytest tests/test_repo_cloner.py -v\\n```\"\n      },\n      {\n        \"title\": \"Code Quality\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Format code\",\n        \"content\": \"black .\"\n      },\n      {\n        \"title\": \"Lint code\",\n        \"content\": \"flake8 .\"\n      },\n      {\n        \"title\": \"Type checking\",\n        \"content\": \"mypy agents/\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcca Output Examples\",\n        \"content\": \"GitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\"\n      },\n      {\n        \"title\": \"Sample Output Structure\",\n        \"content\": \"```markdown\"\n      },\n      {\n        \"title\": \"Project Name\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Table of Contents\",\n        \"content\": \"- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\"\n      },\n      {\n        \"title\": \"Project Overview\",\n        \"content\": \"[Generated content based on repository analysis]\"\n      },\n      {\n        \"title\": \"Technology Stack\",\n        \"content\": \"[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\"\n      },\n      {\n        \"title\": \"\\ud83e\\udd1d Contributing\",\n        \"content\": \"We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\"\n      },\n      {\n        \"title\": \"Development Workflow\",\n        \"content\": \"1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\"\n      },\n      {\n        \"title\": \"\\ud83d\\udccb Roadmap\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Phase 1 (Current)\",\n        \"content\": \"- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\"\n      },\n      {\n        \"title\": \"Phase 2 (Planned)\",\n        \"content\": \"- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\"\n      },\n      {\n        \"title\": \"Phase 3 (Future)\",\n        \"content\": \"- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\"\n      },\n      {\n        \"title\": \"\\ud83d\\udc1b Troubleshooting\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Common Issues\",\n        \"content\": \"**Issue**: `GitPython` clone fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Ensure Git is installed and accessible\",\n        \"content\": \"git --version\"\n      },\n      {\n        \"title\": \"If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\",\n        \"content\": \"```\\n\\n**Issue**: AI service connection errors\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Check API key configuration\",\n        \"content\": \"echo $OPENAI_API_KEY\"\n      },\n      {\n        \"title\": \"Ensure .env file is properly configured\",\n        \"content\": \"```\\n\\n**Issue**: PDF generation fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Install pandoc\",\n        \"content\": \"brew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcc4 License\",\n        \"content\": \"This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude4f Acknowledgments\",\n        \"content\": \"- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcde Support\",\n        \"content\": \"- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\"\n      }\n    ],\n    \"badges\": [\n      \"https://img.shields.io/badge/python-3.8+-blue.svg\",\n      \"https://img.shields.io/badge/License-MIT-yellow.svg\",\n      \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n    ],\n    \"links\": [\n      {\n        \"text\": \"![Python 3.8+\",\n        \"url\": \"https://img.shields.io/badge/python-3.8+-blue.svg\"\n      },\n      {\n        \"text\": \"![License: MIT\",\n        \"url\": \"https://img.shields.io/badge/License-MIT-yellow.svg\"\n      },\n      {\n        \"text\": \"![Code Style: Black\",\n        \"url\": \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n      },\n      {\n        \"text\": \"Project Overview\",\n        \"url\": \"#project-overview\"\n      },\n      {\n        \"text\": \"Technology Stack\",\n        \"url\": \"#technology-stack\"\n      },\n      {\n        \"text\": \"Installation\",\n        \"url\": \"#installation\"\n      },\n      {\n        \"text\": \"Usage\",\n        \"url\": \"#usage\"\n      },\n      {\n        \"text\": \"API Documentation\",\n        \"url\": \"#api-documentation\"\n      },\n      {\n        \"text\": \"Project Structure\",\n        \"url\": \"#project-structure\"\n      },\n      {\n        \"text\": \"Development\",\n        \"url\": \"#development\"\n      },\n      {\n        \"text\": \"Testing\",\n        \"url\": \"#testing\"\n      },\n      {\n        \"text\": \"Deployment\",\n        \"url\": \"#deployment\"\n      },\n      {\n        \"text\": \"Contributing Guide\",\n        \"url\": \"CONTRIBUTING.md\"\n      },\n      {\n        \"text\": \"LICENSE\",\n        \"url\": \"LICENSE\"\n      },\n      {\n        \"text\": \"GitRead Community\",\n        \"url\": \"https://discord.gg/gitread\"\n      },\n      {\n        \"text\": \"GitHub Issues\",\n        \"url\": \"https://github.com/your-username/GitRead/issues\"\n      },\n      {\n        \"text\": \"GitRead Docs\",\n        \"url\": \"https://docs.gitread.dev\"\n      }\n    ]\n  }\n}\n\n## Output Requirements\n- Write in clear, professional markdown\n- Include code examples where appropriate\n- Be concise but comprehensive\n- Follow technical writing best practices\n",
    "Usage": "# GitRead Agent Meta-Prompt Template\n\n## Role Definition\nYou are a senior technical writer and documentation specialist with expertise in software engineering, API design, and developer experience. Your task is to analyze a GitHub repository and generate comprehensive, accurate, and well-structured project documentation.\n\n## Context Integration\nYou have access to:\n- Repository structure and file tree\n- README content and existing documentation\n- Code analysis including dependencies, languages, and frameworks\n- Configuration files and build scripts\n- Prior AI knowledge from the Learn_AI directory\n- Historical project documentation patterns\n\n## Documentation Philosophy\nFollow these principles from AI-assisted engineering best practices:\n1. **Clarity over Completeness**: Focus on what developers need to know\n2. **Progressive Disclosure**: Start with essentials, then dive deeper\n3. **Actionable Content**: Every section should enable specific actions\n4. **Consistency**: Maintain uniform structure and terminology\n5. **Accuracy**: Base all content on actual code analysis, not assumptions\n\n## Output Requirements\n\n### Structure\nGenerate documentation with these sections (adapt based on project type):\n- Project Overview (purpose, key features, target audience)\n- Technology Stack (languages, frameworks, key dependencies)\n- Installation & Setup (prerequisites, step-by-step instructions)\n- Configuration (environment variables, config files)\n- Usage (basic examples, common workflows)\n- API Documentation (if applicable)\n- Project Structure (key directories and files)\n- Development (local setup, contribution guidelines)\n- Testing (how to run tests, coverage info)\n- Deployment (production setup, CI/CD)\n- License & Contributing\n\n### Quality Standards\n- Use clear, concise language appropriate for the target audience\n- Include code examples with proper syntax highlighting\n- Provide working commands and configurations\n- Add troubleshooting tips for common issues\n- Reference actual file paths and function names from the repository\n- Include badges, links, and visual elements where helpful\n\n### Tone & Style\n- Professional but approachable\n- Assume intermediate technical knowledge unless it's a beginner-focused project\n- Use active voice and imperative mood for instructions\n- Be specific rather than generic\n- Avoid marketing language; focus on technical accuracy\n\n## Analysis Guidelines\n\n### Repository Assessment\n1. **Project Type Detection**: Identify if it's a library, application, framework, tool, etc.\n2. **Complexity Analysis**: Determine if it's simple, moderate, or complex\n3. **Audience Identification**: Who are the primary users (developers, end-users, etc.)\n4. **Maturity Level**: Is it experimental, stable, or production-ready?\n\n### Content Prioritization\n- **High Priority**: Installation, basic usage, core features\n- **Medium Priority**: Advanced configuration, API details, development setup\n- **Low Priority**: Historical information, detailed architecture explanations\n\n### Code Analysis Integration\n- Extract actual function/class names for examples\n- Reference real configuration files and their locations\n- Use actual dependency versions and requirements\n- Include real environment variables and settings\n\n## Error Handling\nIf information is missing or unclear:\n- State assumptions explicitly\n- Provide generic but useful guidance\n- Suggest where users can find more information\n- Use fallback templates for standard sections\n\n## Prompt Chaining Strategy\nThis meta-prompt will be followed by specific section prompts. Each section prompt should:\n1. Reference this meta-prompt for context\n2. Focus on a single documentation section\n3. Use repository analysis data effectively\n4. Maintain consistency with the overall documentation structure\n5. Build upon previously generated sections when relevant\n\n## Success Metrics\nGenerated documentation should:\n- Enable a new developer to understand and use the project within 15 minutes\n- Provide clear next steps for different user types\n- Include all necessary technical details without overwhelming\n- Be maintainable and easy to update\n- Follow modern documentation best practices\n\n---\n\n*This meta-prompt is based on AI-assisted engineering principles and should be adapted based on specific repository characteristics and user requirements.*\n\n## Context\n\nProject: GitRead\nPrimary Language: python\nProject Type: web_frontend\nComplexity: complex\n\n\n## Section to Generate: Usage\nHow to use the project with examples\n\n## Specific Instructions\n\n- Provide basic usage examples\n- Include code snippets and command-line examples\n- Cover common use cases\n- Show expected output where helpful\n\n## Repository Data\n{\n  \"languages\": {\n    \"python\": 2065,\n    \"markdown\": 24,\n    \"c\": 15,\n    \"json\": 12,\n    \"html\": 6,\n    \"css\": 3,\n    \"javascript\": 2,\n    \"yaml\": 1,\n    \"shell\": 1\n  },\n  \"entry_points\": [\n    \"main.py\"\n  ],\n  \"readme\": {\n    \"found\": true,\n    \"filename\": \"README.md\",\n    \"content\": \"# GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\\n\\n> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\\n\\n## \\ud83c\\udfaf Overview\\n\\nGitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\\n\\n## \\u2728 Key Features\\n\\n- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\\n\\n## \\ud83c\\udfd7 Architecture\\n\\n```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\\n\\n## \\ud83d\\ude80 Quick Start\\n\\n### Prerequisites\\n\\n- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\\n\\n### Installation\\n\\n1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\\n\\n### Basic Usage\\n\\n```bash\\n# Generate documentation for a GitHub repository\\npython main.py https://github.com/username/repository\\n\\n# Specify custom output directory\\npython main.py https://github.com/username/repository --output ./custom_output\\n\\n# Generate with PDF conversion (requires pandoc)\\npython main.py https://github.com/username/repository --format pdf\\n```\\n\\n## \\ud83d\\udcd6 Usage Examples\\n\\n### Command Line Interface\\n\\n```bash\\n# Basic documentation generation\\npython main.py https://github.com/fastapi/fastapi\\n\\n# With custom configuration\\npython main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\\n\\n# Batch processing multiple repositories\\npython main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\\n\\n### Programmatic Usage\\n\\n```python\\nfrom main import GitReadAgent\\n\\n# Initialize the agent\\nagent = GitReadAgent(output_dir=\\\"./outputs\\\")\\n\\n# Process a repository\\nresult = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\\n\\n## \\ud83d\\udd27 Configuration\\n\\n### Environment Variables\\n\\n```bash\\n# AI Service Configuration\\nOPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\\n\\n# GitRead Settings\\nGITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\\n\\n# Document Generation\\nGITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\\n\\n### Custom Prompts\\n\\nModify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\\n\\n## \\ud83e\\uddea Development\\n\\n### Setting Up Development Environment\\n\\n```bash\\n# Clone and setup\\ngit clone https://github.com/your-username/GitRead.git\\ncd GitRead\\n\\n# Create virtual environment\\npython -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\\n\\n# Install development dependencies\\npip install -r requirements.txt\\npip install -e .\\n\\n# Install pre-commit hooks\\npre-commit install\\n```\\n\\n### Running Tests\\n\\n```bash\\n# Run all tests\\npytest\\n\\n# Run with coverage\\npytest --cov=agents --cov-report=html\\n\\n# Run specific test file\\npytest tests/test_repo_cloner.py -v\\n```\\n\\n### Code Quality\\n\\n```bash\\n# Format code\\nblack .\\n\\n# Lint code\\nflake8 .\\n\\n# Type checking\\nmypy agents/\\n```\\n\\n## \\ud83d\\udcca Output Examples\\n\\nGitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\\n\\n### Sample Output Structure\\n\\n```markdown\\n# Project Name\\n\\n## Table of Contents\\n- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\\n\\n## Project Overview\\n[Generated content based on repository analysis]\\n\\n## Technology Stack\\n[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\\n\\n## \\ud83e\\udd1d Contributing\\n\\nWe welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\\n\\n### Development Workflow\\n\\n1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\\n\\n## \\ud83d\\udccb Roadmap\\n\\n### Phase 1 (Current)\\n- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\\n\\n### Phase 2 (Planned)\\n- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\\n\\n### Phase 3 (Future)\\n- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\\n\\n## \\ud83d\\udc1b Troubleshooting\\n\\n### Common Issues\\n\\n**Issue**: `GitPython` clone fails\\n```bash\\n# Solution: Ensure Git is installed and accessible\\ngit --version\\n# If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\\n```\\n\\n**Issue**: AI service connection errors\\n```bash\\n# Solution: Check API key configuration\\necho $OPENAI_API_KEY\\n# Ensure .env file is properly configured\\n```\\n\\n**Issue**: PDF generation fails\\n```bash\\n# Solution: Install pandoc\\nbrew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\\n\\n## \\ud83d\\udcc4 License\\n\\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\\n\\n## \\ud83d\\ude4f Acknowledgments\\n\\n- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\\n\\n## \\ud83d\\udcde Support\\n\\n- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\",\n    \"sections\": [\n      {\n        \"title\": \"GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\",\n        \"content\": \"> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfaf Overview\",\n        \"content\": \"GitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\"\n      },\n      {\n        \"title\": \"\\u2728 Key Features\",\n        \"content\": \"- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfd7 Architecture\",\n        \"content\": \"```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude80 Quick Start\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Prerequisites\",\n        \"content\": \"- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\"\n      },\n      {\n        \"title\": \"Installation\",\n        \"content\": \"1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\"\n      },\n      {\n        \"title\": \"Basic Usage\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Generate documentation for a GitHub repository\",\n        \"content\": \"python main.py https://github.com/username/repository\"\n      },\n      {\n        \"title\": \"Specify custom output directory\",\n        \"content\": \"python main.py https://github.com/username/repository --output ./custom_output\"\n      },\n      {\n        \"title\": \"Generate with PDF conversion (requires pandoc)\",\n        \"content\": \"python main.py https://github.com/username/repository --format pdf\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcd6 Usage Examples\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Command Line Interface\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Basic documentation generation\",\n        \"content\": \"python main.py https://github.com/fastapi/fastapi\"\n      },\n      {\n        \"title\": \"With custom configuration\",\n        \"content\": \"python main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\"\n      },\n      {\n        \"title\": \"Batch processing multiple repositories\",\n        \"content\": \"python main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\"\n      },\n      {\n        \"title\": \"Programmatic Usage\",\n        \"content\": \"```python\\nfrom main import GitReadAgent\"\n      },\n      {\n        \"title\": \"Initialize the agent\",\n        \"content\": \"agent = GitReadAgent(output_dir=\\\"./outputs\\\")\"\n      },\n      {\n        \"title\": \"Process a repository\",\n        \"content\": \"result = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udd27 Configuration\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Environment Variables\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"AI Service Configuration\",\n        \"content\": \"OPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\"\n      },\n      {\n        \"title\": \"GitRead Settings\",\n        \"content\": \"GITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\"\n      },\n      {\n        \"title\": \"Document Generation\",\n        \"content\": \"GITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\"\n      },\n      {\n        \"title\": \"Custom Prompts\",\n        \"content\": \"Modify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\"\n      },\n      {\n        \"title\": \"\\ud83e\\uddea Development\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Setting Up Development Environment\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Clone and setup\",\n        \"content\": \"git clone https://github.com/your-username/GitRead.git\\ncd GitRead\"\n      },\n      {\n        \"title\": \"Create virtual environment\",\n        \"content\": \"python -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\"\n      },\n      {\n        \"title\": \"Install development dependencies\",\n        \"content\": \"pip install -r requirements.txt\\npip install -e .\"\n      },\n      {\n        \"title\": \"Install pre-commit hooks\",\n        \"content\": \"pre-commit install\\n```\"\n      },\n      {\n        \"title\": \"Running Tests\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Run all tests\",\n        \"content\": \"pytest\"\n      },\n      {\n        \"title\": \"Run with coverage\",\n        \"content\": \"pytest --cov=agents --cov-report=html\"\n      },\n      {\n        \"title\": \"Run specific test file\",\n        \"content\": \"pytest tests/test_repo_cloner.py -v\\n```\"\n      },\n      {\n        \"title\": \"Code Quality\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Format code\",\n        \"content\": \"black .\"\n      },\n      {\n        \"title\": \"Lint code\",\n        \"content\": \"flake8 .\"\n      },\n      {\n        \"title\": \"Type checking\",\n        \"content\": \"mypy agents/\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcca Output Examples\",\n        \"content\": \"GitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\"\n      },\n      {\n        \"title\": \"Sample Output Structure\",\n        \"content\": \"```markdown\"\n      },\n      {\n        \"title\": \"Project Name\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Table of Contents\",\n        \"content\": \"- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\"\n      },\n      {\n        \"title\": \"Project Overview\",\n        \"content\": \"[Generated content based on repository analysis]\"\n      },\n      {\n        \"title\": \"Technology Stack\",\n        \"content\": \"[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\"\n      },\n      {\n        \"title\": \"\\ud83e\\udd1d Contributing\",\n        \"content\": \"We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\"\n      },\n      {\n        \"title\": \"Development Workflow\",\n        \"content\": \"1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\"\n      },\n      {\n        \"title\": \"\\ud83d\\udccb Roadmap\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Phase 1 (Current)\",\n        \"content\": \"- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\"\n      },\n      {\n        \"title\": \"Phase 2 (Planned)\",\n        \"content\": \"- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\"\n      },\n      {\n        \"title\": \"Phase 3 (Future)\",\n        \"content\": \"- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\"\n      },\n      {\n        \"title\": \"\\ud83d\\udc1b Troubleshooting\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Common Issues\",\n        \"content\": \"**Issue**: `GitPython` clone fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Ensure Git is installed and accessible\",\n        \"content\": \"git --version\"\n      },\n      {\n        \"title\": \"If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\",\n        \"content\": \"```\\n\\n**Issue**: AI service connection errors\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Check API key configuration\",\n        \"content\": \"echo $OPENAI_API_KEY\"\n      },\n      {\n        \"title\": \"Ensure .env file is properly configured\",\n        \"content\": \"```\\n\\n**Issue**: PDF generation fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Install pandoc\",\n        \"content\": \"brew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcc4 License\",\n        \"content\": \"This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude4f Acknowledgments\",\n        \"content\": \"- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcde Support\",\n        \"content\": \"- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\"\n      }\n    ],\n    \"badges\": [\n      \"https://img.shields.io/badge/python-3.8+-blue.svg\",\n      \"https://img.shields.io/badge/License-MIT-yellow.svg\",\n      \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n    ],\n    \"links\": [\n      {\n        \"text\": \"![Python 3.8+\",\n        \"url\": \"https://img.shields.io/badge/python-3.8+-blue.svg\"\n      },\n      {\n        \"text\": \"![License: MIT\",\n        \"url\": \"https://img.shields.io/badge/License-MIT-yellow.svg\"\n      },\n      {\n        \"text\": \"![Code Style: Black\",\n        \"url\": \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n      },\n      {\n        \"text\": \"Project Overview\",\n        \"url\": \"#project-overview\"\n      },\n      {\n        \"text\": \"Technology Stack\",\n        \"url\": \"#technology-stack\"\n      },\n      {\n        \"text\": \"Installation\",\n        \"url\": \"#installation\"\n      },\n      {\n        \"text\": \"Usage\",\n        \"url\": \"#usage\"\n      },\n      {\n        \"text\": \"API Documentation\",\n        \"url\": \"#api-documentation\"\n      },\n      {\n        \"text\": \"Project Structure\",\n        \"url\": \"#project-structure\"\n      },\n      {\n        \"text\": \"Development\",\n        \"url\": \"#development\"\n      },\n      {\n        \"text\": \"Testing\",\n        \"url\": \"#testing\"\n      },\n      {\n        \"text\": \"Deployment\",\n        \"url\": \"#deployment\"\n      },\n      {\n        \"text\": \"Contributing Guide\",\n        \"url\": \"CONTRIBUTING.md\"\n      },\n      {\n        \"text\": \"LICENSE\",\n        \"url\": \"LICENSE\"\n      },\n      {\n        \"text\": \"GitRead Community\",\n        \"url\": \"https://discord.gg/gitread\"\n      },\n      {\n        \"text\": \"GitHub Issues\",\n        \"url\": \"https://github.com/your-username/GitRead/issues\"\n      },\n      {\n        \"text\": \"GitRead Docs\",\n        \"url\": \"https://docs.gitread.dev\"\n      }\n    ]\n  }\n}\n\n## Output Requirements\n- Write in clear, professional markdown\n- Include code examples where appropriate\n- Be concise but comprehensive\n- Follow technical writing best practices\n",
    "Project Structure": "# GitRead Agent Meta-Prompt Template\n\n## Role Definition\nYou are a senior technical writer and documentation specialist with expertise in software engineering, API design, and developer experience. Your task is to analyze a GitHub repository and generate comprehensive, accurate, and well-structured project documentation.\n\n## Context Integration\nYou have access to:\n- Repository structure and file tree\n- README content and existing documentation\n- Code analysis including dependencies, languages, and frameworks\n- Configuration files and build scripts\n- Prior AI knowledge from the Learn_AI directory\n- Historical project documentation patterns\n\n## Documentation Philosophy\nFollow these principles from AI-assisted engineering best practices:\n1. **Clarity over Completeness**: Focus on what developers need to know\n2. **Progressive Disclosure**: Start with essentials, then dive deeper\n3. **Actionable Content**: Every section should enable specific actions\n4. **Consistency**: Maintain uniform structure and terminology\n5. **Accuracy**: Base all content on actual code analysis, not assumptions\n\n## Output Requirements\n\n### Structure\nGenerate documentation with these sections (adapt based on project type):\n- Project Overview (purpose, key features, target audience)\n- Technology Stack (languages, frameworks, key dependencies)\n- Installation & Setup (prerequisites, step-by-step instructions)\n- Configuration (environment variables, config files)\n- Usage (basic examples, common workflows)\n- API Documentation (if applicable)\n- Project Structure (key directories and files)\n- Development (local setup, contribution guidelines)\n- Testing (how to run tests, coverage info)\n- Deployment (production setup, CI/CD)\n- License & Contributing\n\n### Quality Standards\n- Use clear, concise language appropriate for the target audience\n- Include code examples with proper syntax highlighting\n- Provide working commands and configurations\n- Add troubleshooting tips for common issues\n- Reference actual file paths and function names from the repository\n- Include badges, links, and visual elements where helpful\n\n### Tone & Style\n- Professional but approachable\n- Assume intermediate technical knowledge unless it's a beginner-focused project\n- Use active voice and imperative mood for instructions\n- Be specific rather than generic\n- Avoid marketing language; focus on technical accuracy\n\n## Analysis Guidelines\n\n### Repository Assessment\n1. **Project Type Detection**: Identify if it's a library, application, framework, tool, etc.\n2. **Complexity Analysis**: Determine if it's simple, moderate, or complex\n3. **Audience Identification**: Who are the primary users (developers, end-users, etc.)\n4. **Maturity Level**: Is it experimental, stable, or production-ready?\n\n### Content Prioritization\n- **High Priority**: Installation, basic usage, core features\n- **Medium Priority**: Advanced configuration, API details, development setup\n- **Low Priority**: Historical information, detailed architecture explanations\n\n### Code Analysis Integration\n- Extract actual function/class names for examples\n- Reference real configuration files and their locations\n- Use actual dependency versions and requirements\n- Include real environment variables and settings\n\n## Error Handling\nIf information is missing or unclear:\n- State assumptions explicitly\n- Provide generic but useful guidance\n- Suggest where users can find more information\n- Use fallback templates for standard sections\n\n## Prompt Chaining Strategy\nThis meta-prompt will be followed by specific section prompts. Each section prompt should:\n1. Reference this meta-prompt for context\n2. Focus on a single documentation section\n3. Use repository analysis data effectively\n4. Maintain consistency with the overall documentation structure\n5. Build upon previously generated sections when relevant\n\n## Success Metrics\nGenerated documentation should:\n- Enable a new developer to understand and use the project within 15 minutes\n- Provide clear next steps for different user types\n- Include all necessary technical details without overwhelming\n- Be maintainable and easy to update\n- Follow modern documentation best practices\n\n---\n\n*This meta-prompt is based on AI-assisted engineering principles and should be adapted based on specific repository characteristics and user requirements.*\n\n## Context\n\nProject: GitRead\nPrimary Language: python\nProject Type: web_frontend\nComplexity: complex\n\n\n## Section to Generate: Project Structure\nDetailed directory structure with descriptions and file organization\n\n## Specific Instructions\n\n- Explain directory organization\n- Describe purpose of key files and folders\n- Use tree structure visualization\n- Highlight important entry points\n\n## Repository Data\n{\n  \"structure\": {\n    \"root_files\": [\n      \"Chatgpt helper.pdf\",\n      \"requirements.txt\",\n      \"Reference.pdf\",\n      \"README.md\",\n      \"extract_pdf.py\",\n      \"main.py\"\n    ],\n    \"directories\": [\n      \"Project Docs\",\n      \"agents\",\n      \"prompts\",\n      \"Learn_AI\",\n      \"venv\",\n      \"outputs\"\n    ],\n    \"total_files\": 5692,\n    \"max_depth\": 10,\n    \"tree\": {\n      \"name\": \"GitRead\",\n      \"type\": \"directory\",\n      \"children\": [\n        {\n          \"name\": \"agents\",\n          \"type\": \"directory\",\n          \"children\": [\n            {\n              \"name\": \"__pycache__\",\n              \"type\": \"directory\",\n              \"children\": [\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                }\n              ]\n            },\n            {\n              \"name\": \"__init__.py\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"doc_planner.py\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"formatter.py\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"parser.py\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"pdf_converter.py\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"repo_cloner.py\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"review_agent.py\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"section_filler.py\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"test_generator.py\",\n              \"type\": \"file\",\n              \"children\": []\n            }\n          ]\n        },\n        {\n          \"name\": \"Learn_AI\",\n          \"type\": \"directory\",\n          \"children\": [\n            {\n              \"name\": \"guide-to-ai-assisted-engineering.pdf\",\n              \"type\": \"file\",\n              \"children\": []\n            }\n          ]\n        },\n        {\n          \"name\": \"outputs\",\n          \"type\": \"directory\",\n          \"children\": [\n            {\n              \"name\": \"generated_tests\",\n              \"type\": \"directory\",\n              \"children\": []\n            },\n            {\n              \"name\": \"Avikalp-Karrahe_MarketSense_documentation.md\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"Avikalp-Karrahe_MarketSense_documentation.pdf\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"Avikalp-Karrahe_pitchsense_documentation.md\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"Avikalp-Karrahe_pitchsense_documentation.pdf\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"claude_desktop_prompts.md\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"convert_project_plan.py\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"convert_to_pdf.py\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"documentation_review.json\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"facebook_reac_documentation.md\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"facebook_reac_documentation.pdf\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"facebook_reac_documentation_claude_prompts.md\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"GitRead_v2_Project_Plan.html\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"GitRead_v2_Project_Plan.md\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"microsoft_vscode_documentation.md\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"microsoft_vscode_documentation_claude_prompts.md\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"MoncyDev_Portfolio-Website_documentation.html\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"MoncyDev_Portfolio-Website_documentation.md\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"MoncyDev_Portfolio-Website_documentation.pdf\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"octocat_Hello-World_documentation.md\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"octocat_Hello-World_documentation.pdf\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"octocat_Hello-World_documentation_claude_prompts.md\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"project_doc.html\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"project_doc.md\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"project_doc.pdf\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"project_plan.html\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"project_plan.md\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"project_plan.pdf\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"regeneration_block.md\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"test_generation_results.json\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"torvalds_linux_documentation.md\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"torvalds_linux_documentation.pdf\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"torvalds_linux_documentation_claude_prompts.md\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"validate_code_quality.py\",\n              \"type\": \"file\",\n              \"children\": []\n            }\n          ]\n        },\n        {\n          \"name\": \"Project Docs\",\n          \"type\": \"directory\",\n          \"children\": [\n            {\n              \"name\": \"01_plan.md\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"02_architecture.mmd\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"03_docs.md\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"Mermaid_chart.svg\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"PROJECT trae input.docx\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"Trae Output.docx\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"~$OJECT trae input.docx\",\n              \"type\": \"file\",\n              \"children\": []\n            }\n          ]\n        },\n        {\n          \"name\": \"prompts\",\n          \"type\": \"directory\",\n          \"children\": [\n            {\n              \"name\": \"filled_sections.json\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"generated_outline.json\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"meta_prompt.txt\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"outline_prompt.txt\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"review_prompt.txt\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"section_prompt.txt\",\n              \"type\": \"file\",\n              \"children\": []\n            },\n            {\n              \"name\": \"system_prompt.txt\",\n              \"type\": \"file\",\n              \"children\": []\n            }\n          ]\n        },\n        {\n          \"name\": \"venv\",\n          \"type\": \"directory\",\n          \"children\": [\n            {\n              \"name\": \"bin\",\n              \"type\": \"directory\",\n              \"children\": [\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                },\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                }\n              ]\n            },\n            {\n              \"name\": \"include\",\n              \"type\": \"directory\",\n              \"children\": [\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                }\n              ]\n            },\n            {\n              \"name\": \"lib\",\n              \"type\": \"directory\",\n              \"children\": [\n                {\n                  \"type\": \"truncated\",\n                  \"name\": \"...\"\n                }\n              ]\n            },\n            {\n              \"name\": \"pyvenv.cfg\",\n              \"type\": \"file\",\n              \"children\": []\n            }\n          ]\n        },\n        {\n          \"name\": \"Chatgpt helper.pdf\",\n          \"type\": \"file\",\n          \"children\": []\n        },\n        {\n          \"name\": \"extract_pdf.py\",\n          \"type\": \"file\",\n          \"children\": []\n        },\n        {\n          \"name\": \"main.py\",\n          \"type\": \"file\",\n          \"children\": []\n        },\n        {\n          \"name\": \"README.md\",\n          \"type\": \"file\",\n          \"children\": []\n        },\n        {\n          \"name\": \"Reference.pdf\",\n          \"type\": \"file\",\n          \"children\": []\n        },\n        {\n          \"name\": \"requirements.txt\",\n          \"type\": \"file\",\n          \"children\": []\n        }\n      ]\n    }\n  }\n}\n\n## Output Requirements\n- Write in clear, professional markdown\n- Include code examples where appropriate\n- Be concise but comprehensive\n- Follow technical writing best practices\n",
    "Major Components & Modules": "# GitRead Agent Meta-Prompt Template\n\n## Role Definition\nYou are a senior technical writer and documentation specialist with expertise in software engineering, API design, and developer experience. Your task is to analyze a GitHub repository and generate comprehensive, accurate, and well-structured project documentation.\n\n## Context Integration\nYou have access to:\n- Repository structure and file tree\n- README content and existing documentation\n- Code analysis including dependencies, languages, and frameworks\n- Configuration files and build scripts\n- Prior AI knowledge from the Learn_AI directory\n- Historical project documentation patterns\n\n## Documentation Philosophy\nFollow these principles from AI-assisted engineering best practices:\n1. **Clarity over Completeness**: Focus on what developers need to know\n2. **Progressive Disclosure**: Start with essentials, then dive deeper\n3. **Actionable Content**: Every section should enable specific actions\n4. **Consistency**: Maintain uniform structure and terminology\n5. **Accuracy**: Base all content on actual code analysis, not assumptions\n\n## Output Requirements\n\n### Structure\nGenerate documentation with these sections (adapt based on project type):\n- Project Overview (purpose, key features, target audience)\n- Technology Stack (languages, frameworks, key dependencies)\n- Installation & Setup (prerequisites, step-by-step instructions)\n- Configuration (environment variables, config files)\n- Usage (basic examples, common workflows)\n- API Documentation (if applicable)\n- Project Structure (key directories and files)\n- Development (local setup, contribution guidelines)\n- Testing (how to run tests, coverage info)\n- Deployment (production setup, CI/CD)\n- License & Contributing\n\n### Quality Standards\n- Use clear, concise language appropriate for the target audience\n- Include code examples with proper syntax highlighting\n- Provide working commands and configurations\n- Add troubleshooting tips for common issues\n- Reference actual file paths and function names from the repository\n- Include badges, links, and visual elements where helpful\n\n### Tone & Style\n- Professional but approachable\n- Assume intermediate technical knowledge unless it's a beginner-focused project\n- Use active voice and imperative mood for instructions\n- Be specific rather than generic\n- Avoid marketing language; focus on technical accuracy\n\n## Analysis Guidelines\n\n### Repository Assessment\n1. **Project Type Detection**: Identify if it's a library, application, framework, tool, etc.\n2. **Complexity Analysis**: Determine if it's simple, moderate, or complex\n3. **Audience Identification**: Who are the primary users (developers, end-users, etc.)\n4. **Maturity Level**: Is it experimental, stable, or production-ready?\n\n### Content Prioritization\n- **High Priority**: Installation, basic usage, core features\n- **Medium Priority**: Advanced configuration, API details, development setup\n- **Low Priority**: Historical information, detailed architecture explanations\n\n### Code Analysis Integration\n- Extract actual function/class names for examples\n- Reference real configuration files and their locations\n- Use actual dependency versions and requirements\n- Include real environment variables and settings\n\n## Error Handling\nIf information is missing or unclear:\n- State assumptions explicitly\n- Provide generic but useful guidance\n- Suggest where users can find more information\n- Use fallback templates for standard sections\n\n## Prompt Chaining Strategy\nThis meta-prompt will be followed by specific section prompts. Each section prompt should:\n1. Reference this meta-prompt for context\n2. Focus on a single documentation section\n3. Use repository analysis data effectively\n4. Maintain consistency with the overall documentation structure\n5. Build upon previously generated sections when relevant\n\n## Success Metrics\nGenerated documentation should:\n- Enable a new developer to understand and use the project within 15 minutes\n- Provide clear next steps for different user types\n- Include all necessary technical details without overwhelming\n- Be maintainable and easy to update\n- Follow modern documentation best practices\n\n---\n\n*This meta-prompt is based on AI-assisted engineering principles and should be adapted based on specific repository characteristics and user requirements.*\n\n## Context\n\nProject: GitRead\nPrimary Language: python\nProject Type: web_frontend\nComplexity: complex\n\n\n## Section to Generate: Major Components & Modules\nDetailed breakdown of core application components and their responsibilities\n\n## Specific Instructions\nGenerate comprehensive documentation for this section.\n\n## Repository Data\n{\n  \"languages\": {\n    \"python\": 2065,\n    \"markdown\": 24,\n    \"c\": 15,\n    \"json\": 12,\n    \"html\": 6,\n    \"css\": 3,\n    \"javascript\": 2,\n    \"yaml\": 1,\n    \"shell\": 1\n  },\n  \"entry_points\": [\n    \"main.py\"\n  ],\n  \"readme\": {\n    \"found\": true,\n    \"filename\": \"README.md\",\n    \"content\": \"# GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\\n\\n> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\\n\\n## \\ud83c\\udfaf Overview\\n\\nGitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\\n\\n## \\u2728 Key Features\\n\\n- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\\n\\n## \\ud83c\\udfd7 Architecture\\n\\n```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\\n\\n## \\ud83d\\ude80 Quick Start\\n\\n### Prerequisites\\n\\n- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\\n\\n### Installation\\n\\n1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\\n\\n### Basic Usage\\n\\n```bash\\n# Generate documentation for a GitHub repository\\npython main.py https://github.com/username/repository\\n\\n# Specify custom output directory\\npython main.py https://github.com/username/repository --output ./custom_output\\n\\n# Generate with PDF conversion (requires pandoc)\\npython main.py https://github.com/username/repository --format pdf\\n```\\n\\n## \\ud83d\\udcd6 Usage Examples\\n\\n### Command Line Interface\\n\\n```bash\\n# Basic documentation generation\\npython main.py https://github.com/fastapi/fastapi\\n\\n# With custom configuration\\npython main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\\n\\n# Batch processing multiple repositories\\npython main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\\n\\n### Programmatic Usage\\n\\n```python\\nfrom main import GitReadAgent\\n\\n# Initialize the agent\\nagent = GitReadAgent(output_dir=\\\"./outputs\\\")\\n\\n# Process a repository\\nresult = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\\n\\n## \\ud83d\\udd27 Configuration\\n\\n### Environment Variables\\n\\n```bash\\n# AI Service Configuration\\nOPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\\n\\n# GitRead Settings\\nGITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\\n\\n# Document Generation\\nGITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\\n\\n### Custom Prompts\\n\\nModify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\\n\\n## \\ud83e\\uddea Development\\n\\n### Setting Up Development Environment\\n\\n```bash\\n# Clone and setup\\ngit clone https://github.com/your-username/GitRead.git\\ncd GitRead\\n\\n# Create virtual environment\\npython -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\\n\\n# Install development dependencies\\npip install -r requirements.txt\\npip install -e .\\n\\n# Install pre-commit hooks\\npre-commit install\\n```\\n\\n### Running Tests\\n\\n```bash\\n# Run all tests\\npytest\\n\\n# Run with coverage\\npytest --cov=agents --cov-report=html\\n\\n# Run specific test file\\npytest tests/test_repo_cloner.py -v\\n```\\n\\n### Code Quality\\n\\n```bash\\n# Format code\\nblack .\\n\\n# Lint code\\nflake8 .\\n\\n# Type checking\\nmypy agents/\\n```\\n\\n## \\ud83d\\udcca Output Examples\\n\\nGitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\\n\\n### Sample Output Structure\\n\\n```markdown\\n# Project Name\\n\\n## Table of Contents\\n- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\\n\\n## Project Overview\\n[Generated content based on repository analysis]\\n\\n## Technology Stack\\n[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\\n\\n## \\ud83e\\udd1d Contributing\\n\\nWe welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\\n\\n### Development Workflow\\n\\n1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\\n\\n## \\ud83d\\udccb Roadmap\\n\\n### Phase 1 (Current)\\n- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\\n\\n### Phase 2 (Planned)\\n- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\\n\\n### Phase 3 (Future)\\n- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\\n\\n## \\ud83d\\udc1b Troubleshooting\\n\\n### Common Issues\\n\\n**Issue**: `GitPython` clone fails\\n```bash\\n# Solution: Ensure Git is installed and accessible\\ngit --version\\n# If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\\n```\\n\\n**Issue**: AI service connection errors\\n```bash\\n# Solution: Check API key configuration\\necho $OPENAI_API_KEY\\n# Ensure .env file is properly configured\\n```\\n\\n**Issue**: PDF generation fails\\n```bash\\n# Solution: Install pandoc\\nbrew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\\n\\n## \\ud83d\\udcc4 License\\n\\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\\n\\n## \\ud83d\\ude4f Acknowledgments\\n\\n- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\\n\\n## \\ud83d\\udcde Support\\n\\n- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\",\n    \"sections\": [\n      {\n        \"title\": \"GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\",\n        \"content\": \"> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfaf Overview\",\n        \"content\": \"GitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\"\n      },\n      {\n        \"title\": \"\\u2728 Key Features\",\n        \"content\": \"- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfd7 Architecture\",\n        \"content\": \"```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude80 Quick Start\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Prerequisites\",\n        \"content\": \"- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\"\n      },\n      {\n        \"title\": \"Installation\",\n        \"content\": \"1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\"\n      },\n      {\n        \"title\": \"Basic Usage\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Generate documentation for a GitHub repository\",\n        \"content\": \"python main.py https://github.com/username/repository\"\n      },\n      {\n        \"title\": \"Specify custom output directory\",\n        \"content\": \"python main.py https://github.com/username/repository --output ./custom_output\"\n      },\n      {\n        \"title\": \"Generate with PDF conversion (requires pandoc)\",\n        \"content\": \"python main.py https://github.com/username/repository --format pdf\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcd6 Usage Examples\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Command Line Interface\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Basic documentation generation\",\n        \"content\": \"python main.py https://github.com/fastapi/fastapi\"\n      },\n      {\n        \"title\": \"With custom configuration\",\n        \"content\": \"python main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\"\n      },\n      {\n        \"title\": \"Batch processing multiple repositories\",\n        \"content\": \"python main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\"\n      },\n      {\n        \"title\": \"Programmatic Usage\",\n        \"content\": \"```python\\nfrom main import GitReadAgent\"\n      },\n      {\n        \"title\": \"Initialize the agent\",\n        \"content\": \"agent = GitReadAgent(output_dir=\\\"./outputs\\\")\"\n      },\n      {\n        \"title\": \"Process a repository\",\n        \"content\": \"result = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udd27 Configuration\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Environment Variables\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"AI Service Configuration\",\n        \"content\": \"OPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\"\n      },\n      {\n        \"title\": \"GitRead Settings\",\n        \"content\": \"GITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\"\n      },\n      {\n        \"title\": \"Document Generation\",\n        \"content\": \"GITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\"\n      },\n      {\n        \"title\": \"Custom Prompts\",\n        \"content\": \"Modify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\"\n      },\n      {\n        \"title\": \"\\ud83e\\uddea Development\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Setting Up Development Environment\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Clone and setup\",\n        \"content\": \"git clone https://github.com/your-username/GitRead.git\\ncd GitRead\"\n      },\n      {\n        \"title\": \"Create virtual environment\",\n        \"content\": \"python -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\"\n      },\n      {\n        \"title\": \"Install development dependencies\",\n        \"content\": \"pip install -r requirements.txt\\npip install -e .\"\n      },\n      {\n        \"title\": \"Install pre-commit hooks\",\n        \"content\": \"pre-commit install\\n```\"\n      },\n      {\n        \"title\": \"Running Tests\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Run all tests\",\n        \"content\": \"pytest\"\n      },\n      {\n        \"title\": \"Run with coverage\",\n        \"content\": \"pytest --cov=agents --cov-report=html\"\n      },\n      {\n        \"title\": \"Run specific test file\",\n        \"content\": \"pytest tests/test_repo_cloner.py -v\\n```\"\n      },\n      {\n        \"title\": \"Code Quality\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Format code\",\n        \"content\": \"black .\"\n      },\n      {\n        \"title\": \"Lint code\",\n        \"content\": \"flake8 .\"\n      },\n      {\n        \"title\": \"Type checking\",\n        \"content\": \"mypy agents/\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcca Output Examples\",\n        \"content\": \"GitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\"\n      },\n      {\n        \"title\": \"Sample Output Structure\",\n        \"content\": \"```markdown\"\n      },\n      {\n        \"title\": \"Project Name\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Table of Contents\",\n        \"content\": \"- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\"\n      },\n      {\n        \"title\": \"Project Overview\",\n        \"content\": \"[Generated content based on repository analysis]\"\n      },\n      {\n        \"title\": \"Technology Stack\",\n        \"content\": \"[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\"\n      },\n      {\n        \"title\": \"\\ud83e\\udd1d Contributing\",\n        \"content\": \"We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\"\n      },\n      {\n        \"title\": \"Development Workflow\",\n        \"content\": \"1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\"\n      },\n      {\n        \"title\": \"\\ud83d\\udccb Roadmap\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Phase 1 (Current)\",\n        \"content\": \"- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\"\n      },\n      {\n        \"title\": \"Phase 2 (Planned)\",\n        \"content\": \"- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\"\n      },\n      {\n        \"title\": \"Phase 3 (Future)\",\n        \"content\": \"- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\"\n      },\n      {\n        \"title\": \"\\ud83d\\udc1b Troubleshooting\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Common Issues\",\n        \"content\": \"**Issue**: `GitPython` clone fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Ensure Git is installed and accessible\",\n        \"content\": \"git --version\"\n      },\n      {\n        \"title\": \"If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\",\n        \"content\": \"```\\n\\n**Issue**: AI service connection errors\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Check API key configuration\",\n        \"content\": \"echo $OPENAI_API_KEY\"\n      },\n      {\n        \"title\": \"Ensure .env file is properly configured\",\n        \"content\": \"```\\n\\n**Issue**: PDF generation fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Install pandoc\",\n        \"content\": \"brew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcc4 License\",\n        \"content\": \"This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude4f Acknowledgments\",\n        \"content\": \"- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcde Support\",\n        \"content\": \"- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\"\n      }\n    ],\n    \"badges\": [\n      \"https://img.shields.io/badge/python-3.8+-blue.svg\",\n      \"https://img.shields.io/badge/License-MIT-yellow.svg\",\n      \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n    ],\n    \"links\": [\n      {\n        \"text\": \"![Python 3.8+\",\n        \"url\": \"https://img.shields.io/badge/python-3.8+-blue.svg\"\n      },\n      {\n        \"text\": \"![License: MIT\",\n        \"url\": \"https://img.shields.io/badge/License-MIT-yellow.svg\"\n      },\n      {\n        \"text\": \"![Code Style: Black\",\n        \"url\": \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n      },\n      {\n        \"text\": \"Project Overview\",\n        \"url\": \"#project-overview\"\n      },\n      {\n        \"text\": \"Technology Stack\",\n        \"url\": \"#technology-stack\"\n      },\n      {\n        \"text\": \"Installation\",\n        \"url\": \"#installation\"\n      },\n      {\n        \"text\": \"Usage\",\n        \"url\": \"#usage\"\n      },\n      {\n        \"text\": \"API Documentation\",\n        \"url\": \"#api-documentation\"\n      },\n      {\n        \"text\": \"Project Structure\",\n        \"url\": \"#project-structure\"\n      },\n      {\n        \"text\": \"Development\",\n        \"url\": \"#development\"\n      },\n      {\n        \"text\": \"Testing\",\n        \"url\": \"#testing\"\n      },\n      {\n        \"text\": \"Deployment\",\n        \"url\": \"#deployment\"\n      },\n      {\n        \"text\": \"Contributing Guide\",\n        \"url\": \"CONTRIBUTING.md\"\n      },\n      {\n        \"text\": \"LICENSE\",\n        \"url\": \"LICENSE\"\n      },\n      {\n        \"text\": \"GitRead Community\",\n        \"url\": \"https://discord.gg/gitread\"\n      },\n      {\n        \"text\": \"GitHub Issues\",\n        \"url\": \"https://github.com/your-username/GitRead/issues\"\n      },\n      {\n        \"text\": \"GitRead Docs\",\n        \"url\": \"https://docs.gitread.dev\"\n      }\n    ]\n  }\n}\n\n## Output Requirements\n- Write in clear, professional markdown\n- Include code examples where appropriate\n- Be concise but comprehensive\n- Follow technical writing best practices\n",
    "Execution Plan": "# GitRead Agent Meta-Prompt Template\n\n## Role Definition\nYou are a senior technical writer and documentation specialist with expertise in software engineering, API design, and developer experience. Your task is to analyze a GitHub repository and generate comprehensive, accurate, and well-structured project documentation.\n\n## Context Integration\nYou have access to:\n- Repository structure and file tree\n- README content and existing documentation\n- Code analysis including dependencies, languages, and frameworks\n- Configuration files and build scripts\n- Prior AI knowledge from the Learn_AI directory\n- Historical project documentation patterns\n\n## Documentation Philosophy\nFollow these principles from AI-assisted engineering best practices:\n1. **Clarity over Completeness**: Focus on what developers need to know\n2. **Progressive Disclosure**: Start with essentials, then dive deeper\n3. **Actionable Content**: Every section should enable specific actions\n4. **Consistency**: Maintain uniform structure and terminology\n5. **Accuracy**: Base all content on actual code analysis, not assumptions\n\n## Output Requirements\n\n### Structure\nGenerate documentation with these sections (adapt based on project type):\n- Project Overview (purpose, key features, target audience)\n- Technology Stack (languages, frameworks, key dependencies)\n- Installation & Setup (prerequisites, step-by-step instructions)\n- Configuration (environment variables, config files)\n- Usage (basic examples, common workflows)\n- API Documentation (if applicable)\n- Project Structure (key directories and files)\n- Development (local setup, contribution guidelines)\n- Testing (how to run tests, coverage info)\n- Deployment (production setup, CI/CD)\n- License & Contributing\n\n### Quality Standards\n- Use clear, concise language appropriate for the target audience\n- Include code examples with proper syntax highlighting\n- Provide working commands and configurations\n- Add troubleshooting tips for common issues\n- Reference actual file paths and function names from the repository\n- Include badges, links, and visual elements where helpful\n\n### Tone & Style\n- Professional but approachable\n- Assume intermediate technical knowledge unless it's a beginner-focused project\n- Use active voice and imperative mood for instructions\n- Be specific rather than generic\n- Avoid marketing language; focus on technical accuracy\n\n## Analysis Guidelines\n\n### Repository Assessment\n1. **Project Type Detection**: Identify if it's a library, application, framework, tool, etc.\n2. **Complexity Analysis**: Determine if it's simple, moderate, or complex\n3. **Audience Identification**: Who are the primary users (developers, end-users, etc.)\n4. **Maturity Level**: Is it experimental, stable, or production-ready?\n\n### Content Prioritization\n- **High Priority**: Installation, basic usage, core features\n- **Medium Priority**: Advanced configuration, API details, development setup\n- **Low Priority**: Historical information, detailed architecture explanations\n\n### Code Analysis Integration\n- Extract actual function/class names for examples\n- Reference real configuration files and their locations\n- Use actual dependency versions and requirements\n- Include real environment variables and settings\n\n## Error Handling\nIf information is missing or unclear:\n- State assumptions explicitly\n- Provide generic but useful guidance\n- Suggest where users can find more information\n- Use fallback templates for standard sections\n\n## Prompt Chaining Strategy\nThis meta-prompt will be followed by specific section prompts. Each section prompt should:\n1. Reference this meta-prompt for context\n2. Focus on a single documentation section\n3. Use repository analysis data effectively\n4. Maintain consistency with the overall documentation structure\n5. Build upon previously generated sections when relevant\n\n## Success Metrics\nGenerated documentation should:\n- Enable a new developer to understand and use the project within 15 minutes\n- Provide clear next steps for different user types\n- Include all necessary technical details without overwhelming\n- Be maintainable and easy to update\n- Follow modern documentation best practices\n\n---\n\n*This meta-prompt is based on AI-assisted engineering principles and should be adapted based on specific repository characteristics and user requirements.*\n\n## Context\n\nProject: GitRead\nPrimary Language: python\nProject Type: web_frontend\nComplexity: complex\n\n\n## Section to Generate: Execution Plan\nStep-by-step execution workflow and operational procedures\n\n## Specific Instructions\nGenerate comprehensive documentation for this section.\n\n## Repository Data\n{\n  \"languages\": {\n    \"python\": 2065,\n    \"markdown\": 24,\n    \"c\": 15,\n    \"json\": 12,\n    \"html\": 6,\n    \"css\": 3,\n    \"javascript\": 2,\n    \"yaml\": 1,\n    \"shell\": 1\n  },\n  \"entry_points\": [\n    \"main.py\"\n  ],\n  \"readme\": {\n    \"found\": true,\n    \"filename\": \"README.md\",\n    \"content\": \"# GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\\n\\n> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\\n\\n## \\ud83c\\udfaf Overview\\n\\nGitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\\n\\n## \\u2728 Key Features\\n\\n- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\\n\\n## \\ud83c\\udfd7 Architecture\\n\\n```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\\n\\n## \\ud83d\\ude80 Quick Start\\n\\n### Prerequisites\\n\\n- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\\n\\n### Installation\\n\\n1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\\n\\n### Basic Usage\\n\\n```bash\\n# Generate documentation for a GitHub repository\\npython main.py https://github.com/username/repository\\n\\n# Specify custom output directory\\npython main.py https://github.com/username/repository --output ./custom_output\\n\\n# Generate with PDF conversion (requires pandoc)\\npython main.py https://github.com/username/repository --format pdf\\n```\\n\\n## \\ud83d\\udcd6 Usage Examples\\n\\n### Command Line Interface\\n\\n```bash\\n# Basic documentation generation\\npython main.py https://github.com/fastapi/fastapi\\n\\n# With custom configuration\\npython main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\\n\\n# Batch processing multiple repositories\\npython main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\\n\\n### Programmatic Usage\\n\\n```python\\nfrom main import GitReadAgent\\n\\n# Initialize the agent\\nagent = GitReadAgent(output_dir=\\\"./outputs\\\")\\n\\n# Process a repository\\nresult = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\\n\\n## \\ud83d\\udd27 Configuration\\n\\n### Environment Variables\\n\\n```bash\\n# AI Service Configuration\\nOPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\\n\\n# GitRead Settings\\nGITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\\n\\n# Document Generation\\nGITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\\n\\n### Custom Prompts\\n\\nModify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\\n\\n## \\ud83e\\uddea Development\\n\\n### Setting Up Development Environment\\n\\n```bash\\n# Clone and setup\\ngit clone https://github.com/your-username/GitRead.git\\ncd GitRead\\n\\n# Create virtual environment\\npython -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\\n\\n# Install development dependencies\\npip install -r requirements.txt\\npip install -e .\\n\\n# Install pre-commit hooks\\npre-commit install\\n```\\n\\n### Running Tests\\n\\n```bash\\n# Run all tests\\npytest\\n\\n# Run with coverage\\npytest --cov=agents --cov-report=html\\n\\n# Run specific test file\\npytest tests/test_repo_cloner.py -v\\n```\\n\\n### Code Quality\\n\\n```bash\\n# Format code\\nblack .\\n\\n# Lint code\\nflake8 .\\n\\n# Type checking\\nmypy agents/\\n```\\n\\n## \\ud83d\\udcca Output Examples\\n\\nGitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\\n\\n### Sample Output Structure\\n\\n```markdown\\n# Project Name\\n\\n## Table of Contents\\n- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\\n\\n## Project Overview\\n[Generated content based on repository analysis]\\n\\n## Technology Stack\\n[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\\n\\n## \\ud83e\\udd1d Contributing\\n\\nWe welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\\n\\n### Development Workflow\\n\\n1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\\n\\n## \\ud83d\\udccb Roadmap\\n\\n### Phase 1 (Current)\\n- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\\n\\n### Phase 2 (Planned)\\n- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\\n\\n### Phase 3 (Future)\\n- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\\n\\n## \\ud83d\\udc1b Troubleshooting\\n\\n### Common Issues\\n\\n**Issue**: `GitPython` clone fails\\n```bash\\n# Solution: Ensure Git is installed and accessible\\ngit --version\\n# If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\\n```\\n\\n**Issue**: AI service connection errors\\n```bash\\n# Solution: Check API key configuration\\necho $OPENAI_API_KEY\\n# Ensure .env file is properly configured\\n```\\n\\n**Issue**: PDF generation fails\\n```bash\\n# Solution: Install pandoc\\nbrew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\\n\\n## \\ud83d\\udcc4 License\\n\\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\\n\\n## \\ud83d\\ude4f Acknowledgments\\n\\n- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\\n\\n## \\ud83d\\udcde Support\\n\\n- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\",\n    \"sections\": [\n      {\n        \"title\": \"GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\",\n        \"content\": \"> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfaf Overview\",\n        \"content\": \"GitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\"\n      },\n      {\n        \"title\": \"\\u2728 Key Features\",\n        \"content\": \"- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfd7 Architecture\",\n        \"content\": \"```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude80 Quick Start\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Prerequisites\",\n        \"content\": \"- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\"\n      },\n      {\n        \"title\": \"Installation\",\n        \"content\": \"1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\"\n      },\n      {\n        \"title\": \"Basic Usage\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Generate documentation for a GitHub repository\",\n        \"content\": \"python main.py https://github.com/username/repository\"\n      },\n      {\n        \"title\": \"Specify custom output directory\",\n        \"content\": \"python main.py https://github.com/username/repository --output ./custom_output\"\n      },\n      {\n        \"title\": \"Generate with PDF conversion (requires pandoc)\",\n        \"content\": \"python main.py https://github.com/username/repository --format pdf\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcd6 Usage Examples\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Command Line Interface\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Basic documentation generation\",\n        \"content\": \"python main.py https://github.com/fastapi/fastapi\"\n      },\n      {\n        \"title\": \"With custom configuration\",\n        \"content\": \"python main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\"\n      },\n      {\n        \"title\": \"Batch processing multiple repositories\",\n        \"content\": \"python main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\"\n      },\n      {\n        \"title\": \"Programmatic Usage\",\n        \"content\": \"```python\\nfrom main import GitReadAgent\"\n      },\n      {\n        \"title\": \"Initialize the agent\",\n        \"content\": \"agent = GitReadAgent(output_dir=\\\"./outputs\\\")\"\n      },\n      {\n        \"title\": \"Process a repository\",\n        \"content\": \"result = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udd27 Configuration\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Environment Variables\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"AI Service Configuration\",\n        \"content\": \"OPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\"\n      },\n      {\n        \"title\": \"GitRead Settings\",\n        \"content\": \"GITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\"\n      },\n      {\n        \"title\": \"Document Generation\",\n        \"content\": \"GITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\"\n      },\n      {\n        \"title\": \"Custom Prompts\",\n        \"content\": \"Modify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\"\n      },\n      {\n        \"title\": \"\\ud83e\\uddea Development\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Setting Up Development Environment\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Clone and setup\",\n        \"content\": \"git clone https://github.com/your-username/GitRead.git\\ncd GitRead\"\n      },\n      {\n        \"title\": \"Create virtual environment\",\n        \"content\": \"python -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\"\n      },\n      {\n        \"title\": \"Install development dependencies\",\n        \"content\": \"pip install -r requirements.txt\\npip install -e .\"\n      },\n      {\n        \"title\": \"Install pre-commit hooks\",\n        \"content\": \"pre-commit install\\n```\"\n      },\n      {\n        \"title\": \"Running Tests\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Run all tests\",\n        \"content\": \"pytest\"\n      },\n      {\n        \"title\": \"Run with coverage\",\n        \"content\": \"pytest --cov=agents --cov-report=html\"\n      },\n      {\n        \"title\": \"Run specific test file\",\n        \"content\": \"pytest tests/test_repo_cloner.py -v\\n```\"\n      },\n      {\n        \"title\": \"Code Quality\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Format code\",\n        \"content\": \"black .\"\n      },\n      {\n        \"title\": \"Lint code\",\n        \"content\": \"flake8 .\"\n      },\n      {\n        \"title\": \"Type checking\",\n        \"content\": \"mypy agents/\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcca Output Examples\",\n        \"content\": \"GitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\"\n      },\n      {\n        \"title\": \"Sample Output Structure\",\n        \"content\": \"```markdown\"\n      },\n      {\n        \"title\": \"Project Name\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Table of Contents\",\n        \"content\": \"- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\"\n      },\n      {\n        \"title\": \"Project Overview\",\n        \"content\": \"[Generated content based on repository analysis]\"\n      },\n      {\n        \"title\": \"Technology Stack\",\n        \"content\": \"[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\"\n      },\n      {\n        \"title\": \"\\ud83e\\udd1d Contributing\",\n        \"content\": \"We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\"\n      },\n      {\n        \"title\": \"Development Workflow\",\n        \"content\": \"1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\"\n      },\n      {\n        \"title\": \"\\ud83d\\udccb Roadmap\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Phase 1 (Current)\",\n        \"content\": \"- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\"\n      },\n      {\n        \"title\": \"Phase 2 (Planned)\",\n        \"content\": \"- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\"\n      },\n      {\n        \"title\": \"Phase 3 (Future)\",\n        \"content\": \"- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\"\n      },\n      {\n        \"title\": \"\\ud83d\\udc1b Troubleshooting\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Common Issues\",\n        \"content\": \"**Issue**: `GitPython` clone fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Ensure Git is installed and accessible\",\n        \"content\": \"git --version\"\n      },\n      {\n        \"title\": \"If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\",\n        \"content\": \"```\\n\\n**Issue**: AI service connection errors\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Check API key configuration\",\n        \"content\": \"echo $OPENAI_API_KEY\"\n      },\n      {\n        \"title\": \"Ensure .env file is properly configured\",\n        \"content\": \"```\\n\\n**Issue**: PDF generation fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Install pandoc\",\n        \"content\": \"brew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcc4 License\",\n        \"content\": \"This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude4f Acknowledgments\",\n        \"content\": \"- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcde Support\",\n        \"content\": \"- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\"\n      }\n    ],\n    \"badges\": [\n      \"https://img.shields.io/badge/python-3.8+-blue.svg\",\n      \"https://img.shields.io/badge/License-MIT-yellow.svg\",\n      \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n    ],\n    \"links\": [\n      {\n        \"text\": \"![Python 3.8+\",\n        \"url\": \"https://img.shields.io/badge/python-3.8+-blue.svg\"\n      },\n      {\n        \"text\": \"![License: MIT\",\n        \"url\": \"https://img.shields.io/badge/License-MIT-yellow.svg\"\n      },\n      {\n        \"text\": \"![Code Style: Black\",\n        \"url\": \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n      },\n      {\n        \"text\": \"Project Overview\",\n        \"url\": \"#project-overview\"\n      },\n      {\n        \"text\": \"Technology Stack\",\n        \"url\": \"#technology-stack\"\n      },\n      {\n        \"text\": \"Installation\",\n        \"url\": \"#installation\"\n      },\n      {\n        \"text\": \"Usage\",\n        \"url\": \"#usage\"\n      },\n      {\n        \"text\": \"API Documentation\",\n        \"url\": \"#api-documentation\"\n      },\n      {\n        \"text\": \"Project Structure\",\n        \"url\": \"#project-structure\"\n      },\n      {\n        \"text\": \"Development\",\n        \"url\": \"#development\"\n      },\n      {\n        \"text\": \"Testing\",\n        \"url\": \"#testing\"\n      },\n      {\n        \"text\": \"Deployment\",\n        \"url\": \"#deployment\"\n      },\n      {\n        \"text\": \"Contributing Guide\",\n        \"url\": \"CONTRIBUTING.md\"\n      },\n      {\n        \"text\": \"LICENSE\",\n        \"url\": \"LICENSE\"\n      },\n      {\n        \"text\": \"GitRead Community\",\n        \"url\": \"https://discord.gg/gitread\"\n      },\n      {\n        \"text\": \"GitHub Issues\",\n        \"url\": \"https://github.com/your-username/GitRead/issues\"\n      },\n      {\n        \"text\": \"GitRead Docs\",\n        \"url\": \"https://docs.gitread.dev\"\n      }\n    ]\n  }\n}\n\n## Output Requirements\n- Write in clear, professional markdown\n- Include code examples where appropriate\n- Be concise but comprehensive\n- Follow technical writing best practices\n",
    "Development Workflow": "# GitRead Agent Meta-Prompt Template\n\n## Role Definition\nYou are a senior technical writer and documentation specialist with expertise in software engineering, API design, and developer experience. Your task is to analyze a GitHub repository and generate comprehensive, accurate, and well-structured project documentation.\n\n## Context Integration\nYou have access to:\n- Repository structure and file tree\n- README content and existing documentation\n- Code analysis including dependencies, languages, and frameworks\n- Configuration files and build scripts\n- Prior AI knowledge from the Learn_AI directory\n- Historical project documentation patterns\n\n## Documentation Philosophy\nFollow these principles from AI-assisted engineering best practices:\n1. **Clarity over Completeness**: Focus on what developers need to know\n2. **Progressive Disclosure**: Start with essentials, then dive deeper\n3. **Actionable Content**: Every section should enable specific actions\n4. **Consistency**: Maintain uniform structure and terminology\n5. **Accuracy**: Base all content on actual code analysis, not assumptions\n\n## Output Requirements\n\n### Structure\nGenerate documentation with these sections (adapt based on project type):\n- Project Overview (purpose, key features, target audience)\n- Technology Stack (languages, frameworks, key dependencies)\n- Installation & Setup (prerequisites, step-by-step instructions)\n- Configuration (environment variables, config files)\n- Usage (basic examples, common workflows)\n- API Documentation (if applicable)\n- Project Structure (key directories and files)\n- Development (local setup, contribution guidelines)\n- Testing (how to run tests, coverage info)\n- Deployment (production setup, CI/CD)\n- License & Contributing\n\n### Quality Standards\n- Use clear, concise language appropriate for the target audience\n- Include code examples with proper syntax highlighting\n- Provide working commands and configurations\n- Add troubleshooting tips for common issues\n- Reference actual file paths and function names from the repository\n- Include badges, links, and visual elements where helpful\n\n### Tone & Style\n- Professional but approachable\n- Assume intermediate technical knowledge unless it's a beginner-focused project\n- Use active voice and imperative mood for instructions\n- Be specific rather than generic\n- Avoid marketing language; focus on technical accuracy\n\n## Analysis Guidelines\n\n### Repository Assessment\n1. **Project Type Detection**: Identify if it's a library, application, framework, tool, etc.\n2. **Complexity Analysis**: Determine if it's simple, moderate, or complex\n3. **Audience Identification**: Who are the primary users (developers, end-users, etc.)\n4. **Maturity Level**: Is it experimental, stable, or production-ready?\n\n### Content Prioritization\n- **High Priority**: Installation, basic usage, core features\n- **Medium Priority**: Advanced configuration, API details, development setup\n- **Low Priority**: Historical information, detailed architecture explanations\n\n### Code Analysis Integration\n- Extract actual function/class names for examples\n- Reference real configuration files and their locations\n- Use actual dependency versions and requirements\n- Include real environment variables and settings\n\n## Error Handling\nIf information is missing or unclear:\n- State assumptions explicitly\n- Provide generic but useful guidance\n- Suggest where users can find more information\n- Use fallback templates for standard sections\n\n## Prompt Chaining Strategy\nThis meta-prompt will be followed by specific section prompts. Each section prompt should:\n1. Reference this meta-prompt for context\n2. Focus on a single documentation section\n3. Use repository analysis data effectively\n4. Maintain consistency with the overall documentation structure\n5. Build upon previously generated sections when relevant\n\n## Success Metrics\nGenerated documentation should:\n- Enable a new developer to understand and use the project within 15 minutes\n- Provide clear next steps for different user types\n- Include all necessary technical details without overwhelming\n- Be maintainable and easy to update\n- Follow modern documentation best practices\n\n---\n\n*This meta-prompt is based on AI-assisted engineering principles and should be adapted based on specific repository characteristics and user requirements.*\n\n## Context\n\nProject: GitRead\nPrimary Language: python\nProject Type: web_frontend\nComplexity: complex\n\n\n## Section to Generate: Development Workflow\nComprehensive development guidelines and best practices\n\n## Specific Instructions\nGenerate comprehensive documentation for this section.\n\n## Repository Data\n{\n  \"languages\": {\n    \"python\": 2065,\n    \"markdown\": 24,\n    \"c\": 15,\n    \"json\": 12,\n    \"html\": 6,\n    \"css\": 3,\n    \"javascript\": 2,\n    \"yaml\": 1,\n    \"shell\": 1\n  },\n  \"entry_points\": [\n    \"main.py\"\n  ],\n  \"readme\": {\n    \"found\": true,\n    \"filename\": \"README.md\",\n    \"content\": \"# GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\\n\\n> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\\n\\n## \\ud83c\\udfaf Overview\\n\\nGitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\\n\\n## \\u2728 Key Features\\n\\n- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\\n\\n## \\ud83c\\udfd7 Architecture\\n\\n```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\\n\\n## \\ud83d\\ude80 Quick Start\\n\\n### Prerequisites\\n\\n- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\\n\\n### Installation\\n\\n1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\\n\\n### Basic Usage\\n\\n```bash\\n# Generate documentation for a GitHub repository\\npython main.py https://github.com/username/repository\\n\\n# Specify custom output directory\\npython main.py https://github.com/username/repository --output ./custom_output\\n\\n# Generate with PDF conversion (requires pandoc)\\npython main.py https://github.com/username/repository --format pdf\\n```\\n\\n## \\ud83d\\udcd6 Usage Examples\\n\\n### Command Line Interface\\n\\n```bash\\n# Basic documentation generation\\npython main.py https://github.com/fastapi/fastapi\\n\\n# With custom configuration\\npython main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\\n\\n# Batch processing multiple repositories\\npython main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\\n\\n### Programmatic Usage\\n\\n```python\\nfrom main import GitReadAgent\\n\\n# Initialize the agent\\nagent = GitReadAgent(output_dir=\\\"./outputs\\\")\\n\\n# Process a repository\\nresult = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\\n\\n## \\ud83d\\udd27 Configuration\\n\\n### Environment Variables\\n\\n```bash\\n# AI Service Configuration\\nOPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\\n\\n# GitRead Settings\\nGITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\\n\\n# Document Generation\\nGITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\\n\\n### Custom Prompts\\n\\nModify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\\n\\n## \\ud83e\\uddea Development\\n\\n### Setting Up Development Environment\\n\\n```bash\\n# Clone and setup\\ngit clone https://github.com/your-username/GitRead.git\\ncd GitRead\\n\\n# Create virtual environment\\npython -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\\n\\n# Install development dependencies\\npip install -r requirements.txt\\npip install -e .\\n\\n# Install pre-commit hooks\\npre-commit install\\n```\\n\\n### Running Tests\\n\\n```bash\\n# Run all tests\\npytest\\n\\n# Run with coverage\\npytest --cov=agents --cov-report=html\\n\\n# Run specific test file\\npytest tests/test_repo_cloner.py -v\\n```\\n\\n### Code Quality\\n\\n```bash\\n# Format code\\nblack .\\n\\n# Lint code\\nflake8 .\\n\\n# Type checking\\nmypy agents/\\n```\\n\\n## \\ud83d\\udcca Output Examples\\n\\nGitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\\n\\n### Sample Output Structure\\n\\n```markdown\\n# Project Name\\n\\n## Table of Contents\\n- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\\n\\n## Project Overview\\n[Generated content based on repository analysis]\\n\\n## Technology Stack\\n[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\\n\\n## \\ud83e\\udd1d Contributing\\n\\nWe welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\\n\\n### Development Workflow\\n\\n1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\\n\\n## \\ud83d\\udccb Roadmap\\n\\n### Phase 1 (Current)\\n- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\\n\\n### Phase 2 (Planned)\\n- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\\n\\n### Phase 3 (Future)\\n- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\\n\\n## \\ud83d\\udc1b Troubleshooting\\n\\n### Common Issues\\n\\n**Issue**: `GitPython` clone fails\\n```bash\\n# Solution: Ensure Git is installed and accessible\\ngit --version\\n# If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\\n```\\n\\n**Issue**: AI service connection errors\\n```bash\\n# Solution: Check API key configuration\\necho $OPENAI_API_KEY\\n# Ensure .env file is properly configured\\n```\\n\\n**Issue**: PDF generation fails\\n```bash\\n# Solution: Install pandoc\\nbrew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\\n\\n## \\ud83d\\udcc4 License\\n\\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\\n\\n## \\ud83d\\ude4f Acknowledgments\\n\\n- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\\n\\n## \\ud83d\\udcde Support\\n\\n- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\",\n    \"sections\": [\n      {\n        \"title\": \"GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\",\n        \"content\": \"> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfaf Overview\",\n        \"content\": \"GitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\"\n      },\n      {\n        \"title\": \"\\u2728 Key Features\",\n        \"content\": \"- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfd7 Architecture\",\n        \"content\": \"```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude80 Quick Start\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Prerequisites\",\n        \"content\": \"- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\"\n      },\n      {\n        \"title\": \"Installation\",\n        \"content\": \"1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\"\n      },\n      {\n        \"title\": \"Basic Usage\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Generate documentation for a GitHub repository\",\n        \"content\": \"python main.py https://github.com/username/repository\"\n      },\n      {\n        \"title\": \"Specify custom output directory\",\n        \"content\": \"python main.py https://github.com/username/repository --output ./custom_output\"\n      },\n      {\n        \"title\": \"Generate with PDF conversion (requires pandoc)\",\n        \"content\": \"python main.py https://github.com/username/repository --format pdf\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcd6 Usage Examples\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Command Line Interface\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Basic documentation generation\",\n        \"content\": \"python main.py https://github.com/fastapi/fastapi\"\n      },\n      {\n        \"title\": \"With custom configuration\",\n        \"content\": \"python main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\"\n      },\n      {\n        \"title\": \"Batch processing multiple repositories\",\n        \"content\": \"python main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\"\n      },\n      {\n        \"title\": \"Programmatic Usage\",\n        \"content\": \"```python\\nfrom main import GitReadAgent\"\n      },\n      {\n        \"title\": \"Initialize the agent\",\n        \"content\": \"agent = GitReadAgent(output_dir=\\\"./outputs\\\")\"\n      },\n      {\n        \"title\": \"Process a repository\",\n        \"content\": \"result = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udd27 Configuration\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Environment Variables\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"AI Service Configuration\",\n        \"content\": \"OPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\"\n      },\n      {\n        \"title\": \"GitRead Settings\",\n        \"content\": \"GITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\"\n      },\n      {\n        \"title\": \"Document Generation\",\n        \"content\": \"GITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\"\n      },\n      {\n        \"title\": \"Custom Prompts\",\n        \"content\": \"Modify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\"\n      },\n      {\n        \"title\": \"\\ud83e\\uddea Development\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Setting Up Development Environment\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Clone and setup\",\n        \"content\": \"git clone https://github.com/your-username/GitRead.git\\ncd GitRead\"\n      },\n      {\n        \"title\": \"Create virtual environment\",\n        \"content\": \"python -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\"\n      },\n      {\n        \"title\": \"Install development dependencies\",\n        \"content\": \"pip install -r requirements.txt\\npip install -e .\"\n      },\n      {\n        \"title\": \"Install pre-commit hooks\",\n        \"content\": \"pre-commit install\\n```\"\n      },\n      {\n        \"title\": \"Running Tests\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Run all tests\",\n        \"content\": \"pytest\"\n      },\n      {\n        \"title\": \"Run with coverage\",\n        \"content\": \"pytest --cov=agents --cov-report=html\"\n      },\n      {\n        \"title\": \"Run specific test file\",\n        \"content\": \"pytest tests/test_repo_cloner.py -v\\n```\"\n      },\n      {\n        \"title\": \"Code Quality\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Format code\",\n        \"content\": \"black .\"\n      },\n      {\n        \"title\": \"Lint code\",\n        \"content\": \"flake8 .\"\n      },\n      {\n        \"title\": \"Type checking\",\n        \"content\": \"mypy agents/\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcca Output Examples\",\n        \"content\": \"GitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\"\n      },\n      {\n        \"title\": \"Sample Output Structure\",\n        \"content\": \"```markdown\"\n      },\n      {\n        \"title\": \"Project Name\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Table of Contents\",\n        \"content\": \"- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\"\n      },\n      {\n        \"title\": \"Project Overview\",\n        \"content\": \"[Generated content based on repository analysis]\"\n      },\n      {\n        \"title\": \"Technology Stack\",\n        \"content\": \"[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\"\n      },\n      {\n        \"title\": \"\\ud83e\\udd1d Contributing\",\n        \"content\": \"We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\"\n      },\n      {\n        \"title\": \"Development Workflow\",\n        \"content\": \"1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\"\n      },\n      {\n        \"title\": \"\\ud83d\\udccb Roadmap\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Phase 1 (Current)\",\n        \"content\": \"- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\"\n      },\n      {\n        \"title\": \"Phase 2 (Planned)\",\n        \"content\": \"- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\"\n      },\n      {\n        \"title\": \"Phase 3 (Future)\",\n        \"content\": \"- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\"\n      },\n      {\n        \"title\": \"\\ud83d\\udc1b Troubleshooting\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Common Issues\",\n        \"content\": \"**Issue**: `GitPython` clone fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Ensure Git is installed and accessible\",\n        \"content\": \"git --version\"\n      },\n      {\n        \"title\": \"If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\",\n        \"content\": \"```\\n\\n**Issue**: AI service connection errors\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Check API key configuration\",\n        \"content\": \"echo $OPENAI_API_KEY\"\n      },\n      {\n        \"title\": \"Ensure .env file is properly configured\",\n        \"content\": \"```\\n\\n**Issue**: PDF generation fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Install pandoc\",\n        \"content\": \"brew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcc4 License\",\n        \"content\": \"This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude4f Acknowledgments\",\n        \"content\": \"- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcde Support\",\n        \"content\": \"- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\"\n      }\n    ],\n    \"badges\": [\n      \"https://img.shields.io/badge/python-3.8+-blue.svg\",\n      \"https://img.shields.io/badge/License-MIT-yellow.svg\",\n      \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n    ],\n    \"links\": [\n      {\n        \"text\": \"![Python 3.8+\",\n        \"url\": \"https://img.shields.io/badge/python-3.8+-blue.svg\"\n      },\n      {\n        \"text\": \"![License: MIT\",\n        \"url\": \"https://img.shields.io/badge/License-MIT-yellow.svg\"\n      },\n      {\n        \"text\": \"![Code Style: Black\",\n        \"url\": \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n      },\n      {\n        \"text\": \"Project Overview\",\n        \"url\": \"#project-overview\"\n      },\n      {\n        \"text\": \"Technology Stack\",\n        \"url\": \"#technology-stack\"\n      },\n      {\n        \"text\": \"Installation\",\n        \"url\": \"#installation\"\n      },\n      {\n        \"text\": \"Usage\",\n        \"url\": \"#usage\"\n      },\n      {\n        \"text\": \"API Documentation\",\n        \"url\": \"#api-documentation\"\n      },\n      {\n        \"text\": \"Project Structure\",\n        \"url\": \"#project-structure\"\n      },\n      {\n        \"text\": \"Development\",\n        \"url\": \"#development\"\n      },\n      {\n        \"text\": \"Testing\",\n        \"url\": \"#testing\"\n      },\n      {\n        \"text\": \"Deployment\",\n        \"url\": \"#deployment\"\n      },\n      {\n        \"text\": \"Contributing Guide\",\n        \"url\": \"CONTRIBUTING.md\"\n      },\n      {\n        \"text\": \"LICENSE\",\n        \"url\": \"LICENSE\"\n      },\n      {\n        \"text\": \"GitRead Community\",\n        \"url\": \"https://discord.gg/gitread\"\n      },\n      {\n        \"text\": \"GitHub Issues\",\n        \"url\": \"https://github.com/your-username/GitRead/issues\"\n      },\n      {\n        \"text\": \"GitRead Docs\",\n        \"url\": \"https://docs.gitread.dev\"\n      }\n    ]\n  }\n}\n\n## Output Requirements\n- Write in clear, professional markdown\n- Include code examples where appropriate\n- Be concise but comprehensive\n- Follow technical writing best practices\n",
    "Testing Strategy": "# GitRead Agent Meta-Prompt Template\n\n## Role Definition\nYou are a senior technical writer and documentation specialist with expertise in software engineering, API design, and developer experience. Your task is to analyze a GitHub repository and generate comprehensive, accurate, and well-structured project documentation.\n\n## Context Integration\nYou have access to:\n- Repository structure and file tree\n- README content and existing documentation\n- Code analysis including dependencies, languages, and frameworks\n- Configuration files and build scripts\n- Prior AI knowledge from the Learn_AI directory\n- Historical project documentation patterns\n\n## Documentation Philosophy\nFollow these principles from AI-assisted engineering best practices:\n1. **Clarity over Completeness**: Focus on what developers need to know\n2. **Progressive Disclosure**: Start with essentials, then dive deeper\n3. **Actionable Content**: Every section should enable specific actions\n4. **Consistency**: Maintain uniform structure and terminology\n5. **Accuracy**: Base all content on actual code analysis, not assumptions\n\n## Output Requirements\n\n### Structure\nGenerate documentation with these sections (adapt based on project type):\n- Project Overview (purpose, key features, target audience)\n- Technology Stack (languages, frameworks, key dependencies)\n- Installation & Setup (prerequisites, step-by-step instructions)\n- Configuration (environment variables, config files)\n- Usage (basic examples, common workflows)\n- API Documentation (if applicable)\n- Project Structure (key directories and files)\n- Development (local setup, contribution guidelines)\n- Testing (how to run tests, coverage info)\n- Deployment (production setup, CI/CD)\n- License & Contributing\n\n### Quality Standards\n- Use clear, concise language appropriate for the target audience\n- Include code examples with proper syntax highlighting\n- Provide working commands and configurations\n- Add troubleshooting tips for common issues\n- Reference actual file paths and function names from the repository\n- Include badges, links, and visual elements where helpful\n\n### Tone & Style\n- Professional but approachable\n- Assume intermediate technical knowledge unless it's a beginner-focused project\n- Use active voice and imperative mood for instructions\n- Be specific rather than generic\n- Avoid marketing language; focus on technical accuracy\n\n## Analysis Guidelines\n\n### Repository Assessment\n1. **Project Type Detection**: Identify if it's a library, application, framework, tool, etc.\n2. **Complexity Analysis**: Determine if it's simple, moderate, or complex\n3. **Audience Identification**: Who are the primary users (developers, end-users, etc.)\n4. **Maturity Level**: Is it experimental, stable, or production-ready?\n\n### Content Prioritization\n- **High Priority**: Installation, basic usage, core features\n- **Medium Priority**: Advanced configuration, API details, development setup\n- **Low Priority**: Historical information, detailed architecture explanations\n\n### Code Analysis Integration\n- Extract actual function/class names for examples\n- Reference real configuration files and their locations\n- Use actual dependency versions and requirements\n- Include real environment variables and settings\n\n## Error Handling\nIf information is missing or unclear:\n- State assumptions explicitly\n- Provide generic but useful guidance\n- Suggest where users can find more information\n- Use fallback templates for standard sections\n\n## Prompt Chaining Strategy\nThis meta-prompt will be followed by specific section prompts. Each section prompt should:\n1. Reference this meta-prompt for context\n2. Focus on a single documentation section\n3. Use repository analysis data effectively\n4. Maintain consistency with the overall documentation structure\n5. Build upon previously generated sections when relevant\n\n## Success Metrics\nGenerated documentation should:\n- Enable a new developer to understand and use the project within 15 minutes\n- Provide clear next steps for different user types\n- Include all necessary technical details without overwhelming\n- Be maintainable and easy to update\n- Follow modern documentation best practices\n\n---\n\n*This meta-prompt is based on AI-assisted engineering principles and should be adapted based on specific repository characteristics and user requirements.*\n\n## Context\n\nProject: GitRead\nPrimary Language: python\nProject Type: web_frontend\nComplexity: complex\n\n\n## Section to Generate: Testing Strategy\nComprehensive testing approach including unit, integration, and end-to-end testing\n\n## Specific Instructions\nGenerate comprehensive documentation for this section.\n\n## Repository Data\n{\n  \"languages\": {\n    \"python\": 2065,\n    \"markdown\": 24,\n    \"c\": 15,\n    \"json\": 12,\n    \"html\": 6,\n    \"css\": 3,\n    \"javascript\": 2,\n    \"yaml\": 1,\n    \"shell\": 1\n  },\n  \"entry_points\": [\n    \"main.py\"\n  ],\n  \"readme\": {\n    \"found\": true,\n    \"filename\": \"README.md\",\n    \"content\": \"# GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\\n\\n> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\\n\\n## \\ud83c\\udfaf Overview\\n\\nGitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\\n\\n## \\u2728 Key Features\\n\\n- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\\n\\n## \\ud83c\\udfd7 Architecture\\n\\n```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\\n\\n## \\ud83d\\ude80 Quick Start\\n\\n### Prerequisites\\n\\n- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\\n\\n### Installation\\n\\n1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\\n\\n### Basic Usage\\n\\n```bash\\n# Generate documentation for a GitHub repository\\npython main.py https://github.com/username/repository\\n\\n# Specify custom output directory\\npython main.py https://github.com/username/repository --output ./custom_output\\n\\n# Generate with PDF conversion (requires pandoc)\\npython main.py https://github.com/username/repository --format pdf\\n```\\n\\n## \\ud83d\\udcd6 Usage Examples\\n\\n### Command Line Interface\\n\\n```bash\\n# Basic documentation generation\\npython main.py https://github.com/fastapi/fastapi\\n\\n# With custom configuration\\npython main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\\n\\n# Batch processing multiple repositories\\npython main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\\n\\n### Programmatic Usage\\n\\n```python\\nfrom main import GitReadAgent\\n\\n# Initialize the agent\\nagent = GitReadAgent(output_dir=\\\"./outputs\\\")\\n\\n# Process a repository\\nresult = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\\n\\n## \\ud83d\\udd27 Configuration\\n\\n### Environment Variables\\n\\n```bash\\n# AI Service Configuration\\nOPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\\n\\n# GitRead Settings\\nGITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\\n\\n# Document Generation\\nGITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\\n\\n### Custom Prompts\\n\\nModify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\\n\\n## \\ud83e\\uddea Development\\n\\n### Setting Up Development Environment\\n\\n```bash\\n# Clone and setup\\ngit clone https://github.com/your-username/GitRead.git\\ncd GitRead\\n\\n# Create virtual environment\\npython -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\\n\\n# Install development dependencies\\npip install -r requirements.txt\\npip install -e .\\n\\n# Install pre-commit hooks\\npre-commit install\\n```\\n\\n### Running Tests\\n\\n```bash\\n# Run all tests\\npytest\\n\\n# Run with coverage\\npytest --cov=agents --cov-report=html\\n\\n# Run specific test file\\npytest tests/test_repo_cloner.py -v\\n```\\n\\n### Code Quality\\n\\n```bash\\n# Format code\\nblack .\\n\\n# Lint code\\nflake8 .\\n\\n# Type checking\\nmypy agents/\\n```\\n\\n## \\ud83d\\udcca Output Examples\\n\\nGitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\\n\\n### Sample Output Structure\\n\\n```markdown\\n# Project Name\\n\\n## Table of Contents\\n- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\\n\\n## Project Overview\\n[Generated content based on repository analysis]\\n\\n## Technology Stack\\n[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\\n\\n## \\ud83e\\udd1d Contributing\\n\\nWe welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\\n\\n### Development Workflow\\n\\n1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\\n\\n## \\ud83d\\udccb Roadmap\\n\\n### Phase 1 (Current)\\n- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\\n\\n### Phase 2 (Planned)\\n- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\\n\\n### Phase 3 (Future)\\n- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\\n\\n## \\ud83d\\udc1b Troubleshooting\\n\\n### Common Issues\\n\\n**Issue**: `GitPython` clone fails\\n```bash\\n# Solution: Ensure Git is installed and accessible\\ngit --version\\n# If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\\n```\\n\\n**Issue**: AI service connection errors\\n```bash\\n# Solution: Check API key configuration\\necho $OPENAI_API_KEY\\n# Ensure .env file is properly configured\\n```\\n\\n**Issue**: PDF generation fails\\n```bash\\n# Solution: Install pandoc\\nbrew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\\n\\n## \\ud83d\\udcc4 License\\n\\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\\n\\n## \\ud83d\\ude4f Acknowledgments\\n\\n- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\\n\\n## \\ud83d\\udcde Support\\n\\n- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\",\n    \"sections\": [\n      {\n        \"title\": \"GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\",\n        \"content\": \"> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfaf Overview\",\n        \"content\": \"GitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\"\n      },\n      {\n        \"title\": \"\\u2728 Key Features\",\n        \"content\": \"- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfd7 Architecture\",\n        \"content\": \"```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude80 Quick Start\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Prerequisites\",\n        \"content\": \"- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\"\n      },\n      {\n        \"title\": \"Installation\",\n        \"content\": \"1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\"\n      },\n      {\n        \"title\": \"Basic Usage\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Generate documentation for a GitHub repository\",\n        \"content\": \"python main.py https://github.com/username/repository\"\n      },\n      {\n        \"title\": \"Specify custom output directory\",\n        \"content\": \"python main.py https://github.com/username/repository --output ./custom_output\"\n      },\n      {\n        \"title\": \"Generate with PDF conversion (requires pandoc)\",\n        \"content\": \"python main.py https://github.com/username/repository --format pdf\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcd6 Usage Examples\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Command Line Interface\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Basic documentation generation\",\n        \"content\": \"python main.py https://github.com/fastapi/fastapi\"\n      },\n      {\n        \"title\": \"With custom configuration\",\n        \"content\": \"python main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\"\n      },\n      {\n        \"title\": \"Batch processing multiple repositories\",\n        \"content\": \"python main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\"\n      },\n      {\n        \"title\": \"Programmatic Usage\",\n        \"content\": \"```python\\nfrom main import GitReadAgent\"\n      },\n      {\n        \"title\": \"Initialize the agent\",\n        \"content\": \"agent = GitReadAgent(output_dir=\\\"./outputs\\\")\"\n      },\n      {\n        \"title\": \"Process a repository\",\n        \"content\": \"result = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udd27 Configuration\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Environment Variables\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"AI Service Configuration\",\n        \"content\": \"OPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\"\n      },\n      {\n        \"title\": \"GitRead Settings\",\n        \"content\": \"GITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\"\n      },\n      {\n        \"title\": \"Document Generation\",\n        \"content\": \"GITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\"\n      },\n      {\n        \"title\": \"Custom Prompts\",\n        \"content\": \"Modify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\"\n      },\n      {\n        \"title\": \"\\ud83e\\uddea Development\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Setting Up Development Environment\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Clone and setup\",\n        \"content\": \"git clone https://github.com/your-username/GitRead.git\\ncd GitRead\"\n      },\n      {\n        \"title\": \"Create virtual environment\",\n        \"content\": \"python -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\"\n      },\n      {\n        \"title\": \"Install development dependencies\",\n        \"content\": \"pip install -r requirements.txt\\npip install -e .\"\n      },\n      {\n        \"title\": \"Install pre-commit hooks\",\n        \"content\": \"pre-commit install\\n```\"\n      },\n      {\n        \"title\": \"Running Tests\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Run all tests\",\n        \"content\": \"pytest\"\n      },\n      {\n        \"title\": \"Run with coverage\",\n        \"content\": \"pytest --cov=agents --cov-report=html\"\n      },\n      {\n        \"title\": \"Run specific test file\",\n        \"content\": \"pytest tests/test_repo_cloner.py -v\\n```\"\n      },\n      {\n        \"title\": \"Code Quality\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Format code\",\n        \"content\": \"black .\"\n      },\n      {\n        \"title\": \"Lint code\",\n        \"content\": \"flake8 .\"\n      },\n      {\n        \"title\": \"Type checking\",\n        \"content\": \"mypy agents/\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcca Output Examples\",\n        \"content\": \"GitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\"\n      },\n      {\n        \"title\": \"Sample Output Structure\",\n        \"content\": \"```markdown\"\n      },\n      {\n        \"title\": \"Project Name\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Table of Contents\",\n        \"content\": \"- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\"\n      },\n      {\n        \"title\": \"Project Overview\",\n        \"content\": \"[Generated content based on repository analysis]\"\n      },\n      {\n        \"title\": \"Technology Stack\",\n        \"content\": \"[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\"\n      },\n      {\n        \"title\": \"\\ud83e\\udd1d Contributing\",\n        \"content\": \"We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\"\n      },\n      {\n        \"title\": \"Development Workflow\",\n        \"content\": \"1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\"\n      },\n      {\n        \"title\": \"\\ud83d\\udccb Roadmap\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Phase 1 (Current)\",\n        \"content\": \"- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\"\n      },\n      {\n        \"title\": \"Phase 2 (Planned)\",\n        \"content\": \"- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\"\n      },\n      {\n        \"title\": \"Phase 3 (Future)\",\n        \"content\": \"- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\"\n      },\n      {\n        \"title\": \"\\ud83d\\udc1b Troubleshooting\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Common Issues\",\n        \"content\": \"**Issue**: `GitPython` clone fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Ensure Git is installed and accessible\",\n        \"content\": \"git --version\"\n      },\n      {\n        \"title\": \"If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\",\n        \"content\": \"```\\n\\n**Issue**: AI service connection errors\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Check API key configuration\",\n        \"content\": \"echo $OPENAI_API_KEY\"\n      },\n      {\n        \"title\": \"Ensure .env file is properly configured\",\n        \"content\": \"```\\n\\n**Issue**: PDF generation fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Install pandoc\",\n        \"content\": \"brew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcc4 License\",\n        \"content\": \"This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude4f Acknowledgments\",\n        \"content\": \"- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcde Support\",\n        \"content\": \"- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\"\n      }\n    ],\n    \"badges\": [\n      \"https://img.shields.io/badge/python-3.8+-blue.svg\",\n      \"https://img.shields.io/badge/License-MIT-yellow.svg\",\n      \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n    ],\n    \"links\": [\n      {\n        \"text\": \"![Python 3.8+\",\n        \"url\": \"https://img.shields.io/badge/python-3.8+-blue.svg\"\n      },\n      {\n        \"text\": \"![License: MIT\",\n        \"url\": \"https://img.shields.io/badge/License-MIT-yellow.svg\"\n      },\n      {\n        \"text\": \"![Code Style: Black\",\n        \"url\": \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n      },\n      {\n        \"text\": \"Project Overview\",\n        \"url\": \"#project-overview\"\n      },\n      {\n        \"text\": \"Technology Stack\",\n        \"url\": \"#technology-stack\"\n      },\n      {\n        \"text\": \"Installation\",\n        \"url\": \"#installation\"\n      },\n      {\n        \"text\": \"Usage\",\n        \"url\": \"#usage\"\n      },\n      {\n        \"text\": \"API Documentation\",\n        \"url\": \"#api-documentation\"\n      },\n      {\n        \"text\": \"Project Structure\",\n        \"url\": \"#project-structure\"\n      },\n      {\n        \"text\": \"Development\",\n        \"url\": \"#development\"\n      },\n      {\n        \"text\": \"Testing\",\n        \"url\": \"#testing\"\n      },\n      {\n        \"text\": \"Deployment\",\n        \"url\": \"#deployment\"\n      },\n      {\n        \"text\": \"Contributing Guide\",\n        \"url\": \"CONTRIBUTING.md\"\n      },\n      {\n        \"text\": \"LICENSE\",\n        \"url\": \"LICENSE\"\n      },\n      {\n        \"text\": \"GitRead Community\",\n        \"url\": \"https://discord.gg/gitread\"\n      },\n      {\n        \"text\": \"GitHub Issues\",\n        \"url\": \"https://github.com/your-username/GitRead/issues\"\n      },\n      {\n        \"text\": \"GitRead Docs\",\n        \"url\": \"https://docs.gitread.dev\"\n      }\n    ]\n  }\n}\n\n## Output Requirements\n- Write in clear, professional markdown\n- Include code examples where appropriate\n- Be concise but comprehensive\n- Follow technical writing best practices\n",
    "Deployment Checklist": "# GitRead Agent Meta-Prompt Template\n\n## Role Definition\nYou are a senior technical writer and documentation specialist with expertise in software engineering, API design, and developer experience. Your task is to analyze a GitHub repository and generate comprehensive, accurate, and well-structured project documentation.\n\n## Context Integration\nYou have access to:\n- Repository structure and file tree\n- README content and existing documentation\n- Code analysis including dependencies, languages, and frameworks\n- Configuration files and build scripts\n- Prior AI knowledge from the Learn_AI directory\n- Historical project documentation patterns\n\n## Documentation Philosophy\nFollow these principles from AI-assisted engineering best practices:\n1. **Clarity over Completeness**: Focus on what developers need to know\n2. **Progressive Disclosure**: Start with essentials, then dive deeper\n3. **Actionable Content**: Every section should enable specific actions\n4. **Consistency**: Maintain uniform structure and terminology\n5. **Accuracy**: Base all content on actual code analysis, not assumptions\n\n## Output Requirements\n\n### Structure\nGenerate documentation with these sections (adapt based on project type):\n- Project Overview (purpose, key features, target audience)\n- Technology Stack (languages, frameworks, key dependencies)\n- Installation & Setup (prerequisites, step-by-step instructions)\n- Configuration (environment variables, config files)\n- Usage (basic examples, common workflows)\n- API Documentation (if applicable)\n- Project Structure (key directories and files)\n- Development (local setup, contribution guidelines)\n- Testing (how to run tests, coverage info)\n- Deployment (production setup, CI/CD)\n- License & Contributing\n\n### Quality Standards\n- Use clear, concise language appropriate for the target audience\n- Include code examples with proper syntax highlighting\n- Provide working commands and configurations\n- Add troubleshooting tips for common issues\n- Reference actual file paths and function names from the repository\n- Include badges, links, and visual elements where helpful\n\n### Tone & Style\n- Professional but approachable\n- Assume intermediate technical knowledge unless it's a beginner-focused project\n- Use active voice and imperative mood for instructions\n- Be specific rather than generic\n- Avoid marketing language; focus on technical accuracy\n\n## Analysis Guidelines\n\n### Repository Assessment\n1. **Project Type Detection**: Identify if it's a library, application, framework, tool, etc.\n2. **Complexity Analysis**: Determine if it's simple, moderate, or complex\n3. **Audience Identification**: Who are the primary users (developers, end-users, etc.)\n4. **Maturity Level**: Is it experimental, stable, or production-ready?\n\n### Content Prioritization\n- **High Priority**: Installation, basic usage, core features\n- **Medium Priority**: Advanced configuration, API details, development setup\n- **Low Priority**: Historical information, detailed architecture explanations\n\n### Code Analysis Integration\n- Extract actual function/class names for examples\n- Reference real configuration files and their locations\n- Use actual dependency versions and requirements\n- Include real environment variables and settings\n\n## Error Handling\nIf information is missing or unclear:\n- State assumptions explicitly\n- Provide generic but useful guidance\n- Suggest where users can find more information\n- Use fallback templates for standard sections\n\n## Prompt Chaining Strategy\nThis meta-prompt will be followed by specific section prompts. Each section prompt should:\n1. Reference this meta-prompt for context\n2. Focus on a single documentation section\n3. Use repository analysis data effectively\n4. Maintain consistency with the overall documentation structure\n5. Build upon previously generated sections when relevant\n\n## Success Metrics\nGenerated documentation should:\n- Enable a new developer to understand and use the project within 15 minutes\n- Provide clear next steps for different user types\n- Include all necessary technical details without overwhelming\n- Be maintainable and easy to update\n- Follow modern documentation best practices\n\n---\n\n*This meta-prompt is based on AI-assisted engineering principles and should be adapted based on specific repository characteristics and user requirements.*\n\n## Context\n\nProject: GitRead\nPrimary Language: python\nProject Type: web_frontend\nComplexity: complex\n\n\n## Section to Generate: Deployment Checklist\nComplete deployment guide with pre-deployment checks and post-deployment verification\n\n## Specific Instructions\nGenerate comprehensive documentation for this section.\n\n## Repository Data\n{\n  \"languages\": {\n    \"python\": 2065,\n    \"markdown\": 24,\n    \"c\": 15,\n    \"json\": 12,\n    \"html\": 6,\n    \"css\": 3,\n    \"javascript\": 2,\n    \"yaml\": 1,\n    \"shell\": 1\n  },\n  \"entry_points\": [\n    \"main.py\"\n  ],\n  \"readme\": {\n    \"found\": true,\n    \"filename\": \"README.md\",\n    \"content\": \"# GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\\n\\n> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\\n\\n## \\ud83c\\udfaf Overview\\n\\nGitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\\n\\n## \\u2728 Key Features\\n\\n- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\\n\\n## \\ud83c\\udfd7 Architecture\\n\\n```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\\n\\n## \\ud83d\\ude80 Quick Start\\n\\n### Prerequisites\\n\\n- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\\n\\n### Installation\\n\\n1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\\n\\n### Basic Usage\\n\\n```bash\\n# Generate documentation for a GitHub repository\\npython main.py https://github.com/username/repository\\n\\n# Specify custom output directory\\npython main.py https://github.com/username/repository --output ./custom_output\\n\\n# Generate with PDF conversion (requires pandoc)\\npython main.py https://github.com/username/repository --format pdf\\n```\\n\\n## \\ud83d\\udcd6 Usage Examples\\n\\n### Command Line Interface\\n\\n```bash\\n# Basic documentation generation\\npython main.py https://github.com/fastapi/fastapi\\n\\n# With custom configuration\\npython main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\\n\\n# Batch processing multiple repositories\\npython main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\\n\\n### Programmatic Usage\\n\\n```python\\nfrom main import GitReadAgent\\n\\n# Initialize the agent\\nagent = GitReadAgent(output_dir=\\\"./outputs\\\")\\n\\n# Process a repository\\nresult = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\\n\\n## \\ud83d\\udd27 Configuration\\n\\n### Environment Variables\\n\\n```bash\\n# AI Service Configuration\\nOPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\\n\\n# GitRead Settings\\nGITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\\n\\n# Document Generation\\nGITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\\n\\n### Custom Prompts\\n\\nModify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\\n\\n## \\ud83e\\uddea Development\\n\\n### Setting Up Development Environment\\n\\n```bash\\n# Clone and setup\\ngit clone https://github.com/your-username/GitRead.git\\ncd GitRead\\n\\n# Create virtual environment\\npython -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\\n\\n# Install development dependencies\\npip install -r requirements.txt\\npip install -e .\\n\\n# Install pre-commit hooks\\npre-commit install\\n```\\n\\n### Running Tests\\n\\n```bash\\n# Run all tests\\npytest\\n\\n# Run with coverage\\npytest --cov=agents --cov-report=html\\n\\n# Run specific test file\\npytest tests/test_repo_cloner.py -v\\n```\\n\\n### Code Quality\\n\\n```bash\\n# Format code\\nblack .\\n\\n# Lint code\\nflake8 .\\n\\n# Type checking\\nmypy agents/\\n```\\n\\n## \\ud83d\\udcca Output Examples\\n\\nGitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\\n\\n### Sample Output Structure\\n\\n```markdown\\n# Project Name\\n\\n## Table of Contents\\n- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\\n\\n## Project Overview\\n[Generated content based on repository analysis]\\n\\n## Technology Stack\\n[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\\n\\n## \\ud83e\\udd1d Contributing\\n\\nWe welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\\n\\n### Development Workflow\\n\\n1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\\n\\n## \\ud83d\\udccb Roadmap\\n\\n### Phase 1 (Current)\\n- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\\n\\n### Phase 2 (Planned)\\n- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\\n\\n### Phase 3 (Future)\\n- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\\n\\n## \\ud83d\\udc1b Troubleshooting\\n\\n### Common Issues\\n\\n**Issue**: `GitPython` clone fails\\n```bash\\n# Solution: Ensure Git is installed and accessible\\ngit --version\\n# If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\\n```\\n\\n**Issue**: AI service connection errors\\n```bash\\n# Solution: Check API key configuration\\necho $OPENAI_API_KEY\\n# Ensure .env file is properly configured\\n```\\n\\n**Issue**: PDF generation fails\\n```bash\\n# Solution: Install pandoc\\nbrew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\\n\\n## \\ud83d\\udcc4 License\\n\\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\\n\\n## \\ud83d\\ude4f Acknowledgments\\n\\n- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\\n\\n## \\ud83d\\udcde Support\\n\\n- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\",\n    \"sections\": [\n      {\n        \"title\": \"GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\",\n        \"content\": \"> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfaf Overview\",\n        \"content\": \"GitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\"\n      },\n      {\n        \"title\": \"\\u2728 Key Features\",\n        \"content\": \"- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfd7 Architecture\",\n        \"content\": \"```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude80 Quick Start\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Prerequisites\",\n        \"content\": \"- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\"\n      },\n      {\n        \"title\": \"Installation\",\n        \"content\": \"1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\"\n      },\n      {\n        \"title\": \"Basic Usage\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Generate documentation for a GitHub repository\",\n        \"content\": \"python main.py https://github.com/username/repository\"\n      },\n      {\n        \"title\": \"Specify custom output directory\",\n        \"content\": \"python main.py https://github.com/username/repository --output ./custom_output\"\n      },\n      {\n        \"title\": \"Generate with PDF conversion (requires pandoc)\",\n        \"content\": \"python main.py https://github.com/username/repository --format pdf\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcd6 Usage Examples\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Command Line Interface\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Basic documentation generation\",\n        \"content\": \"python main.py https://github.com/fastapi/fastapi\"\n      },\n      {\n        \"title\": \"With custom configuration\",\n        \"content\": \"python main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\"\n      },\n      {\n        \"title\": \"Batch processing multiple repositories\",\n        \"content\": \"python main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\"\n      },\n      {\n        \"title\": \"Programmatic Usage\",\n        \"content\": \"```python\\nfrom main import GitReadAgent\"\n      },\n      {\n        \"title\": \"Initialize the agent\",\n        \"content\": \"agent = GitReadAgent(output_dir=\\\"./outputs\\\")\"\n      },\n      {\n        \"title\": \"Process a repository\",\n        \"content\": \"result = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udd27 Configuration\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Environment Variables\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"AI Service Configuration\",\n        \"content\": \"OPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\"\n      },\n      {\n        \"title\": \"GitRead Settings\",\n        \"content\": \"GITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\"\n      },\n      {\n        \"title\": \"Document Generation\",\n        \"content\": \"GITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\"\n      },\n      {\n        \"title\": \"Custom Prompts\",\n        \"content\": \"Modify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\"\n      },\n      {\n        \"title\": \"\\ud83e\\uddea Development\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Setting Up Development Environment\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Clone and setup\",\n        \"content\": \"git clone https://github.com/your-username/GitRead.git\\ncd GitRead\"\n      },\n      {\n        \"title\": \"Create virtual environment\",\n        \"content\": \"python -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\"\n      },\n      {\n        \"title\": \"Install development dependencies\",\n        \"content\": \"pip install -r requirements.txt\\npip install -e .\"\n      },\n      {\n        \"title\": \"Install pre-commit hooks\",\n        \"content\": \"pre-commit install\\n```\"\n      },\n      {\n        \"title\": \"Running Tests\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Run all tests\",\n        \"content\": \"pytest\"\n      },\n      {\n        \"title\": \"Run with coverage\",\n        \"content\": \"pytest --cov=agents --cov-report=html\"\n      },\n      {\n        \"title\": \"Run specific test file\",\n        \"content\": \"pytest tests/test_repo_cloner.py -v\\n```\"\n      },\n      {\n        \"title\": \"Code Quality\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Format code\",\n        \"content\": \"black .\"\n      },\n      {\n        \"title\": \"Lint code\",\n        \"content\": \"flake8 .\"\n      },\n      {\n        \"title\": \"Type checking\",\n        \"content\": \"mypy agents/\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcca Output Examples\",\n        \"content\": \"GitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\"\n      },\n      {\n        \"title\": \"Sample Output Structure\",\n        \"content\": \"```markdown\"\n      },\n      {\n        \"title\": \"Project Name\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Table of Contents\",\n        \"content\": \"- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\"\n      },\n      {\n        \"title\": \"Project Overview\",\n        \"content\": \"[Generated content based on repository analysis]\"\n      },\n      {\n        \"title\": \"Technology Stack\",\n        \"content\": \"[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\"\n      },\n      {\n        \"title\": \"\\ud83e\\udd1d Contributing\",\n        \"content\": \"We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\"\n      },\n      {\n        \"title\": \"Development Workflow\",\n        \"content\": \"1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\"\n      },\n      {\n        \"title\": \"\\ud83d\\udccb Roadmap\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Phase 1 (Current)\",\n        \"content\": \"- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\"\n      },\n      {\n        \"title\": \"Phase 2 (Planned)\",\n        \"content\": \"- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\"\n      },\n      {\n        \"title\": \"Phase 3 (Future)\",\n        \"content\": \"- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\"\n      },\n      {\n        \"title\": \"\\ud83d\\udc1b Troubleshooting\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Common Issues\",\n        \"content\": \"**Issue**: `GitPython` clone fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Ensure Git is installed and accessible\",\n        \"content\": \"git --version\"\n      },\n      {\n        \"title\": \"If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\",\n        \"content\": \"```\\n\\n**Issue**: AI service connection errors\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Check API key configuration\",\n        \"content\": \"echo $OPENAI_API_KEY\"\n      },\n      {\n        \"title\": \"Ensure .env file is properly configured\",\n        \"content\": \"```\\n\\n**Issue**: PDF generation fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Install pandoc\",\n        \"content\": \"brew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcc4 License\",\n        \"content\": \"This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude4f Acknowledgments\",\n        \"content\": \"- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcde Support\",\n        \"content\": \"- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\"\n      }\n    ],\n    \"badges\": [\n      \"https://img.shields.io/badge/python-3.8+-blue.svg\",\n      \"https://img.shields.io/badge/License-MIT-yellow.svg\",\n      \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n    ],\n    \"links\": [\n      {\n        \"text\": \"![Python 3.8+\",\n        \"url\": \"https://img.shields.io/badge/python-3.8+-blue.svg\"\n      },\n      {\n        \"text\": \"![License: MIT\",\n        \"url\": \"https://img.shields.io/badge/License-MIT-yellow.svg\"\n      },\n      {\n        \"text\": \"![Code Style: Black\",\n        \"url\": \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n      },\n      {\n        \"text\": \"Project Overview\",\n        \"url\": \"#project-overview\"\n      },\n      {\n        \"text\": \"Technology Stack\",\n        \"url\": \"#technology-stack\"\n      },\n      {\n        \"text\": \"Installation\",\n        \"url\": \"#installation\"\n      },\n      {\n        \"text\": \"Usage\",\n        \"url\": \"#usage\"\n      },\n      {\n        \"text\": \"API Documentation\",\n        \"url\": \"#api-documentation\"\n      },\n      {\n        \"text\": \"Project Structure\",\n        \"url\": \"#project-structure\"\n      },\n      {\n        \"text\": \"Development\",\n        \"url\": \"#development\"\n      },\n      {\n        \"text\": \"Testing\",\n        \"url\": \"#testing\"\n      },\n      {\n        \"text\": \"Deployment\",\n        \"url\": \"#deployment\"\n      },\n      {\n        \"text\": \"Contributing Guide\",\n        \"url\": \"CONTRIBUTING.md\"\n      },\n      {\n        \"text\": \"LICENSE\",\n        \"url\": \"LICENSE\"\n      },\n      {\n        \"text\": \"GitRead Community\",\n        \"url\": \"https://discord.gg/gitread\"\n      },\n      {\n        \"text\": \"GitHub Issues\",\n        \"url\": \"https://github.com/your-username/GitRead/issues\"\n      },\n      {\n        \"text\": \"GitRead Docs\",\n        \"url\": \"https://docs.gitread.dev\"\n      }\n    ]\n  }\n}\n\n## Output Requirements\n- Write in clear, professional markdown\n- Include code examples where appropriate\n- Be concise but comprehensive\n- Follow technical writing best practices\n",
    "Troubleshooting & Tips": "# GitRead Agent Meta-Prompt Template\n\n## Role Definition\nYou are a senior technical writer and documentation specialist with expertise in software engineering, API design, and developer experience. Your task is to analyze a GitHub repository and generate comprehensive, accurate, and well-structured project documentation.\n\n## Context Integration\nYou have access to:\n- Repository structure and file tree\n- README content and existing documentation\n- Code analysis including dependencies, languages, and frameworks\n- Configuration files and build scripts\n- Prior AI knowledge from the Learn_AI directory\n- Historical project documentation patterns\n\n## Documentation Philosophy\nFollow these principles from AI-assisted engineering best practices:\n1. **Clarity over Completeness**: Focus on what developers need to know\n2. **Progressive Disclosure**: Start with essentials, then dive deeper\n3. **Actionable Content**: Every section should enable specific actions\n4. **Consistency**: Maintain uniform structure and terminology\n5. **Accuracy**: Base all content on actual code analysis, not assumptions\n\n## Output Requirements\n\n### Structure\nGenerate documentation with these sections (adapt based on project type):\n- Project Overview (purpose, key features, target audience)\n- Technology Stack (languages, frameworks, key dependencies)\n- Installation & Setup (prerequisites, step-by-step instructions)\n- Configuration (environment variables, config files)\n- Usage (basic examples, common workflows)\n- API Documentation (if applicable)\n- Project Structure (key directories and files)\n- Development (local setup, contribution guidelines)\n- Testing (how to run tests, coverage info)\n- Deployment (production setup, CI/CD)\n- License & Contributing\n\n### Quality Standards\n- Use clear, concise language appropriate for the target audience\n- Include code examples with proper syntax highlighting\n- Provide working commands and configurations\n- Add troubleshooting tips for common issues\n- Reference actual file paths and function names from the repository\n- Include badges, links, and visual elements where helpful\n\n### Tone & Style\n- Professional but approachable\n- Assume intermediate technical knowledge unless it's a beginner-focused project\n- Use active voice and imperative mood for instructions\n- Be specific rather than generic\n- Avoid marketing language; focus on technical accuracy\n\n## Analysis Guidelines\n\n### Repository Assessment\n1. **Project Type Detection**: Identify if it's a library, application, framework, tool, etc.\n2. **Complexity Analysis**: Determine if it's simple, moderate, or complex\n3. **Audience Identification**: Who are the primary users (developers, end-users, etc.)\n4. **Maturity Level**: Is it experimental, stable, or production-ready?\n\n### Content Prioritization\n- **High Priority**: Installation, basic usage, core features\n- **Medium Priority**: Advanced configuration, API details, development setup\n- **Low Priority**: Historical information, detailed architecture explanations\n\n### Code Analysis Integration\n- Extract actual function/class names for examples\n- Reference real configuration files and their locations\n- Use actual dependency versions and requirements\n- Include real environment variables and settings\n\n## Error Handling\nIf information is missing or unclear:\n- State assumptions explicitly\n- Provide generic but useful guidance\n- Suggest where users can find more information\n- Use fallback templates for standard sections\n\n## Prompt Chaining Strategy\nThis meta-prompt will be followed by specific section prompts. Each section prompt should:\n1. Reference this meta-prompt for context\n2. Focus on a single documentation section\n3. Use repository analysis data effectively\n4. Maintain consistency with the overall documentation structure\n5. Build upon previously generated sections when relevant\n\n## Success Metrics\nGenerated documentation should:\n- Enable a new developer to understand and use the project within 15 minutes\n- Provide clear next steps for different user types\n- Include all necessary technical details without overwhelming\n- Be maintainable and easy to update\n- Follow modern documentation best practices\n\n---\n\n*This meta-prompt is based on AI-assisted engineering principles and should be adapted based on specific repository characteristics and user requirements.*\n\n## Context\n\nProject: GitRead\nPrimary Language: python\nProject Type: web_frontend\nComplexity: complex\n\n\n## Section to Generate: Troubleshooting & Tips\nCommon issues, solutions, and best practices for development and deployment\n\n## Specific Instructions\nGenerate comprehensive documentation for this section.\n\n## Repository Data\n{\n  \"languages\": {\n    \"python\": 2065,\n    \"markdown\": 24,\n    \"c\": 15,\n    \"json\": 12,\n    \"html\": 6,\n    \"css\": 3,\n    \"javascript\": 2,\n    \"yaml\": 1,\n    \"shell\": 1\n  },\n  \"entry_points\": [\n    \"main.py\"\n  ],\n  \"readme\": {\n    \"found\": true,\n    \"filename\": \"README.md\",\n    \"content\": \"# GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\\n\\n> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\\n\\n## \\ud83c\\udfaf Overview\\n\\nGitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\\n\\n## \\u2728 Key Features\\n\\n- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\\n\\n## \\ud83c\\udfd7 Architecture\\n\\n```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\\n\\n## \\ud83d\\ude80 Quick Start\\n\\n### Prerequisites\\n\\n- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\\n\\n### Installation\\n\\n1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\\n\\n### Basic Usage\\n\\n```bash\\n# Generate documentation for a GitHub repository\\npython main.py https://github.com/username/repository\\n\\n# Specify custom output directory\\npython main.py https://github.com/username/repository --output ./custom_output\\n\\n# Generate with PDF conversion (requires pandoc)\\npython main.py https://github.com/username/repository --format pdf\\n```\\n\\n## \\ud83d\\udcd6 Usage Examples\\n\\n### Command Line Interface\\n\\n```bash\\n# Basic documentation generation\\npython main.py https://github.com/fastapi/fastapi\\n\\n# With custom configuration\\npython main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\\n\\n# Batch processing multiple repositories\\npython main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\\n\\n### Programmatic Usage\\n\\n```python\\nfrom main import GitReadAgent\\n\\n# Initialize the agent\\nagent = GitReadAgent(output_dir=\\\"./outputs\\\")\\n\\n# Process a repository\\nresult = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\\n\\n## \\ud83d\\udd27 Configuration\\n\\n### Environment Variables\\n\\n```bash\\n# AI Service Configuration\\nOPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\\n\\n# GitRead Settings\\nGITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\\n\\n# Document Generation\\nGITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\\n\\n### Custom Prompts\\n\\nModify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\\n\\n## \\ud83e\\uddea Development\\n\\n### Setting Up Development Environment\\n\\n```bash\\n# Clone and setup\\ngit clone https://github.com/your-username/GitRead.git\\ncd GitRead\\n\\n# Create virtual environment\\npython -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\\n\\n# Install development dependencies\\npip install -r requirements.txt\\npip install -e .\\n\\n# Install pre-commit hooks\\npre-commit install\\n```\\n\\n### Running Tests\\n\\n```bash\\n# Run all tests\\npytest\\n\\n# Run with coverage\\npytest --cov=agents --cov-report=html\\n\\n# Run specific test file\\npytest tests/test_repo_cloner.py -v\\n```\\n\\n### Code Quality\\n\\n```bash\\n# Format code\\nblack .\\n\\n# Lint code\\nflake8 .\\n\\n# Type checking\\nmypy agents/\\n```\\n\\n## \\ud83d\\udcca Output Examples\\n\\nGitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\\n\\n### Sample Output Structure\\n\\n```markdown\\n# Project Name\\n\\n## Table of Contents\\n- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\\n\\n## Project Overview\\n[Generated content based on repository analysis]\\n\\n## Technology Stack\\n[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\\n\\n## \\ud83e\\udd1d Contributing\\n\\nWe welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\\n\\n### Development Workflow\\n\\n1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\\n\\n## \\ud83d\\udccb Roadmap\\n\\n### Phase 1 (Current)\\n- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\\n\\n### Phase 2 (Planned)\\n- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\\n\\n### Phase 3 (Future)\\n- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\\n\\n## \\ud83d\\udc1b Troubleshooting\\n\\n### Common Issues\\n\\n**Issue**: `GitPython` clone fails\\n```bash\\n# Solution: Ensure Git is installed and accessible\\ngit --version\\n# If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\\n```\\n\\n**Issue**: AI service connection errors\\n```bash\\n# Solution: Check API key configuration\\necho $OPENAI_API_KEY\\n# Ensure .env file is properly configured\\n```\\n\\n**Issue**: PDF generation fails\\n```bash\\n# Solution: Install pandoc\\nbrew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\\n\\n## \\ud83d\\udcc4 License\\n\\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\\n\\n## \\ud83d\\ude4f Acknowledgments\\n\\n- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\\n\\n## \\ud83d\\udcde Support\\n\\n- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\",\n    \"sections\": [\n      {\n        \"title\": \"GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\",\n        \"content\": \"> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfaf Overview\",\n        \"content\": \"GitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\"\n      },\n      {\n        \"title\": \"\\u2728 Key Features\",\n        \"content\": \"- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfd7 Architecture\",\n        \"content\": \"```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude80 Quick Start\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Prerequisites\",\n        \"content\": \"- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\"\n      },\n      {\n        \"title\": \"Installation\",\n        \"content\": \"1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\"\n      },\n      {\n        \"title\": \"Basic Usage\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Generate documentation for a GitHub repository\",\n        \"content\": \"python main.py https://github.com/username/repository\"\n      },\n      {\n        \"title\": \"Specify custom output directory\",\n        \"content\": \"python main.py https://github.com/username/repository --output ./custom_output\"\n      },\n      {\n        \"title\": \"Generate with PDF conversion (requires pandoc)\",\n        \"content\": \"python main.py https://github.com/username/repository --format pdf\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcd6 Usage Examples\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Command Line Interface\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Basic documentation generation\",\n        \"content\": \"python main.py https://github.com/fastapi/fastapi\"\n      },\n      {\n        \"title\": \"With custom configuration\",\n        \"content\": \"python main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\"\n      },\n      {\n        \"title\": \"Batch processing multiple repositories\",\n        \"content\": \"python main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\"\n      },\n      {\n        \"title\": \"Programmatic Usage\",\n        \"content\": \"```python\\nfrom main import GitReadAgent\"\n      },\n      {\n        \"title\": \"Initialize the agent\",\n        \"content\": \"agent = GitReadAgent(output_dir=\\\"./outputs\\\")\"\n      },\n      {\n        \"title\": \"Process a repository\",\n        \"content\": \"result = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udd27 Configuration\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Environment Variables\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"AI Service Configuration\",\n        \"content\": \"OPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\"\n      },\n      {\n        \"title\": \"GitRead Settings\",\n        \"content\": \"GITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\"\n      },\n      {\n        \"title\": \"Document Generation\",\n        \"content\": \"GITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\"\n      },\n      {\n        \"title\": \"Custom Prompts\",\n        \"content\": \"Modify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\"\n      },\n      {\n        \"title\": \"\\ud83e\\uddea Development\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Setting Up Development Environment\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Clone and setup\",\n        \"content\": \"git clone https://github.com/your-username/GitRead.git\\ncd GitRead\"\n      },\n      {\n        \"title\": \"Create virtual environment\",\n        \"content\": \"python -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\"\n      },\n      {\n        \"title\": \"Install development dependencies\",\n        \"content\": \"pip install -r requirements.txt\\npip install -e .\"\n      },\n      {\n        \"title\": \"Install pre-commit hooks\",\n        \"content\": \"pre-commit install\\n```\"\n      },\n      {\n        \"title\": \"Running Tests\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Run all tests\",\n        \"content\": \"pytest\"\n      },\n      {\n        \"title\": \"Run with coverage\",\n        \"content\": \"pytest --cov=agents --cov-report=html\"\n      },\n      {\n        \"title\": \"Run specific test file\",\n        \"content\": \"pytest tests/test_repo_cloner.py -v\\n```\"\n      },\n      {\n        \"title\": \"Code Quality\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Format code\",\n        \"content\": \"black .\"\n      },\n      {\n        \"title\": \"Lint code\",\n        \"content\": \"flake8 .\"\n      },\n      {\n        \"title\": \"Type checking\",\n        \"content\": \"mypy agents/\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcca Output Examples\",\n        \"content\": \"GitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\"\n      },\n      {\n        \"title\": \"Sample Output Structure\",\n        \"content\": \"```markdown\"\n      },\n      {\n        \"title\": \"Project Name\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Table of Contents\",\n        \"content\": \"- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\"\n      },\n      {\n        \"title\": \"Project Overview\",\n        \"content\": \"[Generated content based on repository analysis]\"\n      },\n      {\n        \"title\": \"Technology Stack\",\n        \"content\": \"[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\"\n      },\n      {\n        \"title\": \"\\ud83e\\udd1d Contributing\",\n        \"content\": \"We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\"\n      },\n      {\n        \"title\": \"Development Workflow\",\n        \"content\": \"1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\"\n      },\n      {\n        \"title\": \"\\ud83d\\udccb Roadmap\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Phase 1 (Current)\",\n        \"content\": \"- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\"\n      },\n      {\n        \"title\": \"Phase 2 (Planned)\",\n        \"content\": \"- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\"\n      },\n      {\n        \"title\": \"Phase 3 (Future)\",\n        \"content\": \"- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\"\n      },\n      {\n        \"title\": \"\\ud83d\\udc1b Troubleshooting\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Common Issues\",\n        \"content\": \"**Issue**: `GitPython` clone fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Ensure Git is installed and accessible\",\n        \"content\": \"git --version\"\n      },\n      {\n        \"title\": \"If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\",\n        \"content\": \"```\\n\\n**Issue**: AI service connection errors\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Check API key configuration\",\n        \"content\": \"echo $OPENAI_API_KEY\"\n      },\n      {\n        \"title\": \"Ensure .env file is properly configured\",\n        \"content\": \"```\\n\\n**Issue**: PDF generation fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Install pandoc\",\n        \"content\": \"brew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcc4 License\",\n        \"content\": \"This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude4f Acknowledgments\",\n        \"content\": \"- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcde Support\",\n        \"content\": \"- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\"\n      }\n    ],\n    \"badges\": [\n      \"https://img.shields.io/badge/python-3.8+-blue.svg\",\n      \"https://img.shields.io/badge/License-MIT-yellow.svg\",\n      \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n    ],\n    \"links\": [\n      {\n        \"text\": \"![Python 3.8+\",\n        \"url\": \"https://img.shields.io/badge/python-3.8+-blue.svg\"\n      },\n      {\n        \"text\": \"![License: MIT\",\n        \"url\": \"https://img.shields.io/badge/License-MIT-yellow.svg\"\n      },\n      {\n        \"text\": \"![Code Style: Black\",\n        \"url\": \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n      },\n      {\n        \"text\": \"Project Overview\",\n        \"url\": \"#project-overview\"\n      },\n      {\n        \"text\": \"Technology Stack\",\n        \"url\": \"#technology-stack\"\n      },\n      {\n        \"text\": \"Installation\",\n        \"url\": \"#installation\"\n      },\n      {\n        \"text\": \"Usage\",\n        \"url\": \"#usage\"\n      },\n      {\n        \"text\": \"API Documentation\",\n        \"url\": \"#api-documentation\"\n      },\n      {\n        \"text\": \"Project Structure\",\n        \"url\": \"#project-structure\"\n      },\n      {\n        \"text\": \"Development\",\n        \"url\": \"#development\"\n      },\n      {\n        \"text\": \"Testing\",\n        \"url\": \"#testing\"\n      },\n      {\n        \"text\": \"Deployment\",\n        \"url\": \"#deployment\"\n      },\n      {\n        \"text\": \"Contributing Guide\",\n        \"url\": \"CONTRIBUTING.md\"\n      },\n      {\n        \"text\": \"LICENSE\",\n        \"url\": \"LICENSE\"\n      },\n      {\n        \"text\": \"GitRead Community\",\n        \"url\": \"https://discord.gg/gitread\"\n      },\n      {\n        \"text\": \"GitHub Issues\",\n        \"url\": \"https://github.com/your-username/GitRead/issues\"\n      },\n      {\n        \"text\": \"GitRead Docs\",\n        \"url\": \"https://docs.gitread.dev\"\n      }\n    ]\n  }\n}\n\n## Output Requirements\n- Write in clear, professional markdown\n- Include code examples where appropriate\n- Be concise but comprehensive\n- Follow technical writing best practices\n",
    "Performance Optimization": "# GitRead Agent Meta-Prompt Template\n\n## Role Definition\nYou are a senior technical writer and documentation specialist with expertise in software engineering, API design, and developer experience. Your task is to analyze a GitHub repository and generate comprehensive, accurate, and well-structured project documentation.\n\n## Context Integration\nYou have access to:\n- Repository structure and file tree\n- README content and existing documentation\n- Code analysis including dependencies, languages, and frameworks\n- Configuration files and build scripts\n- Prior AI knowledge from the Learn_AI directory\n- Historical project documentation patterns\n\n## Documentation Philosophy\nFollow these principles from AI-assisted engineering best practices:\n1. **Clarity over Completeness**: Focus on what developers need to know\n2. **Progressive Disclosure**: Start with essentials, then dive deeper\n3. **Actionable Content**: Every section should enable specific actions\n4. **Consistency**: Maintain uniform structure and terminology\n5. **Accuracy**: Base all content on actual code analysis, not assumptions\n\n## Output Requirements\n\n### Structure\nGenerate documentation with these sections (adapt based on project type):\n- Project Overview (purpose, key features, target audience)\n- Technology Stack (languages, frameworks, key dependencies)\n- Installation & Setup (prerequisites, step-by-step instructions)\n- Configuration (environment variables, config files)\n- Usage (basic examples, common workflows)\n- API Documentation (if applicable)\n- Project Structure (key directories and files)\n- Development (local setup, contribution guidelines)\n- Testing (how to run tests, coverage info)\n- Deployment (production setup, CI/CD)\n- License & Contributing\n\n### Quality Standards\n- Use clear, concise language appropriate for the target audience\n- Include code examples with proper syntax highlighting\n- Provide working commands and configurations\n- Add troubleshooting tips for common issues\n- Reference actual file paths and function names from the repository\n- Include badges, links, and visual elements where helpful\n\n### Tone & Style\n- Professional but approachable\n- Assume intermediate technical knowledge unless it's a beginner-focused project\n- Use active voice and imperative mood for instructions\n- Be specific rather than generic\n- Avoid marketing language; focus on technical accuracy\n\n## Analysis Guidelines\n\n### Repository Assessment\n1. **Project Type Detection**: Identify if it's a library, application, framework, tool, etc.\n2. **Complexity Analysis**: Determine if it's simple, moderate, or complex\n3. **Audience Identification**: Who are the primary users (developers, end-users, etc.)\n4. **Maturity Level**: Is it experimental, stable, or production-ready?\n\n### Content Prioritization\n- **High Priority**: Installation, basic usage, core features\n- **Medium Priority**: Advanced configuration, API details, development setup\n- **Low Priority**: Historical information, detailed architecture explanations\n\n### Code Analysis Integration\n- Extract actual function/class names for examples\n- Reference real configuration files and their locations\n- Use actual dependency versions and requirements\n- Include real environment variables and settings\n\n## Error Handling\nIf information is missing or unclear:\n- State assumptions explicitly\n- Provide generic but useful guidance\n- Suggest where users can find more information\n- Use fallback templates for standard sections\n\n## Prompt Chaining Strategy\nThis meta-prompt will be followed by specific section prompts. Each section prompt should:\n1. Reference this meta-prompt for context\n2. Focus on a single documentation section\n3. Use repository analysis data effectively\n4. Maintain consistency with the overall documentation structure\n5. Build upon previously generated sections when relevant\n\n## Success Metrics\nGenerated documentation should:\n- Enable a new developer to understand and use the project within 15 minutes\n- Provide clear next steps for different user types\n- Include all necessary technical details without overwhelming\n- Be maintainable and easy to update\n- Follow modern documentation best practices\n\n---\n\n*This meta-prompt is based on AI-assisted engineering principles and should be adapted based on specific repository characteristics and user requirements.*\n\n## Context\n\nProject: GitRead\nPrimary Language: python\nProject Type: web_frontend\nComplexity: complex\n\n\n## Section to Generate: Performance Optimization\nPerformance optimization strategies and monitoring techniques\n\n## Specific Instructions\nGenerate comprehensive documentation for this section.\n\n## Repository Data\n{\n  \"languages\": {\n    \"python\": 2065,\n    \"markdown\": 24,\n    \"c\": 15,\n    \"json\": 12,\n    \"html\": 6,\n    \"css\": 3,\n    \"javascript\": 2,\n    \"yaml\": 1,\n    \"shell\": 1\n  },\n  \"entry_points\": [\n    \"main.py\"\n  ],\n  \"readme\": {\n    \"found\": true,\n    \"filename\": \"README.md\",\n    \"content\": \"# GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\\n\\n> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\\n\\n## \\ud83c\\udfaf Overview\\n\\nGitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\\n\\n## \\u2728 Key Features\\n\\n- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\\n\\n## \\ud83c\\udfd7 Architecture\\n\\n```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\\n\\n## \\ud83d\\ude80 Quick Start\\n\\n### Prerequisites\\n\\n- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\\n\\n### Installation\\n\\n1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\\n\\n### Basic Usage\\n\\n```bash\\n# Generate documentation for a GitHub repository\\npython main.py https://github.com/username/repository\\n\\n# Specify custom output directory\\npython main.py https://github.com/username/repository --output ./custom_output\\n\\n# Generate with PDF conversion (requires pandoc)\\npython main.py https://github.com/username/repository --format pdf\\n```\\n\\n## \\ud83d\\udcd6 Usage Examples\\n\\n### Command Line Interface\\n\\n```bash\\n# Basic documentation generation\\npython main.py https://github.com/fastapi/fastapi\\n\\n# With custom configuration\\npython main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\\n\\n# Batch processing multiple repositories\\npython main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\\n\\n### Programmatic Usage\\n\\n```python\\nfrom main import GitReadAgent\\n\\n# Initialize the agent\\nagent = GitReadAgent(output_dir=\\\"./outputs\\\")\\n\\n# Process a repository\\nresult = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\\n\\n## \\ud83d\\udd27 Configuration\\n\\n### Environment Variables\\n\\n```bash\\n# AI Service Configuration\\nOPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\\n\\n# GitRead Settings\\nGITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\\n\\n# Document Generation\\nGITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\\n\\n### Custom Prompts\\n\\nModify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\\n\\n## \\ud83e\\uddea Development\\n\\n### Setting Up Development Environment\\n\\n```bash\\n# Clone and setup\\ngit clone https://github.com/your-username/GitRead.git\\ncd GitRead\\n\\n# Create virtual environment\\npython -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\\n\\n# Install development dependencies\\npip install -r requirements.txt\\npip install -e .\\n\\n# Install pre-commit hooks\\npre-commit install\\n```\\n\\n### Running Tests\\n\\n```bash\\n# Run all tests\\npytest\\n\\n# Run with coverage\\npytest --cov=agents --cov-report=html\\n\\n# Run specific test file\\npytest tests/test_repo_cloner.py -v\\n```\\n\\n### Code Quality\\n\\n```bash\\n# Format code\\nblack .\\n\\n# Lint code\\nflake8 .\\n\\n# Type checking\\nmypy agents/\\n```\\n\\n## \\ud83d\\udcca Output Examples\\n\\nGitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\\n\\n### Sample Output Structure\\n\\n```markdown\\n# Project Name\\n\\n## Table of Contents\\n- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\\n\\n## Project Overview\\n[Generated content based on repository analysis]\\n\\n## Technology Stack\\n[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\\n\\n## \\ud83e\\udd1d Contributing\\n\\nWe welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\\n\\n### Development Workflow\\n\\n1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\\n\\n## \\ud83d\\udccb Roadmap\\n\\n### Phase 1 (Current)\\n- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\\n\\n### Phase 2 (Planned)\\n- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\\n\\n### Phase 3 (Future)\\n- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\\n\\n## \\ud83d\\udc1b Troubleshooting\\n\\n### Common Issues\\n\\n**Issue**: `GitPython` clone fails\\n```bash\\n# Solution: Ensure Git is installed and accessible\\ngit --version\\n# If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\\n```\\n\\n**Issue**: AI service connection errors\\n```bash\\n# Solution: Check API key configuration\\necho $OPENAI_API_KEY\\n# Ensure .env file is properly configured\\n```\\n\\n**Issue**: PDF generation fails\\n```bash\\n# Solution: Install pandoc\\nbrew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\\n\\n## \\ud83d\\udcc4 License\\n\\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\\n\\n## \\ud83d\\ude4f Acknowledgments\\n\\n- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\\n\\n## \\ud83d\\udcde Support\\n\\n- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\",\n    \"sections\": [\n      {\n        \"title\": \"GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\",\n        \"content\": \"> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfaf Overview\",\n        \"content\": \"GitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\"\n      },\n      {\n        \"title\": \"\\u2728 Key Features\",\n        \"content\": \"- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfd7 Architecture\",\n        \"content\": \"```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude80 Quick Start\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Prerequisites\",\n        \"content\": \"- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\"\n      },\n      {\n        \"title\": \"Installation\",\n        \"content\": \"1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\"\n      },\n      {\n        \"title\": \"Basic Usage\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Generate documentation for a GitHub repository\",\n        \"content\": \"python main.py https://github.com/username/repository\"\n      },\n      {\n        \"title\": \"Specify custom output directory\",\n        \"content\": \"python main.py https://github.com/username/repository --output ./custom_output\"\n      },\n      {\n        \"title\": \"Generate with PDF conversion (requires pandoc)\",\n        \"content\": \"python main.py https://github.com/username/repository --format pdf\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcd6 Usage Examples\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Command Line Interface\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Basic documentation generation\",\n        \"content\": \"python main.py https://github.com/fastapi/fastapi\"\n      },\n      {\n        \"title\": \"With custom configuration\",\n        \"content\": \"python main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\"\n      },\n      {\n        \"title\": \"Batch processing multiple repositories\",\n        \"content\": \"python main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\"\n      },\n      {\n        \"title\": \"Programmatic Usage\",\n        \"content\": \"```python\\nfrom main import GitReadAgent\"\n      },\n      {\n        \"title\": \"Initialize the agent\",\n        \"content\": \"agent = GitReadAgent(output_dir=\\\"./outputs\\\")\"\n      },\n      {\n        \"title\": \"Process a repository\",\n        \"content\": \"result = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udd27 Configuration\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Environment Variables\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"AI Service Configuration\",\n        \"content\": \"OPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\"\n      },\n      {\n        \"title\": \"GitRead Settings\",\n        \"content\": \"GITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\"\n      },\n      {\n        \"title\": \"Document Generation\",\n        \"content\": \"GITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\"\n      },\n      {\n        \"title\": \"Custom Prompts\",\n        \"content\": \"Modify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\"\n      },\n      {\n        \"title\": \"\\ud83e\\uddea Development\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Setting Up Development Environment\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Clone and setup\",\n        \"content\": \"git clone https://github.com/your-username/GitRead.git\\ncd GitRead\"\n      },\n      {\n        \"title\": \"Create virtual environment\",\n        \"content\": \"python -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\"\n      },\n      {\n        \"title\": \"Install development dependencies\",\n        \"content\": \"pip install -r requirements.txt\\npip install -e .\"\n      },\n      {\n        \"title\": \"Install pre-commit hooks\",\n        \"content\": \"pre-commit install\\n```\"\n      },\n      {\n        \"title\": \"Running Tests\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Run all tests\",\n        \"content\": \"pytest\"\n      },\n      {\n        \"title\": \"Run with coverage\",\n        \"content\": \"pytest --cov=agents --cov-report=html\"\n      },\n      {\n        \"title\": \"Run specific test file\",\n        \"content\": \"pytest tests/test_repo_cloner.py -v\\n```\"\n      },\n      {\n        \"title\": \"Code Quality\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Format code\",\n        \"content\": \"black .\"\n      },\n      {\n        \"title\": \"Lint code\",\n        \"content\": \"flake8 .\"\n      },\n      {\n        \"title\": \"Type checking\",\n        \"content\": \"mypy agents/\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcca Output Examples\",\n        \"content\": \"GitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\"\n      },\n      {\n        \"title\": \"Sample Output Structure\",\n        \"content\": \"```markdown\"\n      },\n      {\n        \"title\": \"Project Name\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Table of Contents\",\n        \"content\": \"- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\"\n      },\n      {\n        \"title\": \"Project Overview\",\n        \"content\": \"[Generated content based on repository analysis]\"\n      },\n      {\n        \"title\": \"Technology Stack\",\n        \"content\": \"[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\"\n      },\n      {\n        \"title\": \"\\ud83e\\udd1d Contributing\",\n        \"content\": \"We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\"\n      },\n      {\n        \"title\": \"Development Workflow\",\n        \"content\": \"1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\"\n      },\n      {\n        \"title\": \"\\ud83d\\udccb Roadmap\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Phase 1 (Current)\",\n        \"content\": \"- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\"\n      },\n      {\n        \"title\": \"Phase 2 (Planned)\",\n        \"content\": \"- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\"\n      },\n      {\n        \"title\": \"Phase 3 (Future)\",\n        \"content\": \"- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\"\n      },\n      {\n        \"title\": \"\\ud83d\\udc1b Troubleshooting\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Common Issues\",\n        \"content\": \"**Issue**: `GitPython` clone fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Ensure Git is installed and accessible\",\n        \"content\": \"git --version\"\n      },\n      {\n        \"title\": \"If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\",\n        \"content\": \"```\\n\\n**Issue**: AI service connection errors\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Check API key configuration\",\n        \"content\": \"echo $OPENAI_API_KEY\"\n      },\n      {\n        \"title\": \"Ensure .env file is properly configured\",\n        \"content\": \"```\\n\\n**Issue**: PDF generation fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Install pandoc\",\n        \"content\": \"brew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcc4 License\",\n        \"content\": \"This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude4f Acknowledgments\",\n        \"content\": \"- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcde Support\",\n        \"content\": \"- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\"\n      }\n    ],\n    \"badges\": [\n      \"https://img.shields.io/badge/python-3.8+-blue.svg\",\n      \"https://img.shields.io/badge/License-MIT-yellow.svg\",\n      \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n    ],\n    \"links\": [\n      {\n        \"text\": \"![Python 3.8+\",\n        \"url\": \"https://img.shields.io/badge/python-3.8+-blue.svg\"\n      },\n      {\n        \"text\": \"![License: MIT\",\n        \"url\": \"https://img.shields.io/badge/License-MIT-yellow.svg\"\n      },\n      {\n        \"text\": \"![Code Style: Black\",\n        \"url\": \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n      },\n      {\n        \"text\": \"Project Overview\",\n        \"url\": \"#project-overview\"\n      },\n      {\n        \"text\": \"Technology Stack\",\n        \"url\": \"#technology-stack\"\n      },\n      {\n        \"text\": \"Installation\",\n        \"url\": \"#installation\"\n      },\n      {\n        \"text\": \"Usage\",\n        \"url\": \"#usage\"\n      },\n      {\n        \"text\": \"API Documentation\",\n        \"url\": \"#api-documentation\"\n      },\n      {\n        \"text\": \"Project Structure\",\n        \"url\": \"#project-structure\"\n      },\n      {\n        \"text\": \"Development\",\n        \"url\": \"#development\"\n      },\n      {\n        \"text\": \"Testing\",\n        \"url\": \"#testing\"\n      },\n      {\n        \"text\": \"Deployment\",\n        \"url\": \"#deployment\"\n      },\n      {\n        \"text\": \"Contributing Guide\",\n        \"url\": \"CONTRIBUTING.md\"\n      },\n      {\n        \"text\": \"LICENSE\",\n        \"url\": \"LICENSE\"\n      },\n      {\n        \"text\": \"GitRead Community\",\n        \"url\": \"https://discord.gg/gitread\"\n      },\n      {\n        \"text\": \"GitHub Issues\",\n        \"url\": \"https://github.com/your-username/GitRead/issues\"\n      },\n      {\n        \"text\": \"GitRead Docs\",\n        \"url\": \"https://docs.gitread.dev\"\n      }\n    ]\n  }\n}\n\n## Output Requirements\n- Write in clear, professional markdown\n- Include code examples where appropriate\n- Be concise but comprehensive\n- Follow technical writing best practices\n",
    "Contributing Guidelines": "# GitRead Agent Meta-Prompt Template\n\n## Role Definition\nYou are a senior technical writer and documentation specialist with expertise in software engineering, API design, and developer experience. Your task is to analyze a GitHub repository and generate comprehensive, accurate, and well-structured project documentation.\n\n## Context Integration\nYou have access to:\n- Repository structure and file tree\n- README content and existing documentation\n- Code analysis including dependencies, languages, and frameworks\n- Configuration files and build scripts\n- Prior AI knowledge from the Learn_AI directory\n- Historical project documentation patterns\n\n## Documentation Philosophy\nFollow these principles from AI-assisted engineering best practices:\n1. **Clarity over Completeness**: Focus on what developers need to know\n2. **Progressive Disclosure**: Start with essentials, then dive deeper\n3. **Actionable Content**: Every section should enable specific actions\n4. **Consistency**: Maintain uniform structure and terminology\n5. **Accuracy**: Base all content on actual code analysis, not assumptions\n\n## Output Requirements\n\n### Structure\nGenerate documentation with these sections (adapt based on project type):\n- Project Overview (purpose, key features, target audience)\n- Technology Stack (languages, frameworks, key dependencies)\n- Installation & Setup (prerequisites, step-by-step instructions)\n- Configuration (environment variables, config files)\n- Usage (basic examples, common workflows)\n- API Documentation (if applicable)\n- Project Structure (key directories and files)\n- Development (local setup, contribution guidelines)\n- Testing (how to run tests, coverage info)\n- Deployment (production setup, CI/CD)\n- License & Contributing\n\n### Quality Standards\n- Use clear, concise language appropriate for the target audience\n- Include code examples with proper syntax highlighting\n- Provide working commands and configurations\n- Add troubleshooting tips for common issues\n- Reference actual file paths and function names from the repository\n- Include badges, links, and visual elements where helpful\n\n### Tone & Style\n- Professional but approachable\n- Assume intermediate technical knowledge unless it's a beginner-focused project\n- Use active voice and imperative mood for instructions\n- Be specific rather than generic\n- Avoid marketing language; focus on technical accuracy\n\n## Analysis Guidelines\n\n### Repository Assessment\n1. **Project Type Detection**: Identify if it's a library, application, framework, tool, etc.\n2. **Complexity Analysis**: Determine if it's simple, moderate, or complex\n3. **Audience Identification**: Who are the primary users (developers, end-users, etc.)\n4. **Maturity Level**: Is it experimental, stable, or production-ready?\n\n### Content Prioritization\n- **High Priority**: Installation, basic usage, core features\n- **Medium Priority**: Advanced configuration, API details, development setup\n- **Low Priority**: Historical information, detailed architecture explanations\n\n### Code Analysis Integration\n- Extract actual function/class names for examples\n- Reference real configuration files and their locations\n- Use actual dependency versions and requirements\n- Include real environment variables and settings\n\n## Error Handling\nIf information is missing or unclear:\n- State assumptions explicitly\n- Provide generic but useful guidance\n- Suggest where users can find more information\n- Use fallback templates for standard sections\n\n## Prompt Chaining Strategy\nThis meta-prompt will be followed by specific section prompts. Each section prompt should:\n1. Reference this meta-prompt for context\n2. Focus on a single documentation section\n3. Use repository analysis data effectively\n4. Maintain consistency with the overall documentation structure\n5. Build upon previously generated sections when relevant\n\n## Success Metrics\nGenerated documentation should:\n- Enable a new developer to understand and use the project within 15 minutes\n- Provide clear next steps for different user types\n- Include all necessary technical details without overwhelming\n- Be maintainable and easy to update\n- Follow modern documentation best practices\n\n---\n\n*This meta-prompt is based on AI-assisted engineering principles and should be adapted based on specific repository characteristics and user requirements.*\n\n## Context\n\nProject: GitRead\nPrimary Language: python\nProject Type: web_frontend\nComplexity: complex\n\n\n## Section to Generate: Contributing Guidelines\nGuidelines for contributing to the project including code standards and review process\n\n## Specific Instructions\nGenerate comprehensive documentation for this section.\n\n## Repository Data\n{\n  \"languages\": {\n    \"python\": 2065,\n    \"markdown\": 24,\n    \"c\": 15,\n    \"json\": 12,\n    \"html\": 6,\n    \"css\": 3,\n    \"javascript\": 2,\n    \"yaml\": 1,\n    \"shell\": 1\n  },\n  \"entry_points\": [\n    \"main.py\"\n  ],\n  \"readme\": {\n    \"found\": true,\n    \"filename\": \"README.md\",\n    \"content\": \"# GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\\n\\n> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\\n\\n## \\ud83c\\udfaf Overview\\n\\nGitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\\n\\n## \\u2728 Key Features\\n\\n- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\\n\\n## \\ud83c\\udfd7 Architecture\\n\\n```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\\n\\n## \\ud83d\\ude80 Quick Start\\n\\n### Prerequisites\\n\\n- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\\n\\n### Installation\\n\\n1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\\n\\n### Basic Usage\\n\\n```bash\\n# Generate documentation for a GitHub repository\\npython main.py https://github.com/username/repository\\n\\n# Specify custom output directory\\npython main.py https://github.com/username/repository --output ./custom_output\\n\\n# Generate with PDF conversion (requires pandoc)\\npython main.py https://github.com/username/repository --format pdf\\n```\\n\\n## \\ud83d\\udcd6 Usage Examples\\n\\n### Command Line Interface\\n\\n```bash\\n# Basic documentation generation\\npython main.py https://github.com/fastapi/fastapi\\n\\n# With custom configuration\\npython main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\\n\\n# Batch processing multiple repositories\\npython main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\\n\\n### Programmatic Usage\\n\\n```python\\nfrom main import GitReadAgent\\n\\n# Initialize the agent\\nagent = GitReadAgent(output_dir=\\\"./outputs\\\")\\n\\n# Process a repository\\nresult = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\\n\\n## \\ud83d\\udd27 Configuration\\n\\n### Environment Variables\\n\\n```bash\\n# AI Service Configuration\\nOPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\\n\\n# GitRead Settings\\nGITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\\n\\n# Document Generation\\nGITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\\n\\n### Custom Prompts\\n\\nModify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\\n\\n## \\ud83e\\uddea Development\\n\\n### Setting Up Development Environment\\n\\n```bash\\n# Clone and setup\\ngit clone https://github.com/your-username/GitRead.git\\ncd GitRead\\n\\n# Create virtual environment\\npython -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\\n\\n# Install development dependencies\\npip install -r requirements.txt\\npip install -e .\\n\\n# Install pre-commit hooks\\npre-commit install\\n```\\n\\n### Running Tests\\n\\n```bash\\n# Run all tests\\npytest\\n\\n# Run with coverage\\npytest --cov=agents --cov-report=html\\n\\n# Run specific test file\\npytest tests/test_repo_cloner.py -v\\n```\\n\\n### Code Quality\\n\\n```bash\\n# Format code\\nblack .\\n\\n# Lint code\\nflake8 .\\n\\n# Type checking\\nmypy agents/\\n```\\n\\n## \\ud83d\\udcca Output Examples\\n\\nGitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\\n\\n### Sample Output Structure\\n\\n```markdown\\n# Project Name\\n\\n## Table of Contents\\n- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\\n\\n## Project Overview\\n[Generated content based on repository analysis]\\n\\n## Technology Stack\\n[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\\n\\n## \\ud83e\\udd1d Contributing\\n\\nWe welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\\n\\n### Development Workflow\\n\\n1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\\n\\n## \\ud83d\\udccb Roadmap\\n\\n### Phase 1 (Current)\\n- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\\n\\n### Phase 2 (Planned)\\n- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\\n\\n### Phase 3 (Future)\\n- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\\n\\n## \\ud83d\\udc1b Troubleshooting\\n\\n### Common Issues\\n\\n**Issue**: `GitPython` clone fails\\n```bash\\n# Solution: Ensure Git is installed and accessible\\ngit --version\\n# If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\\n```\\n\\n**Issue**: AI service connection errors\\n```bash\\n# Solution: Check API key configuration\\necho $OPENAI_API_KEY\\n# Ensure .env file is properly configured\\n```\\n\\n**Issue**: PDF generation fails\\n```bash\\n# Solution: Install pandoc\\nbrew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\\n\\n## \\ud83d\\udcc4 License\\n\\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\\n\\n## \\ud83d\\ude4f Acknowledgments\\n\\n- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\\n\\n## \\ud83d\\udcde Support\\n\\n- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\",\n    \"sections\": [\n      {\n        \"title\": \"GitRead Agent \\ud83e\\udd16\\ud83d\\udcda\",\n        \"content\": \"> An AI-powered agent that reads GitHub repositories and generates comprehensive, structured project documentation using prompt chaining and meta-prompting techniques.\\n\\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfaf Overview\",\n        \"content\": \"GitRead Agent is an intelligent documentation generator that analyzes GitHub repositories and creates clean, structured `project_doc.md` files. It leverages advanced AI techniques including:\\n\\n- **Prompt Chaining**: Sequential AI prompts for comprehensive analysis\\n- **Meta-Prompting**: Self-improving prompt strategies\\n- **Context Integration**: Uses prior AI knowledge from `Learn_AI/` directory\\n- **Modular Architecture**: Separate agents for cloning, parsing, planning, and formatting\"\n      },\n      {\n        \"title\": \"\\u2728 Key Features\",\n        \"content\": \"- \\ud83d\\udd0d **Smart Repository Analysis**: Automatically detects project type, complexity, and structure\\n- \\ud83d\\udcdd **Comprehensive Documentation**: Generates sections for overview, installation, usage, API docs, and more\\n- \\ud83d\\udd17 **Prompt Chaining**: Uses sequential AI prompts for detailed, contextual content\\n- \\ud83e\\udde0 **Self-Learning**: Incorporates AI engineering best practices from knowledge base\\n- \\ud83d\\udcca **Multiple Formats**: Outputs markdown with optional PDF/HTML conversion\\n- \\ud83d\\udee0 **Modular Design**: Clean separation of concerns with dedicated agents\"\n      },\n      {\n        \"title\": \"\\ud83c\\udfd7 Architecture\",\n        \"content\": \"```\\nGitRead/\\n\\u251c\\u2500\\u2500 main.py                    # Main orchestrator\\n\\u251c\\u2500\\u2500 agents/                    # Modular agent components\\n\\u2502   \\u251c\\u2500\\u2500 repo_cloner.py        # Repository cloning with GitPython\\n\\u2502   \\u251c\\u2500\\u2500 parser.py             # Structure and content analysis\\n\\u2502   \\u251c\\u2500\\u2500 doc_planner.py        # Outline generation using meta-prompting\\n\\u2502   \\u251c\\u2500\\u2500 section_filler.py     # Content generation via prompt chaining\\n\\u2502   \\u2514\\u2500\\u2500 formatter.py          # Document formatting and conversion\\n\\u251c\\u2500\\u2500 prompts/                   # AI prompt templates\\n\\u2502   \\u251c\\u2500\\u2500 meta_prompt.txt       # Core behavior and guidelines\\n\\u2502   \\u251c\\u2500\\u2500 outline_prompt.txt    # Structure generation prompt\\n\\u2502   \\u2514\\u2500\\u2500 section_prompt.txt    # Section-specific content prompt\\n\\u251c\\u2500\\u2500 outputs/                   # Generated documentation\\n\\u2502   \\u2514\\u2500\\u2500 project_doc.md        # Main output file\\n\\u251c\\u2500\\u2500 Learn_AI/                  # AI knowledge base\\n\\u2502   \\u2514\\u2500\\u2500 guide-to-ai-assisted-engineering.pdf\\n\\u2514\\u2500\\u2500 Project Docs/              # Project planning and architecture\\n    \\u251c\\u2500\\u2500 01_plan.md            # Design blueprint\\n    \\u251c\\u2500\\u2500 02_architecture.mmd   # System diagram\\n    \\u2514\\u2500\\u2500 03_docs.md            # Behavior guide\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude80 Quick Start\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Prerequisites\",\n        \"content\": \"- Python 3.8 or higher\\n- Git installed on your system\\n- Access to an AI/LLM service (OpenAI, Anthropic, etc.)\"\n      },\n      {\n        \"title\": \"Installation\",\n        \"content\": \"1. **Clone the repository:**\\n   ```bash\\n   git clone https://github.com/your-username/GitRead.git\\n   cd GitRead\\n   ```\\n\\n2. **Install dependencies:**\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n3. **Configure AI service:**\\n   ```bash\\n   # Create .env file with your AI service credentials\\n   echo \\\"OPENAI_API_KEY=your_api_key_here\\\" > .env\\n   ```\"\n      },\n      {\n        \"title\": \"Basic Usage\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Generate documentation for a GitHub repository\",\n        \"content\": \"python main.py https://github.com/username/repository\"\n      },\n      {\n        \"title\": \"Specify custom output directory\",\n        \"content\": \"python main.py https://github.com/username/repository --output ./custom_output\"\n      },\n      {\n        \"title\": \"Generate with PDF conversion (requires pandoc)\",\n        \"content\": \"python main.py https://github.com/username/repository --format pdf\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcd6 Usage Examples\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Command Line Interface\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Basic documentation generation\",\n        \"content\": \"python main.py https://github.com/fastapi/fastapi\"\n      },\n      {\n        \"title\": \"With custom configuration\",\n        \"content\": \"python main.py https://github.com/django/django \\\\\\n  --output ./docs \\\\\\n  --format html \\\\\\n  --include-toc \\\\\\n  --verbose\"\n      },\n      {\n        \"title\": \"Batch processing multiple repositories\",\n        \"content\": \"python main.py \\\\\\n  https://github.com/flask/flask \\\\\\n  https://github.com/pallets/click \\\\\\n  --batch-mode\\n```\"\n      },\n      {\n        \"title\": \"Programmatic Usage\",\n        \"content\": \"```python\\nfrom main import GitReadAgent\"\n      },\n      {\n        \"title\": \"Initialize the agent\",\n        \"content\": \"agent = GitReadAgent(output_dir=\\\"./outputs\\\")\"\n      },\n      {\n        \"title\": \"Process a repository\",\n        \"content\": \"result = agent.process_repository(\\n    \\\"https://github.com/username/repository\\\"\\n)\\n\\nprint(f\\\"Documentation generated: {result['output_path']}\\\")\\nprint(f\\\"Sections created: {len(result['sections'])}\\\")\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udd27 Configuration\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Environment Variables\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"AI Service Configuration\",\n        \"content\": \"OPENAI_API_KEY=your_openai_key\\nANTHROPIC_API_KEY=your_anthropic_key\"\n      },\n      {\n        \"title\": \"GitRead Settings\",\n        \"content\": \"GITREAD_OUTPUT_DIR=./outputs\\nGITREAD_TEMP_DIR=./temp\\nGITREAD_LOG_LEVEL=INFO\\nGITREAD_MAX_RETRIES=3\"\n      },\n      {\n        \"title\": \"Document Generation\",\n        \"content\": \"GITREAD_INCLUDE_TOC=true\\nGITREAD_DEFAULT_FORMAT=markdown\\nGITREAD_WORD_LIMIT=10000\\n```\"\n      },\n      {\n        \"title\": \"Custom Prompts\",\n        \"content\": \"Modify prompts in the `prompts/` directory to customize AI behavior:\\n\\n- `meta_prompt.txt`: Core guidelines and role definition\\n- `outline_prompt.txt`: Structure generation instructions\\n- `section_prompt.txt`: Content generation templates\"\n      },\n      {\n        \"title\": \"\\ud83e\\uddea Development\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Setting Up Development Environment\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Clone and setup\",\n        \"content\": \"git clone https://github.com/your-username/GitRead.git\\ncd GitRead\"\n      },\n      {\n        \"title\": \"Create virtual environment\",\n        \"content\": \"python -m venv venv\\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\"\n      },\n      {\n        \"title\": \"Install development dependencies\",\n        \"content\": \"pip install -r requirements.txt\\npip install -e .\"\n      },\n      {\n        \"title\": \"Install pre-commit hooks\",\n        \"content\": \"pre-commit install\\n```\"\n      },\n      {\n        \"title\": \"Running Tests\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Run all tests\",\n        \"content\": \"pytest\"\n      },\n      {\n        \"title\": \"Run with coverage\",\n        \"content\": \"pytest --cov=agents --cov-report=html\"\n      },\n      {\n        \"title\": \"Run specific test file\",\n        \"content\": \"pytest tests/test_repo_cloner.py -v\\n```\"\n      },\n      {\n        \"title\": \"Code Quality\",\n        \"content\": \"```bash\"\n      },\n      {\n        \"title\": \"Format code\",\n        \"content\": \"black .\"\n      },\n      {\n        \"title\": \"Lint code\",\n        \"content\": \"flake8 .\"\n      },\n      {\n        \"title\": \"Type checking\",\n        \"content\": \"mypy agents/\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcca Output Examples\",\n        \"content\": \"GitRead generates comprehensive documentation including:\\n\\n- **Project Overview**: Purpose, features, and target audience\\n- **Technology Stack**: Languages, frameworks, and dependencies\\n- **Installation Guide**: Step-by-step setup instructions\\n- **Usage Examples**: Code samples and common workflows\\n- **API Documentation**: Function signatures and examples\\n- **Project Structure**: Directory organization and key files\\n- **Development Guide**: Local setup and contribution workflow\\n- **Testing Information**: How to run and write tests\\n- **Deployment Guide**: Production setup and CI/CD\"\n      },\n      {\n        \"title\": \"Sample Output Structure\",\n        \"content\": \"```markdown\"\n      },\n      {\n        \"title\": \"Project Name\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Table of Contents\",\n        \"content\": \"- [Project Overview](#project-overview)\\n- [Technology Stack](#technology-stack)\\n- [Installation](#installation)\\n- [Usage](#usage)\\n- [API Documentation](#api-documentation)\\n- [Project Structure](#project-structure)\\n- [Development](#development)\\n- [Testing](#testing)\\n- [Deployment](#deployment)\"\n      },\n      {\n        \"title\": \"Project Overview\",\n        \"content\": \"[Generated content based on repository analysis]\"\n      },\n      {\n        \"title\": \"Technology Stack\",\n        \"content\": \"[Detected languages, frameworks, and dependencies]\\n\\n[... additional sections ...]\\n```\"\n      },\n      {\n        \"title\": \"\\ud83e\\udd1d Contributing\",\n        \"content\": \"We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\"\n      },\n      {\n        \"title\": \"Development Workflow\",\n        \"content\": \"1. Fork the repository\\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\\n3. Make your changes and add tests\\n4. Run the test suite: `pytest`\\n5. Commit your changes: `git commit -m 'Add amazing feature'`\\n6. Push to the branch: `git push origin feature/amazing-feature`\\n7. Open a Pull Request\"\n      },\n      {\n        \"title\": \"\\ud83d\\udccb Roadmap\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Phase 1 (Current)\",\n        \"content\": \"- \\u2705 Basic repository cloning and parsing\\n- \\u2705 Prompt chaining for documentation generation\\n- \\u2705 Markdown output with optional PDF/HTML\\n- \\u2705 Modular agent architecture\"\n      },\n      {\n        \"title\": \"Phase 2 (Planned)\",\n        \"content\": \"- \\ud83d\\udd04 Test generation and coverage detection\\n- \\ud83d\\udd04 Diagram generation for complex systems\\n- \\ud83d\\udd04 Multi-language support\\n- \\ud83d\\udd04 Integration with popular documentation platforms\"\n      },\n      {\n        \"title\": \"Phase 3 (Future)\",\n        \"content\": \"- \\ud83d\\udccb Real-time documentation updates\\n- \\ud83d\\udccb Custom documentation templates\\n- \\ud83d\\udccb Integration with CI/CD pipelines\\n- \\ud83d\\udccb Advanced AI model fine-tuning\"\n      },\n      {\n        \"title\": \"\\ud83d\\udc1b Troubleshooting\",\n        \"content\": \"\"\n      },\n      {\n        \"title\": \"Common Issues\",\n        \"content\": \"**Issue**: `GitPython` clone fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Ensure Git is installed and accessible\",\n        \"content\": \"git --version\"\n      },\n      {\n        \"title\": \"If not installed: brew install git (macOS) or apt-get install git (Ubuntu)\",\n        \"content\": \"```\\n\\n**Issue**: AI service connection errors\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Check API key configuration\",\n        \"content\": \"echo $OPENAI_API_KEY\"\n      },\n      {\n        \"title\": \"Ensure .env file is properly configured\",\n        \"content\": \"```\\n\\n**Issue**: PDF generation fails\\n```bash\"\n      },\n      {\n        \"title\": \"Solution: Install pandoc\",\n        \"content\": \"brew install pandoc  # macOS\\nsudo apt-get install pandoc  # Ubuntu\\n```\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcc4 License\",\n        \"content\": \"This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\"\n      },\n      {\n        \"title\": \"\\ud83d\\ude4f Acknowledgments\",\n        \"content\": \"- Inspired by AI-assisted engineering best practices\\n- Built with modern Python development tools\\n- Leverages the power of large language models for documentation\"\n      },\n      {\n        \"title\": \"\\ud83d\\udcde Support\",\n        \"content\": \"- \\ud83d\\udce7 Email: support@gitread.dev\\n- \\ud83d\\udcac Discord: [GitRead Community](https://discord.gg/gitread)\\n- \\ud83d\\udc1b Issues: [GitHub Issues](https://github.com/your-username/GitRead/issues)\\n- \\ud83d\\udcd6 Documentation: [GitRead Docs](https://docs.gitread.dev)\\n\\n---\\n\\n*Generated with \\u2764\\ufe0f by GitRead Agent*\"\n      }\n    ],\n    \"badges\": [\n      \"https://img.shields.io/badge/python-3.8+-blue.svg\",\n      \"https://img.shields.io/badge/License-MIT-yellow.svg\",\n      \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n    ],\n    \"links\": [\n      {\n        \"text\": \"![Python 3.8+\",\n        \"url\": \"https://img.shields.io/badge/python-3.8+-blue.svg\"\n      },\n      {\n        \"text\": \"![License: MIT\",\n        \"url\": \"https://img.shields.io/badge/License-MIT-yellow.svg\"\n      },\n      {\n        \"text\": \"![Code Style: Black\",\n        \"url\": \"https://img.shields.io/badge/code%20style-black-000000.svg\"\n      },\n      {\n        \"text\": \"Project Overview\",\n        \"url\": \"#project-overview\"\n      },\n      {\n        \"text\": \"Technology Stack\",\n        \"url\": \"#technology-stack\"\n      },\n      {\n        \"text\": \"Installation\",\n        \"url\": \"#installation\"\n      },\n      {\n        \"text\": \"Usage\",\n        \"url\": \"#usage\"\n      },\n      {\n        \"text\": \"API Documentation\",\n        \"url\": \"#api-documentation\"\n      },\n      {\n        \"text\": \"Project Structure\",\n        \"url\": \"#project-structure\"\n      },\n      {\n        \"text\": \"Development\",\n        \"url\": \"#development\"\n      },\n      {\n        \"text\": \"Testing\",\n        \"url\": \"#testing\"\n      },\n      {\n        \"text\": \"Deployment\",\n        \"url\": \"#deployment\"\n      },\n      {\n        \"text\": \"Contributing Guide\",\n        \"url\": \"CONTRIBUTING.md\"\n      },\n      {\n        \"text\": \"LICENSE\",\n        \"url\": \"LICENSE\"\n      },\n      {\n        \"text\": \"GitRead Community\",\n        \"url\": \"https://discord.gg/gitread\"\n      },\n      {\n        \"text\": \"GitHub Issues\",\n        \"url\": \"https://github.com/your-username/GitRead/issues\"\n      },\n      {\n        \"text\": \"GitRead Docs\",\n        \"url\": \"https://docs.gitread.dev\"\n      }\n    ]\n  }\n}\n\n## Output Requirements\n- Write in clear, professional markdown\n- Include code examples where appropriate\n- Be concise but comprehensive\n- Follow technical writing best practices\n"
  }
}