#!/usr/bin/env python3
"""
Code Quality Validation Script
Auto-generated by GitRead Test Generator
"""

import subprocess
import sys
from pathlib import Path


def run_linting():
    """Run code linting checks."""
    try:
        result = subprocess.run(['flake8', '.'], capture_output=True, text=True)
        if result.returncode == 0:
            print("✅ Linting passed")
        else:
            print("❌ Linting failed:")
            print(result.stdout)
        return result.returncode == 0
    except FileNotFoundError:
        print("⚠️ flake8 not found, skipping linting")
        return True


def run_type_checking():
    """Run type checking if applicable."""
    try:
        result = subprocess.run(['mypy', '.'], capture_output=True, text=True)
        if result.returncode == 0:
            print("✅ Type checking passed")
        else:
            print("❌ Type checking failed:")
            print(result.stdout)
        return result.returncode == 0
    except FileNotFoundError:
        print("⚠️ mypy not found, skipping type checking")
        return True


def validate_structure():
    """Validate project structure."""
    required_files = ['README.md', 'requirements.txt']
    missing_files = []
    
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    if missing_files:
        print(f"❌ Missing required files: {missing_files}")
        return False
    else:
        print("✅ Project structure validation passed")
        return True


if __name__ == "__main__":
    print("🔍 Running code quality validation...")
    
    checks = [
        run_linting(),
        run_type_checking(),
        validate_structure()
    ]
    
    if all(checks):
        print("
✅ All validation checks passed!")
        sys.exit(0)
    else:
        print("
❌ Some validation checks failed.")
        sys.exit(1)
