#!/usr/bin/env python3
"""
Repository Processing Script for GitBlueprint UI Integration

This script provides a simple interface to process GitHub repositories
using PromptSwitch and return results in JSON format for the frontend.
"""

import sys
import json
import os
from pathlib import Path
from datetime import datetime

# Add parent directory to path to import PromptSwitch modules
parent_dir = Path(__file__).parent.parent
sys.path.insert(0, str(parent_dir))

try:
    from main import PromptSwitchAgent
except ImportError as e:
    print(json.dumps({
        'success': False,
        'error': f'Failed to import PromptSwitch: {str(e)}',
        'timestamp': datetime.now().isoformat()
    }))
    sys.exit(1)

def process_repository(github_url):
    """Process a GitHub repository and return results as JSON"""
    try:
        # Initialize PromptSwitch agent
        agent = PromptSwitchAgent()
        
        # Process the repository
        results = agent.process_repository(
            github_url,
            enable_testing=True,
            enable_review=True
        )
        
        # Extract key information for the frontend
        repo_data = results.get('outputs', {}).get('repo_data', {})
        weaviate_analysis = results.get('outputs', {}).get('weaviate_analysis', {})
        
        # Create simplified response for frontend
        response = {
            'success': results['success'],
            'repo_name': results.get('repo_name', 'Unknown'),
            'github_url': github_url,
            'timestamp': datetime.now().isoformat(),
            'blueprint': generate_blueprint(results, repo_data),
            'analysis': {
                'file_count': len(repo_data.get('files', [])),
                'languages': repo_data.get('languages', []),
                'dependencies': repo_data.get('dependencies', []),
                'structure': repo_data.get('structure', {}),
                'weaviate_insights': weaviate_analysis.get('insights', {}),
                'similar_repos': weaviate_analysis.get('similar_repositories', []),
                'quality_metrics': results.get('quality_metrics', {})
            },
            'processing_time': calculate_processing_time(results),
            'output_files': results.get('outputs', {}).keys()
        }
        
        return response
        
    except Exception as e:
        return {
            'success': False,
            'error': str(e),
            'github_url': github_url,
            'timestamp': datetime.now().isoformat()
        }

def generate_blueprint(results, repo_data):
    """Generate a development blueprint from the analysis results"""
    repo_name = results.get('repo_name', 'Unknown')
    github_url = results.get('github_url', '')
    languages = repo_data.get('languages', ['Unknown'])
    dependencies = repo_data.get('dependencies', [])
    
    blueprint = f"""# {repo_name} - Development Blueprint

## Environment Requirements
- **Runtime**: {', '.join(languages)}
- **Package Manager**: npm/yarn (if Node.js), pip (if Python), etc.
- **Node Version**: 16+ (if applicable)

## Dependencies
{chr(10).join([f"- {dep}" for dep in dependencies[:10]])}  # Show first 10 dependencies
{'- ... and more' if len(dependencies) > 10 else ''}

## Setup Instructions

### 1. Clone Repository
```bash
git clone {github_url}
cd {repo_name}
```

### 2. Install Dependencies
```bash
# For Node.js projects
npm install
# or
yarn install

# For Python projects
pip install -r requirements.txt
```

### 3. Environment Configuration
```bash
# Copy environment template (if exists)
cp .env.example .env
# Edit .env with your configuration
```

## Golden Path

### Development Workflow
1. **Start Development Server**
   ```bash
   npm run dev  # or appropriate start command
   ```

2. **Run Tests**
   ```bash
   npm test     # or appropriate test command
   ```

3. **Build for Production**
   ```bash
   npm run build
   ```

## Required Secrets
- API_KEY: Your API key
- DATABASE_URL: Database connection string
- JWT_SECRET: JWT signing secret

## Port Configuration
- **Development**: 3000 (default)
- **Production**: 8080 or PORT environment variable

## File Structure
```
{repo_name}/
├── src/           # Source code
├── public/        # Static assets  
├── tests/         # Test files
└── docs/          # Documentation
```

Generated by PromptSwitch Agent v2 on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
    
    return blueprint

def calculate_processing_time(results):
    """Calculate processing time from results"""
    try:
        start_time = results.get('start_time')
        end_time = results.get('end_time')
        if start_time and end_time:
            start = datetime.fromisoformat(start_time.replace('Z', '+00:00'))
            end = datetime.fromisoformat(end_time.replace('Z', '+00:00'))
            duration = (end - start).total_seconds()
            return f"{duration:.2f}s"
    except:
        pass
    return "Unknown"

def main():
    """Main entry point"""
    if len(sys.argv) != 2:
        print(json.dumps({
            'success': False,
            'error': 'Usage: python process_repo.py <github_url>',
            'timestamp': datetime.now().isoformat()
        }))
        sys.exit(1)
    
    github_url = sys.argv[1]
    
    # Validate GitHub URL
    if not github_url.startswith('https://github.com/'):
        print(json.dumps({
            'success': False,
            'error': 'Invalid GitHub URL. Must start with https://github.com/',
            'timestamp': datetime.now().isoformat()
        }))
        sys.exit(1)
    
    # Process repository
    result = process_repository(github_url)
    
    # Output JSON result
    print(json.dumps(result, indent=2))

if __name__ == '__main__':
    main()